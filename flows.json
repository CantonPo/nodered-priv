[
    {
        "id": "16f8c67703e4931d",
        "type": "tab",
        "label": "LC01",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b29fc04ec927643e",
        "type": "tab",
        "label": "LC02",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "15dbec24b3a42a2e",
        "type": "tab",
        "label": "Expedición",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aef79f16fb0c6fb5",
        "type": "tab",
        "label": "BASE de Máquina",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "fe456245c351e442",
        "type": "tab",
        "label": "Añadir maquinas y sensores",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "6abff7f95fadc4e4",
        "type": "tab",
        "label": "Dashboard INTRAZA ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "57387f920ec8def2",
        "type": "tab",
        "label": "Recepción",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6161c7bf6d42c009",
        "type": "junction",
        "z": "b29fc04ec927643e",
        "x": 4500,
        "y": 200,
        "wires": [
            [
                "99dfde706cbaef32"
            ]
        ]
    },
    {
        "id": "5d24d1b86219b1ff",
        "type": "junction",
        "z": "16f8c67703e4931d",
        "x": 4440,
        "y": 180,
        "wires": [
            [
                "792153d0a27f587f"
            ]
        ]
    },
    {
        "id": "12c40120926b6f7d",
        "type": "junction",
        "z": "6abff7f95fadc4e4",
        "x": 1040,
        "y": 680,
        "wires": [
            [
                "a81b83aede8cb926"
            ]
        ]
    },
    {
        "id": "06731e59fbd12c8f",
        "type": "junction",
        "z": "57387f920ec8def2",
        "x": 4460,
        "y": 140,
        "wires": [
            [
                "d2dc115cef04bcb4"
            ]
        ]
    },
    {
        "id": "7ecb7e4baff69bb4",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "ef4d47ab496d1ac2",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "c80c9366827c7678",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "db1e2d31aa784782",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "8c296d361a2e461f",
        "type": "MySQLdatabase",
        "name": "SERRYCAMP",
        "host": "10.0.0.14",
        "port": "3306",
        "db": "alucoat",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "6fa08ffb8b585e4b",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "d0478c107d6bb490",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "INT_MAQUINA3",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "64732452833209d5",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "9691bd63b7506eac",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "500",
        "timeout": "3000",
        "name": "Recepción",
        "vartable": [
            {
                "addr": "DB73,S516.50",
                "name": "3PROCESO"
            },
            {
                "addr": "DB73,S772.50",
                "name": "4FASE"
            },
            {
                "addr": "DB73,S4.50",
                "name": "1LOTE"
            },
            {
                "addr": "DB73,S260.50",
                "name": "2RECETA"
            },
            {
                "addr": "DB39,S256.40",
                "name": "CONDUCTOR"
            },
            {
                "addr": "DB39,S512.50",
                "name": "MATRICULA"
            },
            {
                "addr": "DB39,S0.50",
                "name": "PROVEEDOR"
            },
            {
                "addr": "DB73,X1028.2",
                "name": "zerror_ciclo"
            },
            {
                "addr": "DB73,X1028.0",
                "name": "zAVANCE_MANUAL"
            },
            {
                "addr": "DB73,X1028.1",
                "name": "zABORTAR"
            },
            {
                "addr": "DB39,REAL770",
                "name": "LITROS"
            },
            {
                "addr": "DB73,S1302.50",
                "name": "5OPERARIO"
            },
            {
                "addr": "DB39,INT768",
                "name": "DESTINO"
            }
        ]
    },
    {
        "id": "a7acb5b6a98d4336",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "cda51016d7846dfc",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "int_autoclave",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "929de647e4d8cba5",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "fcb37212e7f39820",
        "type": "ui_tab",
        "name": "Maquinaria",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "6261666fcc2b84a5",
        "type": "ui_tab",
        "name": "Informes de Trazabilidad",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "44c6077c6317bdad",
        "type": "ui_tab",
        "name": "Administración Máquinas y Sensores",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "9d2e83e5ca1580a6",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "044c0accc5f4a14b",
        "type": "ui_tab",
        "name": "INTRAZA HOME",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "b7d20bf6a1fe1a60",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "3613eda666700335",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "c31ff65106d121f5",
        "type": "ui_tab",
        "name": "InTraza 4.0",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "8b6fbadf7fd40ceb",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "85e32c3e7a64624c",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "int_autoclave",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "4f2f86c4c4643a19",
        "type": "ui_tab",
        "name": "Maquinaria",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "fb7cbe056ea61b0e",
        "type": "ui_tab",
        "name": "Informes de Trazabilidad",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "5af209392f1ca479",
        "type": "ui_tab",
        "name": "Administración Máquinas y Sensores",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "68eeb98879ee31fb",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "37b378a6e98972b3",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "addc4923a1156088",
        "type": "ui_tab",
        "name": "INTRAZA HOME",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "a63736ce6ad2db51",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "2ec8099e00a44856",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "68e306920c9164e0",
        "type": "ui_tab",
        "name": "InTraza 4.0",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "13023ebe4a3c4410",
        "type": "MySQLdatabase",
        "name": "MYSQL",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "wordpress",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "bcecd59b807d7543",
        "type": "MySQLdatabase",
        "name": "Autoclave",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "int_autoclave",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "cd0686ba441aa175",
        "type": "ui_tab",
        "name": "Maquinaria",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "d9424f061217b259",
        "type": "ui_tab",
        "name": "Informes de Trazabilidad",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "d38b3b762edb7d56",
        "type": "ui_tab",
        "name": "Administración Máquinas y Sensores",
        "icon": "dashboard",
        "order": 5
    },
    {
        "id": "0653edaf09fd5ff9",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "6beb88d963d065bf",
        "type": "websocket-listener",
        "path": "192.168.9.173:1880/7",
        "wholemsg": "true"
    },
    {
        "id": "cad7d1d748e3e6da",
        "type": "ui_tab",
        "name": "INTRAZA HOME",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "e2c1351e1fd60d9a",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "c0103f0a6c0a268d",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "98c3bb7875c05ba0",
        "type": "ui_tab",
        "name": "InTraza 4.0",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "f3ca9ac4bcf4b2a8",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "500",
        "timeout": "3000",
        "name": "CONTROL RECEPCIÓN",
        "vartable": [
            {
                "addr": "DB73,BYTE1029",
                "name": "ORDEN_LECTURA_general"
            },
            {
                "addr": "DB73,BYTE1030",
                "name": "TIPO_LECTURA_Sensores"
            },
            {
                "addr": "DB73,BYTE1031",
                "name": "ORDEN_LECTURA_Sensores"
            },
            {
                "addr": "DB73,INT1044",
                "name": "CONTROL_EMAIL"
            },
            {
                "addr": "DB73,S1046.50",
                "name": "CONTENIDO_EMAIL"
            },
            {
                "addr": "DB73,INT1558",
                "name": "LOTEC"
            },
            {
                "addr": "DB70,BYTE1565",
                "name": "ADCLC"
            },
            {
                "addr": "DB74,BYTE1565",
                "name": "VRPLC"
            },
            {
                "addr": "DB69,BYTE1565",
                "name": "02PR01QT01C"
            },
            {
                "addr": "DB69,BYTE1565",
                "name": "02PR01TT01C"
            },
            {
                "addr": "DB78,BYTE1565",
                "name": "AIRECOMPRIMIDOC"
            },
            {
                "addr": "DB77,BYTE1565",
                "name": "ELECTRICIDADC"
            },
            {
                "addr": "DB76,BYTE1565",
                "name": "AGUAHELADAC"
            }
        ]
    },
    {
        "id": "09e88552561654c6",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1500",
        "timeout": "2000",
        "name": "EXPEDICIÓN",
        "vartable": [
            {
                "addr": "DB75,S516.50",
                "name": "3PROCESO"
            },
            {
                "addr": "DB75,S772.50",
                "name": "4FASE"
            },
            {
                "addr": "DB75,S4.50",
                "name": "1LOTE"
            },
            {
                "addr": "DB75,S260.50",
                "name": "3RECETA"
            },
            {
                "addr": "DB38,S0.50",
                "name": "CLIENTE"
            },
            {
                "addr": "DB38,S256.50",
                "name": "CONDUCTOR"
            },
            {
                "addr": "DB38,S512.50",
                "name": "MATRICULA"
            },
            {
                "addr": "DB38,INT768",
                "name": "ORIGEN"
            },
            {
                "addr": "DB75,X1028.2",
                "name": "zerror_ciclo"
            },
            {
                "addr": "DB75,X1028.0",
                "name": "zAVANCE_MANUAL"
            },
            {
                "addr": "DB75,X1028.1",
                "name": "zABORTAR"
            }
        ]
    },
    {
        "id": "8f104a4c67c84aaf",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "500",
        "timeout": "2000",
        "name": "CONTROL EXPEDICIÓN",
        "vartable": [
            {
                "addr": "DB75,BYTE1029",
                "name": "ORDEN_LECTURA_general"
            },
            {
                "addr": "DB75,BYTE1030",
                "name": "TIPO_LECTURA_Sensores"
            },
            {
                "addr": "DB75,BYTE1031",
                "name": "ORDEN_LECTURA_Sensores"
            },
            {
                "addr": "DB75,INT1044",
                "name": "CONTROL_EMAIL"
            },
            {
                "addr": "DB75,S1046.250",
                "name": "CONTENIDO_EMAIL"
            },
            {
                "addr": "DB75,INT1558",
                "name": "LOTEC"
            }
        ]
    },
    {
        "id": "2ce6aae0f74a2423",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "500",
        "timeout": "2000",
        "name": "LC01",
        "vartable": [
            {
                "addr": "DB16,S516.50",
                "name": "3PROCESO"
            },
            {
                "addr": "DB50,WORD0",
                "name": "4FASE"
            },
            {
                "addr": "DB16,S4.50",
                "name": "1LOTE"
            },
            {
                "addr": "DB16,S260.50",
                "name": "2RECETA"
            },
            {
                "addr": "DB16,X1028.2",
                "name": "zerror_ciclo"
            },
            {
                "addr": "DB16,X1028.0",
                "name": "zAVANCE_MANUAL"
            },
            {
                "addr": "DB16,X1028.1",
                "name": "zABORTAR"
            },
            {
                "addr": "DB45,REAL0",
                "name": "TT_IMPULSION"
            },
            {
                "addr": "DB45,REAL4",
                "name": "TT_RETORNO"
            },
            {
                "addr": "DB45,REAL8",
                "name": "CT_RETORNO"
            },
            {
                "addr": "DB45,S12.50",
                "name": "MATRICULA_CISTERNA"
            },
            {
                "addr": "DB45,S268.50",
                "name": "CONDUCTOR_CISTERNA"
            },
            {
                "addr": "DB16,S1302.50",
                "name": "5OPERARIO"
            },
            {
                "addr": "DB45,REAL524",
                "name": "LITROS_SOSA"
            },
            {
                "addr": "DB45,REAL528",
                "name": "LITROS_ACIDO"
            }
        ]
    },
    {
        "id": "2ad0d2cae73e4f52",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "500",
        "timeout": "3000",
        "name": "CONTROL LC01",
        "vartable": [
            {
                "addr": "DB16,BYTE1029",
                "name": "ORDEN_LECTURA_general"
            },
            {
                "addr": "DB16,BYTE1030",
                "name": "ORDEN_LECTURA_tipo"
            },
            {
                "addr": "DB16,BYTE1031",
                "name": "ORDEN_LECTURA_Sensores"
            },
            {
                "addr": "DB16,INT1044",
                "name": "CONTROL_EMAIL"
            },
            {
                "addr": "DB16,S1046.250",
                "name": "CONTENIDO_EMAIL"
            },
            {
                "addr": "DB28,BYTE1565",
                "name": "10LC01CT01C"
            },
            {
                "addr": "DB26,BYTE1565",
                "name": "10LC01TT01C"
            },
            {
                "addr": "DB27,BYTE1565",
                "name": "10LC01TT02C"
            },
            {
                "addr": "DB16,INT1558",
                "name": "LOTEC"
            },
            {
                "addr": "DB81,BYTE1565",
                "name": "AIRECOMPRIMIDOC"
            },
            {
                "addr": "DB79,BYTE1565",
                "name": "CONSUMOAGUAC"
            },
            {
                "addr": "DB80,BYTE1565",
                "name": "ELECTRICIDADC"
            },
            {
                "addr": "DB82,BYTE1565",
                "name": "VAPORC"
            }
        ]
    },
    {
        "id": "d4d4f8fd6ca9d180",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "500",
        "timeout": "2000",
        "name": "LC02",
        "vartable": [
            {
                "addr": "DB17,S516.50",
                "name": "3PROCESO"
            },
            {
                "addr": "DB60,WORD0",
                "name": "4FASE"
            },
            {
                "addr": "DB17,S4.50",
                "name": "1LOTE"
            },
            {
                "addr": "DB17,S260.50",
                "name": "2RECETA"
            },
            {
                "addr": "DB17,X1028.2",
                "name": "zerror_ciclo"
            },
            {
                "addr": "DB17,X1028.0",
                "name": "zAVANCE_MANUAL"
            },
            {
                "addr": "DB17,X1028.1",
                "name": "zABORTAR"
            },
            {
                "addr": "DB59,REAL0",
                "name": "TT_IMPULSION"
            },
            {
                "addr": "DB59,REAL4",
                "name": "TT_RETORNO"
            },
            {
                "addr": "DB59,REAL8",
                "name": "CT_RETORNO"
            },
            {
                "addr": "DB59,S12.50",
                "name": "MATRICULA_CISTERNA"
            },
            {
                "addr": "DB59,S268.50",
                "name": "CONDUCTOR_CISTERNA"
            },
            {
                "addr": "DB17,S1302.50",
                "name": "5OPERARIO"
            },
            {
                "addr": "DB59,REAL524",
                "name": "LITROS_SOSA"
            },
            {
                "addr": "DB59,REAL528",
                "name": "LITROS_ACIDO"
            }
        ]
    },
    {
        "id": "6cb2b40212645536",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "2000",
        "name": "Sensores LC01",
        "vartable": [
            {
                "addr": "DB28,S788.50",
                "name": "PROCESO_10LC01CT01"
            },
            {
                "addr": "DB28,S1044.50",
                "name": "FASE_10LC01CT01"
            },
            {
                "addr": "DB28,REAL1300",
                "name": "CONTADOR_10LC01CT01"
            },
            {
                "addr": "DB28,S1308.50",
                "name": "10LC01CT01_10LC01CT01"
            },
            {
                "addr": "DB28,REAL1304",
                "name": "SP10LC01CT01_10LC01CT01"
            },
            {
                "addr": "DB26,S788.50",
                "name": "PROCESO_10LC01TT01"
            },
            {
                "addr": "DB26,S788.50",
                "name": "FASE_10LC01TT01"
            },
            {
                "addr": "DB26,REAL1304",
                "name": "CONTADOR_10LC01TT01"
            },
            {
                "addr": "DB26,S1308.50",
                "name": "10LC01TT01_10LC01TT01"
            },
            {
                "addr": "DB26,REAL1304",
                "name": "SP10LC01TT01_10LC01TT01"
            },
            {
                "addr": "DB28,S788.50",
                "name": "PROCESO_10LC01TT02"
            },
            {
                "addr": "DB27,S788.50",
                "name": "FASE_10LC01TT02"
            },
            {
                "addr": "DB27,REAL1304",
                "name": "CONTADOR_10LC01TT02"
            },
            {
                "addr": "DB27,S1308.50",
                "name": "10LC01TT02_10LC01TT02"
            },
            {
                "addr": "DB27,REAL1304",
                "name": "SP10LC01TT02_10LC01TT02"
            },
            {
                "addr": "DB81,S1308.50",
                "name": "AIRECOMPRIMIDO_AIRECOMPRIMIDO"
            },
            {
                "addr": "DB79,S1308.50",
                "name": "CONSUMOAGUA_CONSUMOAGUA"
            },
            {
                "addr": "DB80,S1308.50",
                "name": "ELECTRICIDAD_ELECTRICIDAD"
            },
            {
                "addr": "DB82,S1308.50",
                "name": "VAPOR_VAPOR"
            }
        ]
    },
    {
        "id": "884e4ae10df762d0",
        "type": "MySQLdatabase",
        "name": "LC01",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "INT_LC01",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "f80ab5477cb83c39",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "2000",
        "name": "SENSORES LC02",
        "vartable": [
            {
                "addr": "DB37,S788.50",
                "name": "PROCESO_10LC02CT01"
            },
            {
                "addr": "DB37,S1044.50",
                "name": "FASE_10LC02CT01"
            },
            {
                "addr": "DB37,REAL1300",
                "name": "CONTADOR_10LC02CT01"
            },
            {
                "addr": "DB37,S1308.50",
                "name": "10LC02CT01_10LC02CT01"
            },
            {
                "addr": "DB37,REAL1304",
                "name": "SP10LC02CT01_10LC02CT01"
            },
            {
                "addr": "DB29,S788.50",
                "name": "PROCESO_10LC02TT01"
            },
            {
                "addr": "DB29,S788.50",
                "name": "FASE_10LC02TT01"
            },
            {
                "addr": "DB29,REAL1304",
                "name": "CONTADOR_10LC02TT01"
            },
            {
                "addr": "DB29,S1308.50",
                "name": "10LC02TT01_10LC02TT01"
            },
            {
                "addr": "DB29,REAL1304",
                "name": "SP10LC02TT01_10LC02TT01"
            },
            {
                "addr": "DB36,S788.50",
                "name": "PROCESO_10LC02TT02"
            },
            {
                "addr": "DB36,S788.50",
                "name": "FASE_10LC02TT02"
            },
            {
                "addr": "DB36,REAL1304",
                "name": "CONTADOR_10LC02TT02"
            },
            {
                "addr": "DB36,S1308.50",
                "name": "10LC02TT02_10LC02TT02"
            },
            {
                "addr": "DB36,REAL1304",
                "name": "SP10LC02TT02_10LC02TT02"
            },
            {
                "addr": "DB85,S1308.50",
                "name": "AIRECOMPRIMIDO_AIRECOMPRIMIDO"
            },
            {
                "addr": "DB83,S1308.50",
                "name": "CONSUMOAGUA_CONSUMOAGUA"
            },
            {
                "addr": "DB84,S1308.50",
                "name": "ELECTRICIDAD_ELECTRICIDAD"
            },
            {
                "addr": "DB86,S1308.50",
                "name": "VAPOR_VAPOR"
            }
        ]
    },
    {
        "id": "b0c24bc0315a3586",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "500",
        "timeout": "2000",
        "name": "CONTROL LC02",
        "vartable": [
            {
                "addr": "DB17,BYTE1029",
                "name": "ORDEN_LECTURA_general"
            },
            {
                "addr": "DB17,BYTE1030",
                "name": "ORDEN_LECTURA_tipo"
            },
            {
                "addr": "DB17,BYTE1031",
                "name": "ORDEN_LECTURA_Sensores"
            },
            {
                "addr": "DB17,INT1044",
                "name": "CONTROL_EMAIL"
            },
            {
                "addr": "DB17,S1046.50",
                "name": "CONTENIDO_EMAIL"
            },
            {
                "addr": "DB37,BYTE1565.1",
                "name": "10LC02CT01C"
            },
            {
                "addr": "DB29,BYTE1565.1",
                "name": "10LC02TT01C"
            },
            {
                "addr": "DB36,BYTE1565.1",
                "name": "10LC02TT02C"
            },
            {
                "addr": "DB17,INT1558",
                "name": "LOTEC"
            },
            {
                "addr": "DB85,BYTE1565",
                "name": "AIRECOMPRIMIDOC"
            },
            {
                "addr": "DB83,BYTE1565",
                "name": "CONSUMOAGUAC"
            },
            {
                "addr": "DB84,BYTE1565",
                "name": "ELECTRICIDADC"
            },
            {
                "addr": "DB86,BYTE1565",
                "name": "VAPORC"
            }
        ]
    },
    {
        "id": "db0d781e87ac7b25",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "2000",
        "name": "SENSORES RECEPCION",
        "vartable": [
            {
                "addr": "DB73,S4.50",
                "name": "1LOTE_LOTE"
            },
            {
                "addr": "DB73,S516.50",
                "name": "2PROCESO_LOTE"
            },
            {
                "addr": "DB70,S788.50",
                "name": "PROCESO_ADCL"
            },
            {
                "addr": "DB70,S144.50",
                "name": "FASE_ADCL"
            },
            {
                "addr": "DB70,S1308.50",
                "name": "ADCL_ADCL"
            },
            {
                "addr": "DB74,S788.50",
                "name": "PROCESO_VRPL"
            },
            {
                "addr": "DB74,S144.50",
                "name": "FASE_VRPL"
            },
            {
                "addr": "DB74,S1308.5",
                "name": "VRPL_VRPL"
            },
            {
                "addr": "DB69,S788.50",
                "name": "2PROCESO_02PR01QT01"
            },
            {
                "addr": "DB69,S1308.50",
                "name": "02PR01QT01_02PR01QT01"
            },
            {
                "addr": "DB69,S1044.50",
                "name": "3FASE_02PR01QT01"
            },
            {
                "addr": "DB68,S788.50",
                "name": "2PROCESO_02PR01TT01"
            },
            {
                "addr": "DB68,S1308.50",
                "name": "02PR01TT01_02PR01TT01"
            },
            {
                "addr": "DB68,S1044.50",
                "name": "3FASE_02PR01TT01"
            }
        ]
    },
    {
        "id": "3ee372b557faa875",
        "type": "MySQLdatabase",
        "name": "Interia",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "Interia",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "d6745bd9bd478db4",
        "type": "MySQLdatabase",
        "name": "RECEPCIÓN",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "INT_RECEPCION",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "bd5f4318a967a433",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "2000",
        "name": "CONSUMOS RECEPCIÓN",
        "vartable": [
            {
                "addr": "DB76,S1308.50",
                "name": "99AGUAHELADA(Wh)"
            },
            {
                "addr": "DB78,S1308.50",
                "name": "99AIRECOMPRIMIDO(Wh)"
            },
            {
                "addr": "DB77,S1308.50",
                "name": "99ELECTRICIDAD(Wh)"
            }
        ]
    },
    {
        "id": "956d16a5f3a1c031",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "2000",
        "name": "CONSUMOS LC01",
        "vartable": [
            {
                "addr": "DB81,S1308.50",
                "name": "99AIRECOMPRIMIDO(Wh)"
            },
            {
                "addr": "DB79,S1308.50",
                "name": "99CONSUMOAGUA(Lh)"
            },
            {
                "addr": "DB80,S1308.50",
                "name": "99ELECTRICIDAD(Wh)"
            },
            {
                "addr": "DB82,S1308.50",
                "name": "99VAPOR(gv/h)"
            }
        ]
    },
    {
        "id": "0a38ef4bc8ee3334",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.0.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "2000",
        "name": "CONSUMOS LC02",
        "vartable": [
            {
                "addr": "DB85,S1308.50",
                "name": "99AIRECOMPRIMIDO(Wh)"
            },
            {
                "addr": "DB83,S1308.50",
                "name": "99CONSUMOAGUA(Lh)"
            },
            {
                "addr": "DB84,S1308.50",
                "name": "99ELECTRICIDAD(Wh)"
            },
            {
                "addr": "DB86,S1308.50",
                "name": "99VAPOR(gv/h)"
            }
        ]
    },
    {
        "id": "67c244d0525321fb",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "5344849289d45d74",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "------------------------------------------------------------------------*ESCRITURA EN GENERAL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2020,
        "y": 700,
        "wires": []
    },
    {
        "id": "f29ec60947af87da",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "9348eec631664bd9",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = 'LC01'\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 340,
        "wires": [
            [
                "30da744253faaa80"
            ]
        ]
    },
    {
        "id": "30da744253faaa80",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 320,
        "wires": []
    },
    {
        "id": "f53b8ff48af04bb1",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Escritura en Tabla de Sensor",
        "func": "/*Este nodo prepara el Query para almacenar la información\ndel sensor proveniente del PLC en su lugar correspondiente.\nEsto solo se procesa si la orden de lectura de este sensor\nse encuentra activa\n*/\nmsg.payload = flow.get('Objeto');\n\nif (flow.get('NumSensor') <= flow.get('MaxSensor') && msg.payload[ + flow.get('Sensor' + flow.get('NumSensor'))] == true) {\n    var tableName = flow.get('Sensor' + flow.get('NumSensor'));\n    var datetime = flow.get('FechaHora');\n    var value = msg.payload[flow.get('NumSensor')];\n    var dbName = flow.get('DBname');\n      \n   var topic = \"INSERT INTO \" + dbName + \".\" + tableName + \" (FechaHora, Unidad) VALUES ('\" + datetime + \"', '\" + value + \"');\";\n   \n\n    msg.queryCompresion = \"SELECT Valor FROM \" + flow.get('DBname') + \".\" + tableName + \" ORDER BY FechaHora DESC LIMIT 1;\";\n\n    msg.topic = topic;\n    flow.set(\"queryValor\", msg.topic);\n    msg.payload = 0;\n    return msg;\n} else {\n    msg.payload = 1;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 2240,
        "wires": [
            [
                "3034e126431f448d",
                "ba0f480011efe85b",
                "f44d5876eb786759"
            ]
        ]
    },
    {
        "id": "d3ff0134f547341f",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1220,
        "wires": [
            [
                "b0aef6efabbb7dcf"
            ]
        ]
    },
    {
        "id": "2d01bee7fd57c734",
        "type": "switch",
        "z": "16f8c67703e4931d",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1220,
        "wires": [
            [
                "23942605068baf0f"
            ],
            [
                "d3ff0134f547341f"
            ]
        ]
    },
    {
        "id": "b0aef6efabbb7dcf",
        "type": "switch",
        "z": "16f8c67703e4931d",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2380,
        "y": 1220,
        "wires": [
            [
                "7a45c6193e75b640"
            ],
            [
                "5206f94eb946dd89"
            ]
        ]
    },
    {
        "id": "d81f6a9f0db54d93",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LOOP DEVOLUCION O ERROR",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1160,
        "wires": [
            [
                "e7dffc5fa893d0d3"
            ]
        ]
    },
    {
        "id": "e7dffc5fa893d0d3",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<12){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "2d01bee7fd57c734"
            ]
        ]
    },
    {
        "id": "5206f94eb946dd89",
        "type": "delay",
        "z": "16f8c67703e4931d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2600,
        "y": 1260,
        "wires": [
            [
                "e7dffc5fa893d0d3"
            ]
        ]
    },
    {
        "id": "23942605068baf0f",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1160,
        "wires": [
            [
                "ad504ceea3cab3d7"
            ]
        ]
    },
    {
        "id": "ba0f480011efe85b",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2220,
        "wires": []
    },
    {
        "id": "f683324ac3820c57",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Definir_MaxSensor",
        "func": "/*Este nodo declara la variable de flow MaxSensores para conocer\ncuantos sensores hay definidos en la máquina\n*/\nvar valor = Object.values(msg.payload);\nflow.set('MaxSensor',valor['0']);\nmsg.payload = flow.get('MaxSensor');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 460,
        "wires": [
            [
                "585221ca9b93267b",
                "9836f70ff5886bfe"
            ]
        ]
    },
    {
        "id": "585221ca9b93267b",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "Numero de sensores1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 460,
        "wires": []
    },
    {
        "id": "0bc3a33b66da1521",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Inicializacion del loop",
        "func": "/*Este nodo inicializa las variables necesarias para ciclar\nla información de cada uno de los sensores y escribirla en \nla tabla correspondiente en la BD de la máquina\n*/\n\nflow.set('NumSensor',1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 2200,
        "wires": [
            [
                "f53b8ff48af04bb1",
                "a90de32a6e4efea1"
            ]
        ]
    },
    {
        "id": "3034e126431f448d",
        "type": "switch",
        "z": "16f8c67703e4931d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 2380,
        "wires": [
            [
                "23b1633b55b9e158"
            ],
            [
                "51674b75d0dbe337"
            ]
        ]
    },
    {
        "id": "51674b75d0dbe337",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "loop",
        "func": "if(flow.get('NumSensor')<flow.get('MaxSensor')){\n    flow.set('NumSensor',flow.get('NumSensor')+1);\n    msg.payload = flow.get('NumSensor');\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 2380,
        "wires": [
            [
                "f53b8ff48af04bb1"
            ]
        ]
    },
    {
        "id": "cbd7bb8a6f8d0881",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Buscar Numero de sensores",
        "func": "/*Este nodo consulta la tabla Sensores para saber cuántas\nentradas existen en la tabla, siendo cada una de ellas\nun sensor\n*/\n\nmsg.topic = \"SELECT COUNT(*) FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 440,
        "wires": [
            [
                "9e508042754bb477"
            ]
        ]
    },
    {
        "id": "4fd0f821f5d6d3b5",
        "type": "split",
        "z": "16f8c67703e4931d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2070,
        "y": 460,
        "wires": [
            [
                "f683324ac3820c57"
            ]
        ]
    },
    {
        "id": "1f368b21106c8e9a",
        "type": "trigger",
        "z": "16f8c67703e4931d",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1420,
        "y": 340,
        "wires": [
            [
                "9348eec631664bd9",
                "cbd7bb8a6f8d0881"
            ]
        ]
    },
    {
        "id": "228b212ded180274",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "FechaHora",
        "func": "/*Declara la valiable FechaHora que contiene la fecha y hora \nque será utilizada en el flow\n*/\nvar now = new Date(); \nvar año = now.getFullYear();\nvar mes = now.getMonth()+1; \nvar dia = now.getDate();\nvar hora = now.getHours();\nvar minuto = now.getMinutes();\nvar segundo = now.getSeconds(); \n\n\nif(mes.toString().length == 1) {\n    mes = '0'+mes;\n}\n\nif(dia.toString().length == 1) {\n    dia = '0'+dia;\n} \n\nif(hora.toString().length == 1) {\n    hora = '0'+hora;\n}\n\nif(minuto.toString().length == 1) {\n    minuto = '0'+minuto;\n    \n}\n\nif(segundo.toString().length == 1) {\n    segundo = '0'+segundo;\n} \n\n\nvar FechaHoralocal = año+'-'+mes+'-'+dia+' '+hora+':'+minuto+':'+segundo;\nflow.set('FechaHora',FechaHoralocal);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "94a8819dd898ee35",
        "type": "rbe",
        "z": "16f8c67703e4931d",
        "name": "Block unless value changes",
        "func": "deadband",
        "gap": "0",
        "start": "1",
        "inout": "out",
        "septopics": true,
        "property": "payload['ORDEN_LECTURA_general']",
        "topi": "topic",
        "x": 2460,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "f1de40ecd8d2b4d2",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "EscrituraErrorCiclo",
        "func": "/*Este nodo se encarga de notificar que ha habido un error\ndurante el proceso de escritura, resultando en que el PLC\nno recibió la orden de setear la variable OrdenLectura a 0 y\ntuvo que avanzar de manera automática tras esperar la orden\ndurante 60 segundos sin resultado\n*/\nflow.set('ERROR_CICLO', msg.payload['ERROR_CICLO']);\n\nif (flow.get('ERROR_CICLO') == 1) {\n    msg.topic = \"INSERT INTO \" + flow.get('DBname') + \".General (error_ciclo) VALUES ('\";\n    msg.topic += flow.get('ERROR_CICLO') + \"');\";\n\n    msg.topic = msg.topic;\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1280,
        "wires": [
            [
                "6b74b14e86682974"
            ]
        ]
    },
    {
        "id": "c83b1c3460172e93",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Cantidad de producciones?",
        "func": "flow.set('CantidadProducciones',msg.payload['CantidadProducciones']);\nmsg.payload = flow.get('CantidadProducciones');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "1a157968503052e7",
                "b22930f5f7cdbe58"
            ]
        ]
    },
    {
        "id": "1a157968503052e7",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "CONSULTA3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 560,
        "wires": []
    },
    {
        "id": "8577082a4a6cd395",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Buscar info los sensores",
        "func": "/*Este nodo realiza un Query para obtener la informacion\ndel nombre de cada sensor para declararlos como variables de\nflow y que puedan ser utilizados en el apartado de *Escritura en Sensores*\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "7a643b1bf9d8f83b"
            ]
        ]
    },
    {
        "id": "de5fb1e16bf59257",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Declaracion de sensores",
        "func": "// Este nodo guarda el nombre de cada sensor en una variable de flujo para ser utilizada en este flujo\n\n// Obtener el valor actual de 'i' de la variable de flujo (si 'i' no está definida, se asumirá inicialmente como 0)\nvar i = flow.get('i') || 0;\n\n// Obtener el array de sensores del mensaje de entrada\nvar array = Object.values(msg.payload);\n\n// Iterar a través de cada sensor hasta el número máximo de sensores definido en 'MaxSensor'\nfor (; i < flow.get('MaxSensor') && i < array.length; i++) {\n    // Guardar el objeto sensor actual en una variable de flujo con un nombre único\n    flow.set('Sensor' + (i + 1), array[i].Sensor);\n}\n\n// Guardar el valor actual de 'i' en la variable de flujo\nflow.set('i', i);\n\n// Devolver el mensaje de entrada sin cambios\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 520,
        "wires": [
            [
                "fb1de3694cfbf8ae",
                "84a1e2d9c23d0a42"
            ]
        ]
    },
    {
        "id": "fb1de3694cfbf8ae",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "CONSULTA2(ARRAY) SENSORES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 520,
        "wires": []
    },
    {
        "id": "d376562dc5669d02",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "------------------------------------------------------------------------*DATOS DE MAQUINA*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de cada máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 750,
        "y": 760,
        "wires": []
    },
    {
        "id": "1c0a2a1946b259e1",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "Consultas de informacion necesaria para el programa",
        "info": "",
        "x": 1740,
        "y": 380,
        "wires": []
    },
    {
        "id": "0a03e5b4b406f11c",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "------------------------------------------------------------------------*ESCRITURA EN LAS TABLAS DE SENSOR Y ASIGNACIÓN DE ID*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2170,
        "y": 2140,
        "wires": []
    },
    {
        "id": "57adaab8a35849e5",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "INSTRUCCIONES ------ POR FAVOR LEER PARA CORRECTA CONFIGURACIÓN DEL FLOW",
        "info": "INFORMACION PARA CONFIGURAR EL FLOW DE MAQUINA:\n\nCuando se quiera configurar este flow por primera vez el usuario debe editar 3 nodos:\n\n-`Definir_Maquina`: Se debe asignar a la variable Nombre el nombre que tenga nuestra máquina. (var Nombre = 'Nombre de la máquina')\n\n-`Definir_SQL`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo Connection. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro servidor de base de datos los campos Server, Port, Username y Password.\n\n-`Definir_PLC`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo PLC. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro PLC los campos Adress y Port bajo la pestaña Connection. Además, en la pestaña Variables debemos declarar la dirección y nombre de cada una de nuestras variables.\n\n`IMPORTANTE`: Recordar que el nombre que demos a las variables de sensores deben ser iguales que los otorgados a estos mismos sensores en las variables de sensor del flow `Añadir máquinas y sensores`",
        "x": 730,
        "y": 720,
        "wires": []
    },
    {
        "id": "bf382b93a343aae9",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "DEFINIR",
        "info": "",
        "x": 1960,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "d61fbb0f8bcdf65c",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "DEFINIR",
        "info": "",
        "x": 1620,
        "y": 300,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "4233496c291b0f69",
        "type": "delay",
        "z": "16f8c67703e4931d",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 2200,
        "wires": [
            [
                "0bc3a33b66da1521"
            ]
        ]
    },
    {
        "id": "5006a387653dd17b",
        "type": "delay",
        "z": "16f8c67703e4931d",
        "name": "",
        "pauseType": "delay",
        "timeout": "700",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "f1de40ecd8d2b4d2"
            ]
        ]
    },
    {
        "id": "2bb7f71cb2776441",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Update Fin",
        "func": "msg.topic = \"UPDATE \" + flow.get('DBname') + \".General \";\nmsg.topic += \"SET Fin = '\" + flow.get('FechaHora') + \"';\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 920,
        "wires": [
            [
                "95e7d2e7efd4760b"
            ]
        ]
    },
    {
        "id": "bc465c6b8eb5ee48",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "REVISAR DELAY",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 900,
        "wires": []
    },
    {
        "id": "914773196700475a",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "4c62598b1f9c2f87",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "0ec4675823b66c1f",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "a13dfcc2f7b5e866",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "8368804aace61c36",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "COMPROBACION ULTIMA FILA",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".General ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "9cfab52c7e6491f2",
                "512b28f9370cdf8e"
            ]
        ]
    },
    {
        "id": "c30ab1c127f455ad",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "COMPARACION DE ARRAYS",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocal = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducido',arrayIntroducidolocal);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1100,
        "wires": [
            [
                "d81f6a9f0db54d93"
            ]
        ]
    },
    {
        "id": "512b28f9370cdf8e",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1100,
        "wires": []
    },
    {
        "id": "f44d5876eb786759",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "23451393ab97b2c7",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Check Valores iguales",
        "func": "//recuperamos el valor de la ultima medida del sensor y lo comparamos con el que estamos a punto de introducir\n//si estos valores coinciden, en lugar de seguir con la escritura saltamos una iteracion en el loop\nmsg.payload = msg.payload[0];\nmsg.payload = msg.payload[\"Valor\"];\nflow.set(\"ValorPrevio\", msg.payload);\n\nmsg.payload = flow.get(\"Objeto\");\nvar sensorKey = 'Sensor' + flow.get('NumSensor');\nmsg.payload = msg.payload[sensorKey];\nflow.set(\"ValorActual\", msg.payload);\n\nif (flow.get(\"ValorPrevio\") !== flow.get(\"ValorActual\")) {\n    msg.topic = \"INSERT INTO \" + flow.get(\"DBname\") + \".Tabla (Valor) VALUES ('\" + flow.get(\"ValorActual\") + \"');\";\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 2220,
        "wires": [
            [
                "d8e69fca1ea5073a",
                "a525d13730c4fbde"
            ]
        ]
    },
    {
        "id": "d8e69fca1ea5073a",
        "type": "switch",
        "z": "16f8c67703e4931d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 2280,
        "wires": [
            [
                "759dfa2b0cc888ea"
            ],
            [
                "51674b75d0dbe337"
            ]
        ]
    },
    {
        "id": "23b1633b55b9e158",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Bypass compresion",
        "func": "if (flow.get(\"ModoCompresion\") == 1) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 2380,
        "wires": [
            [
                "41c56b8e1ac700cf"
            ]
        ]
    },
    {
        "id": "41c56b8e1ac700cf",
        "type": "switch",
        "z": "16f8c67703e4931d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2430,
        "y": 2380,
        "wires": [
            [
                "41230c6cbb55b611"
            ],
            [
                "759dfa2b0cc888ea"
            ]
        ]
    },
    {
        "id": "01db304c5e82b8ae",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Modo Compresion",
        "func": "flow.set(\"ModoCompresion\",msg.payload);\nmsg.payload = \"Modo Compresion Status=\"+flow.get(\"ModoCompresion\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2480,
        "wires": [
            [
                "43cb3c83a957ccf5"
            ]
        ]
    },
    {
        "id": "c899a462236876d5",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1630,
        "y": 2460,
        "wires": [
            [
                "01db304c5e82b8ae"
            ]
        ]
    },
    {
        "id": "a222edeb6afaf8fa",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1630,
        "y": 2500,
        "wires": [
            [
                "01db304c5e82b8ae"
            ]
        ]
    },
    {
        "id": "a525d13730c4fbde",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "COMPRESSION",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 2220,
        "wires": []
    },
    {
        "id": "43cb3c83a957ccf5",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2480,
        "wires": []
    },
    {
        "id": "b3cd317fc5744dcc",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "",
        "func": "\nvar signals = flow.get(\"Signals\");\n\nfor(var j =0;j <flow.get(\"NumSignals\");j++){\n    \n    flow.set(String(signals[j]),msg.payload[String(signals[j])]);\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 640,
        "wires": [
            [
                "b4dc01ba48e78d90"
            ]
        ]
    },
    {
        "id": "b4dc01ba48e78d90",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 640,
        "wires": []
    },
    {
        "id": "f1c58eb79a551b84",
        "type": "split",
        "z": "16f8c67703e4931d",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1940,
        "y": 760,
        "wires": [
            [
                "2935b463dfaa94b3"
            ]
        ]
    },
    {
        "id": "2935b463dfaa94b3",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 760,
        "wires": [
            [
                "230f797b5dba2089"
            ]
        ]
    },
    {
        "id": "966fb945da478cc5",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set variables auxiliares",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"Objeto\",msg.payload);\nflow.set(\"NumSignals\",Object.keys(flow.get(\"Objeto\")).length);\nflow.set(`j`,0);\nflow.set(\"PredefinedSignalsArray\",new Array(flow.get(\"NumSignals\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 760,
        "wires": [
            [
                "f1c58eb79a551b84"
            ]
        ]
    },
    {
        "id": "230f797b5dba2089",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "2f9eac95d643cfcf",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "CONSULTA4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1280,
        "wires": []
    },
    {
        "id": "9836f70ff5886bfe",
        "type": "link out",
        "z": "16f8c67703e4931d",
        "name": "Numero de Sensores",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 460,
        "wires": []
    },
    {
        "id": "84a1e2d9c23d0a42",
        "type": "link out",
        "z": "16f8c67703e4931d",
        "name": "Info de los Sensores OBJECT",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 520,
        "wires": []
    },
    {
        "id": "b22930f5f7cdbe58",
        "type": "link out",
        "z": "16f8c67703e4931d",
        "name": "Cantidad de Producciones Number",
        "mode": "link",
        "links": [],
        "x": 2595,
        "y": 560,
        "wires": []
    },
    {
        "id": "a90de32a6e4efea1",
        "type": "link out",
        "z": "16f8c67703e4931d",
        "name": "INFO SENSOR TEXT",
        "mode": "link",
        "links": [],
        "x": 2215,
        "y": 2200,
        "wires": []
    },
    {
        "id": "dafc865d654076d1",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "REVISAR",
        "info": "UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1; : msg.topic : string[93]\n\"UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1;\"",
        "x": 1500,
        "y": 920,
        "wires": []
    },
    {
        "id": "3ee003ff6f7bf83a",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "INSERT EN GENERAL",
        "func": "var signals = flow.get(\"Signals\");\nvar objeto = flow.get(\"Objeto\");\nvar dbName = flow.get(\"DBname\");\nvar fechaHora = flow.get(\"FechaHora\");\n\n// Construir la consulta SQL de inserción\nvar topic = \"INSERT INTO `\" + dbName + \"`.`General` VALUES (\";\n\n// Agregar la fecha y hora\ntopic += \"'\" + fechaHora + \"', \";\n\n// Agregar la primera señal\nvar firstSignal = signals[0];\nvar firstValor = objeto[firstSignal];\nif (typeof firstValor === 'string') {\n    topic += \"'\" + firstValor + \"'\";\n} else {\n    topic += firstValor;\n}\n\n// Agregar coma\ntopic += \", \";\n\n// Iterar a través del resto de las señales y construir los valores de la inserción\nfor (var k = 1; k < signals.length; k++) {\n    var signal = signals[k];\n\n    // Obtener el valor correspondiente del objeto\n    var valor = objeto[signal];\n\n    // Agregar el valor a la consulta SQL\n    if (typeof valor === 'string') {\n        // Si es una cadena, agregar comillas simples alrededor del valor\n        topic += \"'\" + valor + \"'\";\n    } else {\n        // De lo contrario, agregar el valor directamente\n        topic += valor;\n    }\n\n    // Agregar coma si no es el último valor\n    if (k < signals.length - 1) {\n        topic += \", \";\n    }\n}\n\n// Cerrar paréntesis de la consulta SQL de inserción\ntopic += \")\";\n\n// return the SQL query\nreturn {\n    topic: topic\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 980,
        "wires": [
            [
                "bc465c6b8eb5ee48",
                "8b0da61131966fc6"
            ]
        ]
    },
    {
        "id": "9e508042754bb477",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 460,
        "wires": [
            [
                "4fd0f821f5d6d3b5",
                "8577082a4a6cd395"
            ]
        ]
    },
    {
        "id": "7a643b1bf9d8f83b",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 520,
        "wires": [
            [
                "de5fb1e16bf59257"
            ]
        ]
    },
    {
        "id": "95e7d2e7efd4760b",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 920,
        "wires": [
            [
                "3ee003ff6f7bf83a"
            ]
        ]
    },
    {
        "id": "9cfab52c7e6491f2",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 1040,
        "wires": [
            [
                "c30ab1c127f455ad"
            ]
        ]
    },
    {
        "id": "ad504ceea3cab3d7",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1160,
        "wires": [
            [
                "32400e33a3061857"
            ]
        ]
    },
    {
        "id": "6b74b14e86682974",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1280,
        "wires": [
            [
                "2f9eac95d643cfcf"
            ]
        ]
    },
    {
        "id": "41230c6cbb55b611",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2570,
        "y": 2260,
        "wires": [
            [
                "23451393ab97b2c7"
            ]
        ]
    },
    {
        "id": "759dfa2b0cc888ea",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2970,
        "y": 2380,
        "wires": [
            [
                "51674b75d0dbe337"
            ]
        ]
    },
    {
        "id": "3b6e829fa7489966",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "OVERRIDE DE O.L POR SENSOR",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "a627c8a1ea26bf34",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "info": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "x": 2490,
        "y": 1060,
        "wires": []
    },
    {
        "id": "9b36e7afae7f5ccc",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "REVISAR",
        "info": "",
        "x": 2360,
        "y": 380,
        "wires": []
    },
    {
        "id": "779efaa1eb989496",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3400,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4acdc3a867c5d987",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "e17332ffe57bbd2c",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1720,
        "wires": [
            [
                "0a79cde22386fb50"
            ]
        ]
    },
    {
        "id": "46a2a4da3b1af6ee",
        "type": "switch",
        "z": "16f8c67703e4931d",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1720,
        "wires": [
            [
                "c27ca5c31ec9d342"
            ],
            [
                "e17332ffe57bbd2c"
            ]
        ]
    },
    {
        "id": "0a79cde22386fb50",
        "type": "switch",
        "z": "16f8c67703e4931d",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1720,
        "wires": [
            [
                "1a6a934dace77299"
            ],
            [
                "1cc035da93508cea"
            ]
        ]
    },
    {
        "id": "609814afd7e3d82c",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "i for loop",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1660,
        "wires": [
            [
                "b098afb872fd371e"
            ]
        ]
    },
    {
        "id": "b098afb872fd371e",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<4){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1720,
        "wires": [
            [
                "46a2a4da3b1af6ee"
            ]
        ]
    },
    {
        "id": "1cc035da93508cea",
        "type": "delay",
        "z": "16f8c67703e4931d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2590,
        "y": 1720,
        "wires": [
            [
                "b098afb872fd371e"
            ]
        ]
    },
    {
        "id": "c27ca5c31ec9d342",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".Errorlog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1660,
        "wires": [
            [
                "d05f5c1c7507992e"
            ]
        ]
    },
    {
        "id": "1a6a934dace77299",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "CORTE REBOBINADOR",
        "func": "if(flow.get('CORTE_REBOBINADOR')==1){\n        msg.payload=0;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 1720,
        "wires": [
            [
                "6708cd6f1d3ffefa",
                "2cddd75860319d18"
            ]
        ]
    },
    {
        "id": "a60139e414a5aabe",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "c792845fb77d6574",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "c765cb7b5c024b70",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "94340bf311d44705",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "93ca184050f24bed",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Control ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            [
                "08f3182e10e9d7ce"
            ]
        ]
    },
    {
        "id": "8d00fa5446353685",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "ArraysParaComparar",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocalcontrol = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducidocontrol',arrayIntroducidolocalcontrol);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1600,
        "wires": [
            [
                "609814afd7e3d82c"
            ]
        ]
    },
    {
        "id": "08f3182e10e9d7ce",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1900,
        "y": 1540,
        "wires": [
            [
                "8d00fa5446353685"
            ]
        ]
    },
    {
        "id": "d05f5c1c7507992e",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2360,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "6708cd6f1d3ffefa",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "CORTE DESBOBINADOR",
        "func": "\n\nif(flow.get('CORTE_DESBOBINADOR')==1){\n        msg.payload=0;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3080,
        "y": 1660,
        "wires": [
            [
                "2377771c5805b59f"
            ]
        ]
    },
    {
        "id": "0d4109e9dc9a6775",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1910,
        "y": 1640,
        "wires": [
            [
                "46a2a4da3b1af6ee"
            ]
        ]
    },
    {
        "id": "2cddd75860319d18",
        "type": "delay",
        "z": "16f8c67703e4931d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3380,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "2377771c5805b59f",
        "type": "delay",
        "z": "16f8c67703e4931d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3380,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "aae1ff5e838f74b6",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "------------------------------------------------------------------------*ESCRITURA EN CONTROL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2040,
        "y": 1340,
        "wires": []
    },
    {
        "id": "738543788928d4dc",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "ESCRITURA EN LA TABLA DE CONTROL",
        "func": "// Obtener el payload del mensaje\nlet data = msg.payload;\n\n// Verificar si el payload es un string y convertirlo a objeto JSON\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\n// Inicializar un array para almacenar las consultas SQL\nlet sqlQueries = [];\n\n// Iterar sobre cada clave en el objeto de datos\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        // Construir la consulta SQL con una tabla estática y claves como columnas\n        let query = `INSERT INTO INT_maquina1.control (${key}) VALUES (\"${value}\")`;\n        sqlQueries.push(query);\n    }\n}\n\n// Devolver las consultas generadas en el payload del mensaje\nmsg.topic = sqlQueries.join(';');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1480,
        "wires": [
            [
                "ac7b92d853f79f88"
            ]
        ]
    },
    {
        "id": "4f0cb2be422bfc6a",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1500,
        "wires": [
            [
                "93ca184050f24bed"
            ]
        ]
    },
    {
        "id": "45906c647dd69b9f",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "-----------------ORDEN------------",
        "func": "// Función para reordenar las variables dentro del paquete\nfunction reordenarPaquete(paquete) {\n    // Define el orden deseado de las variables\n    const ordenDeseado = [\"1LOTE\", \"2RECETA\", \"3PROCESO\", \"4FASE\", \"5OPERARIO\", \"zAVANCE_MANUAL\", \"zABORTAR\", flow.get(\"Adicional1\"), flow.get(\"Adicional2\"), flow.get(\"Adicional3\"), flow.get(\"Adicional4\"), flow.get(\"Adicional5\"), flow.get(\"Adicional6\"), flow.get(\"Adicional7\"), flow.get(\"Adicional8\"), flow.get(\"Adicional9\"), flow.get(\"Adicional10\"), flow.get(\"Adicional11\"), flow.get(\"Adicional12\"), flow.get(\"Adicional13\"), flow.get(\"Adicional14\"), flow.get(\"Adicional15\"), \"zerror_ciclo\", flow.get(\"AdicionalT1\"), flow.get(\"AdicionalT2\"), flow.get(\"AdicionalT3\"), flow.get(\"AdicionalT4\"), flow.get(\"AdicionalT5\"), flow.get(\"AdicionalT6\"), flow.get(\"AdicionalT7\"), flow.get(\"AdicionalT8\"), flow.get(\"AdicionalT9\"), flow.get(\"AdicionalT10\"), flow.get(\"AdicionalT11\"), flow.get(\"AdicionalT12\"), flow.get(\"AdicionalT13\"), flow.get(\"AdicionalT14\"), flow.get(\"AdicionalT15\") ];\n\n    // Crea un nuevo objeto para almacenar las variables reordenadas,\n    let paqueteOrdenado = {};\n\n    // Itera sobre el orden deseado\n    ordenDeseado.forEach(variable => {\n        // Verifica si la variable está presente en el paquete recibido\n        if (paquete.hasOwnProperty(variable)) {\n            // Agrega la variable al paquete ordenado\n            paqueteOrdenado[variable] = paquete[variable];\n        }\n    });\n\n    // Devuelve el paquete ordenado\n    return paqueteOrdenado;\n}\n\n// Llama a la función de reordenamiento con el paquete recibido como argumento\nmsg.payload= reordenarPaquete(msg.payload);\n\n// Devuelve el mensaje con el paquete ordenado\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1100,
        "wires": [
            [
                "966fb945da478cc5",
                "1f368b21106c8e9a",
                "8577082a4a6cd395",
                "c83b1c3460172e93",
                "228b212ded180274",
                "5006a387653dd17b",
                "b3cd317fc5744dcc",
                "4233496c291b0f69",
                "4625b658d4c8b2f9"
            ]
        ]
    },
    {
        "id": "1577865b362dc088",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "DEFINIR ORDENES DE LECTURA",
        "info": "",
        "x": 2100,
        "y": 1580,
        "wires": []
    },
    {
        "id": "91ee9d248b6f3e07",
        "type": "json",
        "z": "16f8c67703e4931d",
        "name": "Envio del señales de control a la BDD",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1250,
        "y": 1460,
        "wires": [
            [
                "738543788928d4dc"
            ]
        ]
    },
    {
        "id": "ac7b92d853f79f88",
        "type": "split",
        "z": "16f8c67703e4931d",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2050,
        "y": 1440,
        "wires": [
            [
                "aef8e39bc3254ff2"
            ]
        ]
    },
    {
        "id": "db21ee59de481f61",
        "type": "json",
        "z": "16f8c67703e4931d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2230,
        "y": 1440,
        "wires": [
            [
                "4f0cb2be422bfc6a",
                "608b905c64f31a4d"
            ]
        ]
    },
    {
        "id": "608b905c64f31a4d",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "REV",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 1440,
        "wires": []
    },
    {
        "id": "8b0da61131966fc6",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 980,
        "wires": [
            [
                "8368804aace61c36",
                "8a0ea2ee61daa8c3"
            ]
        ]
    },
    {
        "id": "942fa7642907306a",
        "type": "split",
        "z": "16f8c67703e4931d",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 2900,
        "y": 1460,
        "wires": [
            [
                "46ee1bbbb1c2f350"
            ]
        ]
    },
    {
        "id": "46ee1bbbb1c2f350",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 1460,
        "wires": [
            [
                "4a11f0078288cd7c"
            ]
        ]
    },
    {
        "id": "abfc07e035a0fd02",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set variables Control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j`,0);\nflow.set(\"SeñalesdeControl\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2620,
        "y": 1440,
        "wires": [
            [
                "942fa7642907306a"
            ]
        ]
    },
    {
        "id": "4a11f0078288cd7c",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "6707e7b112e4494c",
        "type": "json",
        "z": "16f8c67703e4931d",
        "name": "ORDEN_LECTURA_tipo = \"1\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1610,
        "y": 1860,
        "wires": [
            [
                "07dbab651c89453f"
            ]
        ]
    },
    {
        "id": "07dbab651c89453f",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO INT_LC01.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1920,
        "wires": [
            [
                "d0c45cf3ed7366c6"
            ]
        ]
    },
    {
        "id": "79cd8bdf3bc3b9f5",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2160,
        "y": 1880,
        "wires": [
            [
                "41ddbee15e5794e2"
            ]
        ]
    },
    {
        "id": "0f9e63e6d227e8b1",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "ENTRADAS SIEMENS PLC",
        "info": "\nEMAIL: \"~+TIEMPO,102.00;LITROS,204.00;HORAS:,1580.00\"",
        "x": 120,
        "y": 820,
        "wires": []
    },
    {
        "id": "5cc61393d0804eff",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_LC01\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1920,
        "wires": [
            [
                "29d3c2ff405ad3ed"
            ]
        ]
    },
    {
        "id": "b8e595f2ee6a1377",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "CHECK O.L.",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_LC01\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n            break; // Salir del bucle si encontramos una consulta permitida\n        } else if (controlValue === 0) {\n            // Si encontramos un control que es 0, simplemente continuar con el siguiente\n            node.warn(`El control para la tabla ${tableName} es 0. La consulta será descartada.`);\n            // Aquí no se hace nada porque el mensaje será descartado si no se encuentra ninguna consulta permitida\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, simplemente descartar el mensaje\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null; // Esto efectivamente descarta el mensaje sin detener el flujo\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1880,
        "wires": [
            [
                "5cc61393d0804eff"
            ]
        ]
    },
    {
        "id": "d0c45cf3ed7366c6",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2020,
        "wires": [
            [
                "b8e595f2ee6a1377"
            ]
        ]
    },
    {
        "id": "7ca032144ba6cdac",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "Inserciones de sensores con O.L Independiente",
        "info": "",
        "x": 1840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "29d3c2ff405ad3ed",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_LC01\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1960,
        "wires": [
            [
                "79cd8bdf3bc3b9f5"
            ]
        ]
    },
    {
        "id": "02e37d6c42d47676",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "Inserciones de sensores con O.L General de Sensores",
        "info": "",
        "x": 2500,
        "y": 1800,
        "wires": []
    },
    {
        "id": "28c950932c483781",
        "type": "switch",
        "z": "16f8c67703e4931d",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1590,
        "y": 1980,
        "wires": [
            [
                "c11666464ff6cb70"
            ]
        ]
    },
    {
        "id": "c11666464ff6cb70",
        "type": "json",
        "z": "16f8c67703e4931d",
        "name": "ORDEN_LECTURA_tipo = \"2\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2470,
        "y": 2060,
        "wires": [
            [
                "17998e28880fdac5",
                "da62475c9d4bf905"
            ]
        ]
    },
    {
        "id": "17998e28880fdac5",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO INT_LC01.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1980,
        "wires": [
            [
                "abb75765684a5e35"
            ]
        ]
    },
    {
        "id": "abb75765684a5e35",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1920,
        "wires": [
            [
                "262f4ae31405ad2d"
            ]
        ]
    },
    {
        "id": "262f4ae31405ad2d",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "CHECK O.L.",
        "func": "\nif (flow.get(\"ORDEN_LECTURA_sensores\") !== 1) {\n    node.warn('La orden de Lectura General de Sensores está apagada');\n} else {\n    \n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1860,
        "wires": [
            [
                "43740c2086ba3b36"
            ]
        ]
    },
    {
        "id": "43740c2086ba3b36",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2680,
        "y": 1860,
        "wires": [
            [
                "da62475c9d4bf905"
            ]
        ]
    },
    {
        "id": "41ddbee15e5794e2",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "debug sensores ind",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 2020,
        "wires": []
    },
    {
        "id": "da62475c9d4bf905",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "debug sensores gnral",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 1960,
        "wires": []
    },
    {
        "id": "491a589b336a75b5",
        "type": "switch",
        "z": "16f8c67703e4931d",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1350,
        "y": 1960,
        "wires": [
            [
                "6707e7b112e4494c"
            ],
            [
                "28c950932c483781"
            ],
            [
                "9a45b11eb1ce3898"
            ]
        ]
    },
    {
        "id": "2a9134d73421ad60",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set O.L. EMAIL S1C",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a472de5db94282fc",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "2a9134d73421ad60"
            ]
        ]
    },
    {
        "id": "6d8f5489be60f606",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set O.L. EMAIL D1C",
        "func": "\nflow.set(\"D1C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c28667dd5f950e29",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "6d8f5489be60f606"
            ]
        ]
    },
    {
        "id": "ef632c7fa5c68103",
        "type": "template",
        "z": "16f8c67703e4931d",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "7214baf0f6a67575"
            ]
        ]
    },
    {
        "id": "7214baf0f6a67575",
        "type": "rbe",
        "z": "16f8c67703e4931d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "2a9134d73421ad60"
            ]
        ]
    },
    {
        "id": "3e4820561c9c455c",
        "type": "websocket in",
        "z": "16f8c67703e4931d",
        "name": "",
        "server": "",
        "client": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "ef632c7fa5c68103"
            ]
        ]
    },
    {
        "id": "fe5c4315327b95a9",
        "type": "template",
        "z": "16f8c67703e4931d",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "69242f477c07ef83"
            ]
        ]
    },
    {
        "id": "69242f477c07ef83",
        "type": "rbe",
        "z": "16f8c67703e4931d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "6d8f5489be60f606"
            ]
        ]
    },
    {
        "id": "16a83107cf4d63f7",
        "type": "websocket in",
        "z": "16f8c67703e4931d",
        "name": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "fe5c4315327b95a9"
            ]
        ]
    },
    {
        "id": "ecbbb2c3c2e10cb1",
        "type": "e-mail",
        "z": "16f8c67703e4931d",
        "server": "grupointegra-com-es.correoseguro.dinaserver.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Envio Email",
        "x": 5410,
        "y": 260,
        "wires": []
    },
    {
        "id": "05f8e4318e3928f0",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set L. EMAIL",
        "func": "\nflow.set(\"CONTROL_EMAIL\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4630,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "f4b7c7f9707cf8a0",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "¿O.L EMAIL?",
        "func": "if (flow.get(\"CONTROL_EMAIL\") === 1) {\n    // Bloquear ejecución enviando un mensaje de error\n    msg.payload=1\n    return msg;\n} else {\n    // Continuar el flujo si el valor es 1\n    node.error(\"EMAIL EN PROCESO\", msg);\n    return null; // Detener el flujo\n   \n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3400,
        "y": 1220,
        "wires": [
            [
                "682c13e627721eee"
            ]
        ]
    },
    {
        "id": "06332e6f3d1db9ea",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 4370,
        "y": 640,
        "wires": [
            [
                "05f8e4318e3928f0",
                "682c13e627721eee"
            ]
        ]
    },
    {
        "id": "26ecba0e8cd8e88d",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "NOTIFICACIONES DE TRAZABILIDAD POR EMAIL.",
        "info": "",
        "x": 4660,
        "y": 120,
        "wires": []
    },
    {
        "id": "f09b7866382ef67d",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "6d8f5489be60f606"
            ]
        ]
    },
    {
        "id": "0e6b453d9e517a89",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "2a9134d73421ad60"
            ]
        ]
    },
    {
        "id": "9a45b11eb1ce3898",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "BLOCK \"0\"",
        "func": "//msg.payload=node.warn(\"Lectura de Sensores Apagada\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "af043af4f7ea4f68",
        "type": "split",
        "z": "16f8c67703e4931d",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1660,
        "y": 1380,
        "wires": [
            [
                "813bfe2a51769289"
            ]
        ]
    },
    {
        "id": "813bfe2a51769289",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Declaracion Señales DE CONTROL",
        "func": "var CSignals = msg.signals;\n\nvar CSignalsLocal = flow.get(\"ControlSignalsArray\");\n\nCSignalsLocal[flow.get('j1')]=CSignals;\n\nflow.set('j1',flow.get('j1')+1);\n\nif(flow.get(\"j1\")==flow.get(\"NumSignalsControl\")){\n    flow.set(\"CSignals\",CSignalsLocal);\n}\n\nmsg.payload = msg.CSignals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1380,
        "wires": [
            [
                "09788e6581b505b4"
            ]
        ]
    },
    {
        "id": "da155404c9d9eac1",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set variables de control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j1`,0);\nflow.set(\"ControlSignalsArray\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1380,
        "wires": [
            [
                "af043af4f7ea4f68"
            ]
        ]
    },
    {
        "id": "09788e6581b505b4",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j1\") == flow.get(\"NumSignalsControl\")) {\n    msg.payload = flow.get(\"ObjetoControl\");\n\n    var signals = flow.get(\"CSignals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignalsControl\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "48ecdb7d1c9f1bea",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3400,
        "y": 1340,
        "wires": []
    },
    {
        "id": "580aaf1804d3eec6",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set  TIPO O.L.",
        "func": "\nflow.set(\"ORDEN_LECTURA_tipo\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "33834c927583c3f9",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 650,
        "y": 120,
        "wires": [
            [
                "580aaf1804d3eec6"
            ]
        ]
    },
    {
        "id": "4eb2290ae80e233e",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set O.L.Sensores",
        "func": "\nflow.set(\"ORDEN_LECTURA_sensores\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e98db73baa4797fc",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 790,
        "y": 340,
        "wires": [
            [
                "4eb2290ae80e233e"
            ]
        ]
    },
    {
        "id": "e5dd2d237d3b63e3",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "Modelo de funcionamiento con ordenes de lectura Individuales o General",
        "info": "",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "daf805003ed8fc2c",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set  TIPO O.L.",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "fc4ebc133dddc739",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 910,
        "y": 120,
        "wires": [
            [
                "daf805003ed8fc2c"
            ]
        ]
    },
    {
        "id": "86e909d377b4e144",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "OVERRIDE DE O.L General Sensores",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "aef8e39bc3254ff2",
        "type": "split",
        "z": "16f8c67703e4931d",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2190,
        "y": 1400,
        "wires": [
            [
                "db21ee59de481f61"
            ]
        ]
    },
    {
        "id": "6cba4f923156c262",
        "type": "s7 in",
        "z": "16f8c67703e4931d",
        "endpoint": "2ce6aae0f74a2423",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 190,
        "y": 1100,
        "wires": [
            [
                "ae43a13e48f15561"
            ]
        ]
    },
    {
        "id": "87936de1514dfc46",
        "type": "s7 in",
        "z": "16f8c67703e4931d",
        "endpoint": "2ad0d2cae73e4f52",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 220,
        "y": 1380,
        "wires": [
            [
                "da155404c9d9eac1"
            ]
        ]
    },
    {
        "id": "8a0ea2ee61daa8c3",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "SELECT LAST ROW",
        "func": "var controlemail= flow.get(\"CONTROL_EMAIL\");\nif (controlemail===1){\nmsg.topic= \"SELECT * FROM INT_\"+flow.get (\"Maquina\")+\".General ORDER BY 'FechaHora' DESC LIMIT 1;\";\nreturn msg;}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 980,
        "wires": [
            [
                "ac9a7267f5aae527"
            ]
        ]
    },
    {
        "id": "ac9a7267f5aae527",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2480,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "682c13e627721eee",
        "type": "json",
        "z": "16f8c67703e4931d",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 4290,
        "y": 260,
        "wires": [
            [
                "24ef2cc2266ae917"
            ]
        ]
    },
    {
        "id": "d126f04f4403b133",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "DEFINIR ADICIONALES",
        "props": [
            {
                "p": "Adicional1",
                "v": "TT_IMPULSION",
                "vt": "str"
            },
            {
                "p": "Adicional2",
                "v": "TT_RETORNO",
                "vt": "str"
            },
            {
                "p": "Adicional3",
                "v": "CT_RETORNO",
                "vt": "str"
            },
            {
                "p": "Adicional4",
                "v": "MATRICULA_CISTERNA",
                "vt": "str"
            },
            {
                "p": "Adicional5",
                "v": "CONDUCTOR_CISTERNA",
                "vt": "str"
            },
            {
                "p": "Adicional6",
                "v": "LITROS_SOSA",
                "vt": "str"
            },
            {
                "p": "Adicional7",
                "v": "LITROS_ACIDO",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 940,
        "wires": [
            [
                "d0e79dfa06380ca5"
            ]
        ]
    },
    {
        "id": "d0e79dfa06380ca5",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"Adicional1\", msg.Adicional1);\nflow.set(\"Adicional2\", msg.Adicional2);\nflow.set(\"Adicional3\", msg.Adicional3);\nflow.set(\"Adicional4\", msg.Adicional4);\nflow.set(\"Adicional5\", msg.Adicional5);\nflow.set(\"Adicional6\", msg.Adicional6);\nflow.set(\"Adicional7\", msg.Adicional7);\nflow.set(\"Adicional8\", msg.Adicional8);\nflow.set(\"Adicional9\", msg.Adicional9);\nflow.set(\"Adicional10\", msg.Adicional10);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "2f0def210e2ab4b2",
        "type": "s7 out",
        "z": "16f8c67703e4931d",
        "endpoint": "2ad0d2cae73e4f52",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 3440,
        "y": 1160,
        "wires": []
    },
    {
        "id": "999e9b2a5061c35e",
        "type": "s7 in",
        "z": "16f8c67703e4931d",
        "endpoint": "6cb2b40212645536",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 220,
        "y": 1960,
        "wires": [
            [
                "0fb78ab26d3f8fbd",
                "491a589b336a75b5",
                "17d195575769ad28"
            ]
        ]
    },
    {
        "id": "54453c228bef755c",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set C10LC01CT01",
        "func": "\nflow.set(\"10LC01CT01C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "740240f4557d5d98",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 470,
        "y": 540,
        "wires": [
            [
                "54453c228bef755c"
            ]
        ]
    },
    {
        "id": "1e180169a4cacbf7",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set C10LC01CT01",
        "func": "\nflow.set(\"10LC01TT02C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "afd5209dd394d796",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 990,
        "y": 520,
        "wires": [
            [
                "1e180169a4cacbf7"
            ]
        ]
    },
    {
        "id": "c2973d3f94734807",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "set C10LC01TT01",
        "func": "\nflow.set(\"10LC01TT01C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "062140299a9d0ab6",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 730,
        "y": 520,
        "wires": [
            [
                "c2973d3f94734807"
            ]
        ]
    },
    {
        "id": "d45c4ad2d2e5785f",
        "type": "catch",
        "z": "16f8c67703e4931d",
        "name": "BLOQUEO",
        "scope": null,
        "uncaught": false,
        "x": 1860,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "2f4a77b8d7b3ca39",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 4740,
        "y": 260,
        "wires": [
            [
                "f059b4aa0f4a494e"
            ]
        ]
    },
    {
        "id": "c8f85e46fd4fc1b1",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "function 85",
        "func": "var Lote = flow.get(\"1LOTE\");\nvar Maquina = flow.get(\"DBname\");\n\n// Asegurarse de que Lote se concatene como string con comillas simples\nvar query = \"SELECT `4FASE`, `TT_IMPULSION`, `TT_RETORNO`, `CT_RETORNO`, `99CONSUMOAGUA(Lh)`, `99AIRECOMPRIMIDO(Wh)`, `99ELECTRICIDAD(Wh)`, `99VAPOR(gv/h)`, `LITROS_SOSA`, `LITROS_ACIDO`, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM \" + Maquina + \".General WHERE 1LOTE = '\" + Lote + \"';\";\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4510,
        "y": 260,
        "wires": [
            [
                "2f4a77b8d7b3ca39"
            ]
        ]
    },
    {
        "id": "f059b4aa0f4a494e",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "function 86",
        "func": "// Verifica si el payload es un string y lo convierte a JSON\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (error) {\n        node.error(\"El payload no es un JSON válido: \" + error);\n        return;\n    }\n}\n\n// Retorna el mensaje con el payload convertido\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4970,
        "y": 260,
        "wires": [
            [
                "fc71dafa020453b5"
            ]
        ]
    },
    {
        "id": "70aab79542159d62",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "(BETA)",
        "info": "",
        "x": 4960,
        "y": 120,
        "wires": []
    },
    {
        "id": "fc71dafa020453b5",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "function 93",
        "func": "// Recupera el contenido del payload\nlet content = flow.get(\"CONTENIDO_EMAIL\") || \"\";  // Asegura que no sea null\nlet RECETA = flow.get(\"2RECETA\") || \"No disponible\";\nlet PROCESO = flow.get(\"3PROCESO\") || \"No disponible\";\nvar LOTE = flow.get(\"1LOTE\") || \"No disponible\";\nvar FASE = flow.get(\"4FASE\") || \"No disponible\";\nvar MATRICULA_CISTERNA = flow.get(\"MATRICULA_CISTERNA\") || \"No disponible\";\nvar CONDUCTOR_CISTERNA = flow.get(\"CONDUCTOR_CISTERNA\") || \"No disponible\";\nvar OPERARIO = flow.get(\"5OPERARIO\")\nvar Registro = msg.payload;  // El payload ya debe contener el JSON parseado.\n\n// Filtra los elementos vacíos del contenido al dividirlo\nlet items = content.split(';')\n    .map(item => item.trim())\n    .filter(item => item !== \"\")  // Elimina los elementos vacíos\n    .map(item => `<li>${item}</li>`)\n    .join('\\n');\n\n// Verifica que el contenido de Registro sea un array y construye una tabla\nlet registroTable = \"\";\n\nif (Array.isArray(Registro)) {\n    registroTable = `\n        <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse: collapse;\">\n           <thead>\n    <tr>\n        <th>FASE</th>\n        <th>TT_IMPULSION</th>\n        <th>TT_RETORNO</th>\n        <th>CT_RETORNO</th>\n        <th>AIRECOMPRIMIDO(Wh)</th>\n        <th>CONSUMOAGUA(Wh)</th>\n        <th>ELECTRICIDAD(Wh)</th>\n        <th>VAPOR(gv/h)</th>\n        <th>LITROS_SOSA</th>\n        <th>LITROS_ACIDO</th>\n        <th>Fecha y Hora</th>\n    </tr>\n</thead>\n<tbody>\n    ${Registro.map(reg => `\n        <tr>\n            <td>${reg['4FASE'] || \"No disponible\"}</td>\n            <td>${reg.TT_IMPULSION || \"No disponible\"}</td>\n            <td>${reg.TT_RETORNO || \"No disponible\"}</td>\n            <td>${reg.CT_RETORNO || \"No disponible\"}</td>\n            <td>${reg[\"99AIRECOMPRIMIDO(Wh)\"] || \"Sin consumo\"}</td>\n            <td>${reg[\"99CONSUMOAGUA(Wh)\"] || \"Sin consumo\"}</td>\n            <td>${reg[\"99ELECTRICIDAD(Wh)\"] || \"Sin consumo\"}</td>\n            <td>${reg[\"99VAPOR(gv/h)\"] || \"Sin consumo\"}</td>\n            <td>${reg[\"LITROS_SOSA\"] || \"Sin consumo\"}</td>\n            <td>${reg[\"LITROS_ACIDO\"] || \"Sin consumo\"}</td>\n            <td>${reg.Fechahora || \"No disponible\"}</td>\n        </tr>\n    `).join('')}\n</tbody>\n\n    `;\n} else {\n    registroTable = `<p>No se encontraron registros válidos.</p>`;\n}\n\n// Arma el contenido HTML completo con la tabla\nmsg.payload = `\n    <html>\n        <body>\n            <h1>Alerta de Trazabilidad:</h1>\n            <p>En este documento puede encontrar los datos de Limpieza de la línea: ${flow.get(\"Maquina\")}</p>\n            <ul>\n                ${items}\n                <li>Lote: ${LOTE}</li>\n                <li>Proceso: ${PROCESO}</li>\n                <li>Receta: ${RECETA}</li>\n                <li>Matrícula: ${MATRICULA_CISTERNA}</li>\n                <li>Conductor: ${CONDUCTOR_CISTERNA}</li>\n                <li>Operario: ${OPERARIO}</li>\n            </ul>\n            <h2>Registros:</h2>\n            ${registroTable}\n            <img src=\"cid:miImagen\" alt=\"Imagen Incrustada\" />\n        </body>\n    </html>\n`;\n\n// Especifica que se trata de contenido HTML\nmsg.html = msg.payload;\n\n// Configura el mensaje\nmsg.to = \"jgonzalez@serrycamp.com\";\nmsg.topic = \"Datos de la línea LC01\" + flow.get(\"1LOTE\");;\nmsg.attachments = [\n    {\n        filename: \"Logo.jpg\", // Cambia esto por el nombre de tu imagen\n        path: \"/home/intboxes/Documents/Logo.jpg\", // Cambia esto por la ruta a tu imagen\n        cid: \"miImagen\"  // cid debe coincidir con el del HTML\n    }\n];\n\n// Envía el me\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5190,
        "y": 260,
        "wires": [
            [
                "8842c49a65d402ba",
                "ecbbb2c3c2e10cb1"
            ]
        ]
    },
    {
        "id": "6312a7ecbfa42ad1",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "----------------------------------------NOTIFICACIONES----------------------------------------",
        "info": "",
        "x": 4740,
        "y": 40,
        "wires": []
    },
    {
        "id": "1c280f17b16923c5",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "TESTING",
        "info": "",
        "x": 4740,
        "y": 440,
        "wires": []
    },
    {
        "id": "8842c49a65d402ba",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "CONFIRMACION AL PLC",
        "func": "msg.payload = 2;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5410,
        "y": 320,
        "wires": [
            [
                "42d938564bf96fd1"
            ]
        ]
    },
    {
        "id": "42d938564bf96fd1",
        "type": "s7 out",
        "z": "16f8c67703e4931d",
        "endpoint": "2ad0d2cae73e4f52",
        "variable": "CONTROL_EMAIL",
        "name": "",
        "x": 5690,
        "y": 300,
        "wires": []
    },
    {
        "id": "7a45c6193e75b640",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "ORDEN_LECTURA_G(OK)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=2;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3000,
        "y": 1200,
        "wires": [
            [
                "2f0def210e2ab4b2",
                "f4b7c7f9707cf8a0",
                "672dd67431c6c855"
            ]
        ]
    },
    {
        "id": "32400e33a3061857",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "ORDEN_LECTURA_G(KO)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=3;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3000,
        "y": 1160,
        "wires": [
            [
                "2f0def210e2ab4b2"
            ]
        ]
    },
    {
        "id": "7d8592bda36d5a6d",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "ORDEN DE LECTURA GENERAL BLOCK",
        "func": "// Obtener los valores de las variables de flujo\nconst ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nconst latenciaOrdenLectura = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 1\nif (ordenLectura === 1) {\n    // Si ORDEN_LECTURA_general es 1, verificar la latencia\n    if (latenciaOrdenLectura === 1) {\n        // Si la latencia es 1, bloquear la ejecución\n        node.error(\"LATENCIA_ORDEN_LECTURA_general es 1, bloqueo de flujo\", msg);\n        return null; // Detener el flujo\n    } else {\n        // Si la latencia no es 1, continuar el flujo\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n        return msg;\n    }\n} else {\n    // Si ORDEN_LECTURA_general no es 1, bloquear la ejecución\n    node.error(\"ORDEN_LECTURA_general no es 1, bloqueo de flujo\", msg);\n    return null; // Detener el flujo\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 860,
        "wires": [
            [
                "3ee003ff6f7bf83a"
            ]
        ]
    },
    {
        "id": "4625b658d4c8b2f9",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "Check Latencia",
        "func": "// Obtener el valor de ORDEN_LECTURA_general\nvar ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 0 o 2\nif (ordenLectura === 0 || ordenLectura === 2) {\n    // Si es 0 o 2, establecer la latencia en el valor actual de ORDEN_LECTURA_general\n    flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 0);\n    return msg;\n}else{\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 860,
        "wires": [
            [
                "7d8592bda36d5a6d"
            ]
        ]
    },
    {
        "id": "99efb21c1993b53a",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "------------------------------------------------------------------------*GESTION DE TABLA DE LOTES*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2060,
        "y": 2820,
        "wires": []
    },
    {
        "id": "f4108ed366ec91af",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "------------------------------------------------------------------------RESPUESTA ERROR DE CICLO--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2050,
        "y": 2600,
        "wires": []
    },
    {
        "id": "0fb78ab26d3f8fbd",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "COMPROBACIÓN DE ERROR DE CICLO",
        "func": "var errorciclo = flow.get(\"zerror_ciclo\");\nvar OL = flow.get(\"ORDEN_LECTURA_general\");\n\n// Verifica que las variables existen\nif (typeof errorciclo === 'undefined' || typeof OL === 'undefined') {\n    node.warn(\"Variables zerror_ciclo u ORDEN_LECTURA_general no definidas\");\n    return null;\n}\n\n// Si zerror_ciclo es true, envía un payload de 2\nif (errorciclo === true) {\n    msg.payload = 2;\n    return msg;\n} else {\n    // Si es false, envía un payload de 0 (o el valor que necesites cuando no hay error)\n    \n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 2680,
        "wires": [
            [
                "7187a454c501a380"
            ]
        ]
    },
    {
        "id": "7187a454c501a380",
        "type": "s7 out",
        "z": "16f8c67703e4931d",
        "endpoint": "2ad0d2cae73e4f52",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 2160,
        "y": 2680,
        "wires": []
    },
    {
        "id": "fbaf7a7c2e6c996b",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 240,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5e7a236cdc599014",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 240,
        "y": 1160,
        "wires": []
    },
    {
        "id": "5a1d1e277f5de67a",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 230,
        "y": 1320,
        "wires": []
    },
    {
        "id": "2891d7446dcbedff",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 230,
        "y": 1460,
        "wires": []
    },
    {
        "id": "e3161b130675ebb5",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 230,
        "y": 1900,
        "wires": []
    },
    {
        "id": "34e7c2152293dc89",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 230,
        "y": 2020,
        "wires": []
    },
    {
        "id": "57dc733afd2e63e9",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "-------------------------DECLARACIÓN DE ADICIONALES GENERALES---------------------------------",
        "info": "",
        "x": 1000,
        "y": 880,
        "wires": []
    },
    {
        "id": "8ea33ba040ded179",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1260,
        "y": 740,
        "wires": [
            [
                "3ee003ff6f7bf83a"
            ]
        ]
    },
    {
        "id": "406deeec2401760e",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1360,
        "y": 2260,
        "wires": [
            [
                "0fb78ab26d3f8fbd"
            ]
        ]
    },
    {
        "id": "cf6538f10377cdd9",
        "type": "s7 out",
        "z": "16f8c67703e4931d",
        "endpoint": "2ad0d2cae73e4f52",
        "variable": "LOTEC",
        "name": "",
        "x": 1980,
        "y": 2960,
        "wires": []
    },
    {
        "id": "17d195575769ad28",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "ORDEN_LECTURA_LOTE(ok)",
        "func": "// Obtener las variables necesarias de flujo\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_LOTE\");\nvar OPERARIO = flow.get(\"5OPERARIO\"); // Asegurarse de que \"5OPERARIO\" es una variable válida de flujo\nvar LOTEC = flow.get(\"LOTEC\");\nvar Lote = flow.get(\"1LOTE\");\n\n// Reset de latencia si LOTEC es 0, 2 o 4\nif (LOTEC === 0 || LOTEC === 2 || LOTEC === 4) {\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 0);\n  \n}\n\n// Orden para iniciar el lote (LOTEC = 1)\nif (LOTEC === 1 && latencia === 0) {\n    msg.payload = 2;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    \n  // Consulta SQL para insertar un nuevo lote e iniciar el lote con hora de inicio\n    msg.topic = `INSERT INTO INT_LC01.LOTE (1LOTE, 3FechaInicioLote, 4FechaFinLote, 5OPERARIO)\n                 VALUES ('${Lote}', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '${OPERARIO}');`;\n\nreturn msg;\n}\n\n// Orden para finalizar el lote (LOTEC = 3)\nif (LOTEC === 3 && latencia === 0) {\n    msg.payload = 4;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de finalización del lote más reciente\n    msg.topic = `UPDATE INT_LC01.LOTE \n                 SET 4FechaFinLote = CURRENT_TIMESTAMP \n                 WHERE 1LOTE = '${Lote}' \n                 ORDER BY 3FechaInicioLote DESC \n                 LIMIT 1;`;\nreturn msg;\n}else{\nreturn null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 2900,
        "wires": [
            [
                "cf6538f10377cdd9",
                "93570e4d5b09553d"
            ]
        ]
    },
    {
        "id": "93570e4d5b09553d",
        "type": "mysql",
        "z": "16f8c67703e4931d",
        "mydb": "884e4ae10df762d0",
        "name": "",
        "x": 1970,
        "y": 2900,
        "wires": [
            []
        ]
    },
    {
        "id": "96313e100c2e0cf5",
        "type": "s7 in",
        "z": "16f8c67703e4931d",
        "endpoint": "956d16a5f3a1c031",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 230,
        "y": 3120,
        "wires": [
            [
                "ef52f78632acd7e5"
            ]
        ]
    },
    {
        "id": "7d713e21b374c857",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "-------------COSNUMOS-------------------------------------------",
        "info": "",
        "x": 280,
        "y": 3040,
        "wires": []
    },
    {
        "id": "24ff08d068d4de3f",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "-------------CONSUMOS-------------------------------------------",
        "info": "",
        "x": 280,
        "y": 3200,
        "wires": []
    },
    {
        "id": "580859305cce7f82",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "TESTER",
        "func": "flow.set (\"TEST\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "672dd67431c6c855",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "RESETCONSUMOS",
        "func": "flow.set (\"RESETCONSUMOS\",1)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "ae43a13e48f15561",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "ANÁLISIS DE CONSUMOS",
        "func": "// Obtenemos el objeto recibido (msg.payload)\nlet objeto = msg.payload;\n\n// Iteramos sobre las variables \"AdicionalT1\" a \"AdicionalT15\"\nfor (let z = 1; z <= 15; z++) {\n    // Obtenemos el nombre de la variable AdicionalTi desde el flujo\n    let adicional = flow.get(\"AdicionalT\" + z);\n\n    // Si la variable AdicionalTi no es null o undefined, la agregamos al objeto\n    if (adicional !== null && adicional !== undefined) {\n        // Obtenemos el valor de la variable adicional desde el flujo\n        let valorAdicional = flow.get(adicional);\n\n        // Si la variable adicional tiene un valor, la agregamos al objeto\n        if (valorAdicional !== null && valorAdicional !== undefined) {\n            // Agregamos la clave y el valor al objeto\n            objeto[adicional] = valorAdicional;\n        }\n    }\n}\n\n// Devolvemos el objeto modificado\nmsg.payload = objeto;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1100,
        "wires": [
            [
                "45906c647dd69b9f",
                "8c631a0961e47b73"
            ]
        ]
    },
    {
        "id": "dfbed4fb81bdc56d",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "NUEVO ADICIONAL (TOTALIZACIÓN)",
        "props": [
            {
                "p": "AdicionalT1",
                "v": "99AIRECOMPRIMIDO(Wh)",
                "vt": "str"
            },
            {
                "p": "AdicionalT2",
                "v": "99CONSUMOAGUA(Lh)",
                "vt": "str"
            },
            {
                "p": "AdicionalT3",
                "v": "99ELECTRICIDAD(Wh)",
                "vt": "str"
            },
            {
                "p": "AdicionalT4",
                "v": "99VAPOR(gv/h)",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 820,
        "y": 1000,
        "wires": [
            [
                "4a58c87424778b01"
            ]
        ]
    },
    {
        "id": "4a58c87424778b01",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"AdicionalT1\", msg.AdicionalT1);\nflow.set(\"AdicionalT2\", msg.AdicionalT2);\nflow.set(\"AdicionalT3\", msg.AdicionalT3);\nflow.set(\"AdicionalT4\", msg.AdicionalT4);\nflow.set(\"AdicionalT5\", msg.AdicionalT5);\nflow.set(\"AdicionalT6\", msg.AdicionalT6);\nflow.set(\"AdicionalT7\", msg.AdicionalT7);\nflow.set(\"AdicionalT8\", msg.AdicionalT8);\nflow.set(\"AdicionalT9\", msg.AdicionalT9);\nflow.set(\"AdicionalT10\", msg.AdicionalT10);\nflow.set(\"AdicionalT11\", msg.AdicionalT11);\nflow.set(\"AdicionalT12\", msg.AdicionalT12);\nflow.set(\"AdicionalT13\", msg.AdicionalT13);\nflow.set(\"AdicionalT14\", msg.AdicionalT14);\nflow.set(\"AdicionalT15\", msg.AdicionalT15);\n\nmsg.payload = msg.payload\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "51f5a21e7d81bec6",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "DECLARACION Y TOTALIZACIÓN DE CONSUMOS",
        "func": "// Obtenemos el orden de lectura desde el flujo\nlet lotec = flow.get(\"LOTEC\");\nvar resetconsumos = flow.get (\"RESETCONSUMOS\")\n\n// Obtenemos el objeto de energía desde el payload\nlet energia = msg.payload; // Suponemos que el payload contiene el objeto con las variables\n\n// Si el orden de lectura es 0, significa que es una nueva lectura y debemos resetear las variables\nif (lotec === 0 || resetconsumos === 1) {\n    // Reseteamos las variables finales directamente al comenzar una nueva lectura\n    Object.keys(energia).forEach(clave => {\n        flow.set(clave, 0); // Inicializamos a 0 en el flujo\n        flow.set (\"RESETCONSUMOS\",0)\n    });\n    node.warn(\"Variables reseteadas a cero.\"); // Mensaje de depuración opcional\n\n} else if (lotec !== 0) { // Si el orden de lectura no es 0, acumulamos los valores\n    // Fase de acumulación: iteramos sobre las claves de 'energia' y acumulamos los valores directamente\n    for (let clave in energia) {\n        // Aseguramos que la clave sea una propiedad propia\n        if (energia.hasOwnProperty(clave)) {\n            // Intentamos convertir el valor a número; manejamos NaN y valores inválidos\n            let valorNumerico = parseFloat(energia[clave]);\n            if (isNaN(valorNumerico)) {\n                node.warn(`Valor inválido para clave ${clave}: ${energia[clave]}`);\n                continue; // Saltamos a la siguiente clave en caso de error\n            }\n\n            // Convertimos kW/h a kW/s (dividimos entre 3600)\n            let valorPorSegundo = valorNumerico / 3600;\n\n            // Obtenemos el valor acumulado actual desde el flujo\n            let valorAcumulado = flow.get(clave) || 0;\n\n            // Sumamos el valor convertido al acumulado\n            let nuevoValor = valorAcumulado + valorPorSegundo;\n\n            //redondeo a 2 decimales\n            let valoredondeado = parseFloat(nuevoValor.toFixed(2));\n\n            // Guardamos el valor sin redondear en el flujo\n            flow.set(clave, valoredondeado);\n        }\n    }\n    node.warn(\"Acumulación completada.\"); // Mensaje de depuración opcional\n\n} else {\n    // Si el orden de lectura es un valor no esperado\n    node.warn(`Orden de lectura no reconocido: ${lotec}`);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 3160,
        "wires": [
            []
        ]
    },
    {
        "id": "8c631a0961e47b73",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "function 102",
        "func": "flow.set (\"TEST\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "42dfab408769f901",
        "type": "inject",
        "z": "16f8c67703e4931d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 790,
        "y": 1240,
        "wires": [
            [
                "1813ebb601f88413"
            ]
        ]
    },
    {
        "id": "1813ebb601f88413",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"ORDEN_LECTURA_general\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "ef52f78632acd7e5",
        "type": "function",
        "z": "16f8c67703e4931d",
        "name": "DECLARACION Y TOTALIZACIÓN DE CONSUMOS",
        "func": "// Obtenemos el orden de lectura desde el flujo\nlet lotec = flow.get(\"LOTEC\");\nvar resetconsumos = flow.get(\"RESETCONSUMOS\");\n\n// Obtenemos el objeto de energía desde el payload\nlet energia = msg.payload; // Suponemos que el payload contiene el objeto con las variables\n\n// Si el orden de lectura es 0, significa que es una nueva lectura y debemos resetear las variables\nif (lotec === 0 || resetconsumos === 1) {\n    // Reseteamos las variables finales directamente al comenzar una nueva lectura\n    Object.keys(energia).forEach(clave => {\n        flow.set(clave, 0); // Inicializamos a 0 en el flujo como número\n        flow.set(\"RESETCONSUMOS\", 0);\n    });\n    node.warn(\"Variables reseteadas a cero.\"); // Mensaje de depuración opcional\n\n} else if (lotec !== 0) { // Si el orden de lectura no es 0, acumulamos los valores\n    // Fase de acumulación: iteramos sobre las claves de 'energia' y acumulamos los valores directamente\n    for (let clave in energia) {\n        // Aseguramos que la clave sea una propiedad propia\n        if (energia.hasOwnProperty(clave)) {\n            // Intentamos convertir el valor a número; manejamos NaN y valores inválidos\n            let valorNumerico = parseFloat(energia[clave]);\n            if (isNaN(valorNumerico)) {\n                node.warn(`Valor inválido para clave ${clave}: ${energia[clave]}`);\n                continue; // Saltamos a la siguiente clave en caso de error\n            }\n\n            // Convertimos kW/h a kW/s (dividimos entre 3600)\n            let valorPorSegundo = valorNumerico / 3600;\n\n            // Obtenemos el valor acumulado actual desde el flujo\n            let valorAcumulado = flow.get(clave) || 0;\n\n            // Sumamos el valor convertido al acumulado\n            let nuevoValor = valorAcumulado + valorPorSegundo;\n\n            // Redondeo a 2 decimales\n            let valoredondeado = parseFloat(nuevoValor.toFixed(2));\n\n            // Guardamos el valor numérico en el flujo para cálculos futuros\n            flow.set(clave, valoredondeado);\n        }\n    }\n    node.warn(\"Acumulación completada.\"); // Mensaje de depuración opcional\n\n} else {\n    // Si el orden de lectura es un valor no esperado\n    node.warn(`Orden de lectura no reconocido: ${lotec}`);\n}\n\n// Agregamos sufijo al final para mostrar (sin afectar cálculos)\nObject.keys(energia).forEach(clave => {\n    let valorConSufijo = `${flow.get(clave)} kw/h`;\n    node.warn(`Clave: ${clave}, Valor con sufijo: ${valorConSufijo}`);\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 3120,
        "wires": [
            []
        ]
    },
    {
        "id": "24ef2cc2266ae917",
        "type": "switch",
        "z": "16f8c67703e4931d",
        "name": "",
        "property": "4FASE",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "Reposo",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Reposo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Arranque Inicial",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 4310,
        "y": 200,
        "wires": [
            [
                "5d24d1b86219b1ff"
            ],
            [
                "c8f85e46fd4fc1b1"
            ],
            [
                "5d24d1b86219b1ff"
            ]
        ]
    },
    {
        "id": "792153d0a27f587f",
        "type": "debug",
        "z": "16f8c67703e4931d",
        "name": "BLOCK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4320,
        "y": 140,
        "wires": []
    },
    {
        "id": "06ed868e88a6ad12",
        "type": "comment",
        "z": "16f8c67703e4931d",
        "name": "FASE OLD",
        "info": "DB16,S772.50",
        "x": 200,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6e3abfcb9a2d0502",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "------------------------------------------------------------------------*ESCRITURA EN GENERAL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2020,
        "y": 700,
        "wires": []
    },
    {
        "id": "fc376f231728b674",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "176952d324d3a092",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = 'LC02'\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 340,
        "wires": [
            [
                "4673222ef5b56da5"
            ]
        ]
    },
    {
        "id": "4673222ef5b56da5",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 340,
        "wires": []
    },
    {
        "id": "4a809c32072f5d94",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Escritura en Tabla de Sensor",
        "func": "/*Este nodo prepara el Query para almacenar la información\ndel sensor proveniente del PLC en su lugar correspondiente.\nEsto solo se procesa si la orden de lectura de este sensor\nse encuentra activa\n*/\nmsg.payload = flow.get('Objeto');\n\nif (flow.get('NumSensor') <= flow.get('MaxSensor') && msg.payload[ + flow.get('Sensor' + flow.get('NumSensor'))] == true) {\n    var tableName = flow.get('Sensor' + flow.get('NumSensor'));\n    var datetime = flow.get('FechaHora');\n    var value = msg.payload[flow.get('NumSensor')];\n    var dbName = flow.get('DBname');\n      \n   var topic = \"INSERT INTO \" + dbName + \".\" + tableName + \" (FechaHora, Unidad) VALUES ('\" + datetime + \"', '\" + value + \"');\";\n   \n\n    msg.queryCompresion = \"SELECT Valor FROM \" + flow.get('DBname') + \".\" + tableName + \" ORDER BY FechaHora DESC LIMIT 1;\";\n\n    msg.topic = topic;\n    flow.set(\"queryValor\", msg.topic);\n    msg.payload = 0;\n    return msg;\n} else {\n    msg.payload = 1;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 2240,
        "wires": [
            [
                "6a4258c013bb1ae1",
                "96777fed0e3ac346",
                "83cda6c5dc263042"
            ]
        ]
    },
    {
        "id": "fdd3a873509db1f6",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1220,
        "wires": [
            [
                "41404b522e745887"
            ]
        ]
    },
    {
        "id": "dcc0adda649d7b4e",
        "type": "switch",
        "z": "b29fc04ec927643e",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1220,
        "wires": [
            [
                "9c517fc859ecceb6"
            ],
            [
                "fdd3a873509db1f6"
            ]
        ]
    },
    {
        "id": "41404b522e745887",
        "type": "switch",
        "z": "b29fc04ec927643e",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1220,
        "wires": [
            [
                "cafb3586fb26a2b7"
            ],
            [
                "7cdc6ef393376caf"
            ]
        ]
    },
    {
        "id": "f9572b6d364d9066",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LOOP DEVOLUCION O ERROR",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1160,
        "wires": [
            [
                "59e14927c2e1d9c7"
            ]
        ]
    },
    {
        "id": "59e14927c2e1d9c7",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<12){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "dcc0adda649d7b4e"
            ]
        ]
    },
    {
        "id": "7cdc6ef393376caf",
        "type": "delay",
        "z": "b29fc04ec927643e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2600,
        "y": 1260,
        "wires": [
            [
                "59e14927c2e1d9c7"
            ]
        ]
    },
    {
        "id": "9c517fc859ecceb6",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".Errorlog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1160,
        "wires": [
            [
                "fda616118d9115f7"
            ]
        ]
    },
    {
        "id": "96777fed0e3ac346",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2220,
        "wires": []
    },
    {
        "id": "3b7f4b81d8a1e7d9",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Definir_MaxSensor",
        "func": "/*Este nodo declara la variable de flow MaxSensores para conocer\ncuantos sensores hay definidos en la máquina\n*/\nvar valor = Object.values(msg.payload);\nflow.set('MaxSensor',valor['0']);\nmsg.payload = flow.get('MaxSensor');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 460,
        "wires": [
            [
                "7d6784c45e34bd30",
                "c58365c7667fa45c"
            ]
        ]
    },
    {
        "id": "7d6784c45e34bd30",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "Numero de sensores1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 460,
        "wires": []
    },
    {
        "id": "8c195c0d52651e8c",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Inicializacion del loop",
        "func": "/*Este nodo inicializa las variables necesarias para ciclar\nla información de cada uno de los sensores y escribirla en \nla tabla correspondiente en la BD de la máquina\n*/\n\nflow.set('NumSensor',1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 2200,
        "wires": [
            [
                "4a809c32072f5d94",
                "8d37ef910d1b3f07"
            ]
        ]
    },
    {
        "id": "6a4258c013bb1ae1",
        "type": "switch",
        "z": "b29fc04ec927643e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 2380,
        "wires": [
            [
                "7a6b60941060d5d9"
            ],
            [
                "d3026a84fa705378"
            ]
        ]
    },
    {
        "id": "d3026a84fa705378",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "loop",
        "func": "if(flow.get('NumSensor')<flow.get('MaxSensor')){\n    flow.set('NumSensor',flow.get('NumSensor')+1);\n    msg.payload = flow.get('NumSensor');\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 2380,
        "wires": [
            [
                "4a809c32072f5d94"
            ]
        ]
    },
    {
        "id": "f49193272687f5cf",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Buscar Numero de sensores",
        "func": "/*Este nodo consulta la tabla Sensores para saber cuántas\nentradas existen en la tabla, siendo cada una de ellas\nun sensor\n*/\n\nmsg.topic = \"SELECT COUNT(*) FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 440,
        "wires": [
            [
                "36ed50915a1ad8bd"
            ]
        ]
    },
    {
        "id": "7988f8388a77671e",
        "type": "split",
        "z": "b29fc04ec927643e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2070,
        "y": 460,
        "wires": [
            [
                "3b7f4b81d8a1e7d9"
            ]
        ]
    },
    {
        "id": "64f5c58dca377ab2",
        "type": "trigger",
        "z": "b29fc04ec927643e",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1420,
        "y": 340,
        "wires": [
            [
                "176952d324d3a092",
                "f49193272687f5cf"
            ]
        ]
    },
    {
        "id": "40f3cd04eded094d",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "FechaHora",
        "func": "/*Declara la valiable FechaHora que contiene la fecha y hora \nque será utilizada en el flow\n*/\nvar now = new Date(); \nvar año = now.getFullYear();\nvar mes = now.getMonth()+1; \nvar dia = now.getDate();\nvar hora = now.getHours();\nvar minuto = now.getMinutes();\nvar segundo = now.getSeconds(); \n\n\nif(mes.toString().length == 1) {\n    mes = '0'+mes;\n}\n\nif(dia.toString().length == 1) {\n    dia = '0'+dia;\n} \n\nif(hora.toString().length == 1) {\n    hora = '0'+hora;\n}\n\nif(minuto.toString().length == 1) {\n    minuto = '0'+minuto;\n    \n}\n\nif(segundo.toString().length == 1) {\n    segundo = '0'+segundo;\n} \n\n\nvar FechaHoralocal = año+'-'+mes+'-'+dia+' '+hora+':'+minuto+':'+segundo;\nflow.set('FechaHora',FechaHoralocal);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "bc820d79a8656c16",
        "type": "rbe",
        "z": "b29fc04ec927643e",
        "name": "Block unless value changes",
        "func": "deadband",
        "gap": "0",
        "start": "1",
        "inout": "out",
        "septopics": true,
        "property": "payload['ORDEN_LECTURA_general']",
        "topi": "topic",
        "x": 2460,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "e8cb4fd7690c2472",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "EscrituraErrorCiclo",
        "func": "/*Este nodo se encarga de notificar que ha habido un error\ndurante el proceso de escritura, resultando en que el PLC\nno recibió la orden de setear la variable OrdenLectura a 0 y\ntuvo que avanzar de manera automática tras esperar la orden\ndurante 60 segundos sin resultado\n*/\nflow.set('ERROR_CICLO', msg.payload['ERROR_CICLO']);\n\nif (flow.get('ERROR_CICLO') == 1) {\n    msg.topic = \"INSERT INTO \" + flow.get('DBname') + \".General (error_ciclo) VALUES ('\";\n    msg.topic += flow.get('ERROR_CICLO') + \"');\";\n\n    msg.topic = msg.topic;\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1280,
        "wires": [
            [
                "11fc1b7a6e52621e"
            ]
        ]
    },
    {
        "id": "ebab38edbb822380",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Cantidad de producciones?",
        "func": "flow.set('CantidadProducciones',msg.payload['CantidadProducciones']);\nmsg.payload = flow.get('CantidadProducciones');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "405ad83d9db1de74",
                "0215417a8c593f17"
            ]
        ]
    },
    {
        "id": "405ad83d9db1de74",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "CONSULTA3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 560,
        "wires": []
    },
    {
        "id": "36f24992593c66a3",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Buscar info los sensores",
        "func": "/*Este nodo realiza un Query para obtener la informacion\ndel nombre de cada sensor para declararlos como variables de\nflow y que puedan ser utilizados en el apartado de *Escritura en Sensores*\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "e06a54a994a4b32f"
            ]
        ]
    },
    {
        "id": "b693995511fdef71",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Declaracion de sensores",
        "func": "// Este nodo guarda el nombre de cada sensor en una variable de flujo para ser utilizada en este flujo\n\n// Obtener el valor actual de 'i' de la variable de flujo (si 'i' no está definida, se asumirá inicialmente como 0)\nvar i = flow.get('i') || 0;\n\n// Obtener el array de sensores del mensaje de entrada\nvar array = Object.values(msg.payload);\n\n// Iterar a través de cada sensor hasta el número máximo de sensores definido en 'MaxSensor'\nfor (; i < flow.get('MaxSensor') && i < array.length; i++) {\n    // Guardar el objeto sensor actual en una variable de flujo con un nombre único\n    flow.set('Sensor' + (i + 1), array[i].Sensor);\n}\n\n// Guardar el valor actual de 'i' en la variable de flujo\nflow.set('i', i);\n\n// Devolver el mensaje de entrada sin cambios\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 520,
        "wires": [
            [
                "efda720bcc7a5768",
                "6135063f3fd57ba1"
            ]
        ]
    },
    {
        "id": "efda720bcc7a5768",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "CONSULTA2(ARRAY) SENSORES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 520,
        "wires": []
    },
    {
        "id": "74e17c64d21124cb",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "------------------------------------------------------------------------*DATOS DE MAQUINA*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de cada máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 750,
        "y": 620,
        "wires": []
    },
    {
        "id": "b1adbc2e59043095",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "Consultas de informacion necesaria para el programa",
        "info": "",
        "x": 1740,
        "y": 380,
        "wires": []
    },
    {
        "id": "b859be4f6822f86e",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "------------------------------------------------------------------------*ESCRITURA EN LAS TABLAS DE SENSOR Y ASIGNACIÓN DE ID*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2170,
        "y": 2140,
        "wires": []
    },
    {
        "id": "60dc33682d746196",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "INSTRUCCIONES ------ POR FAVOR LEER PARA CORRECTA CONFIGURACIÓN DEL FLOW",
        "info": "INFORMACION PARA CONFIGURAR EL FLOW DE MAQUINA:\n\nCuando se quiera configurar este flow por primera vez el usuario debe editar 3 nodos:\n\n-`Definir_Maquina`: Se debe asignar a la variable Nombre el nombre que tenga nuestra máquina. (var Nombre = 'Nombre de la máquina')\n\n-`Definir_SQL`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo Connection. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro servidor de base de datos los campos Server, Port, Username y Password.\n\n-`Definir_PLC`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo PLC. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro PLC los campos Adress y Port bajo la pestaña Connection. Además, en la pestaña Variables debemos declarar la dirección y nombre de cada una de nuestras variables.\n\n`IMPORTANTE`: Recordar que el nombre que demos a las variables de sensores deben ser iguales que los otorgados a estos mismos sensores en las variables de sensor del flow `Añadir máquinas y sensores`",
        "x": 730,
        "y": 580,
        "wires": []
    },
    {
        "id": "43d5673cf9140a67",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "DEFINIR",
        "info": "",
        "x": 1960,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "0added514c2aeecf",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "DEFINIR",
        "info": "",
        "x": 1620,
        "y": 300,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "04b6ed81253777de",
        "type": "delay",
        "z": "b29fc04ec927643e",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 2200,
        "wires": [
            [
                "8c195c0d52651e8c"
            ]
        ]
    },
    {
        "id": "d9cead27004a61be",
        "type": "delay",
        "z": "b29fc04ec927643e",
        "name": "",
        "pauseType": "delay",
        "timeout": "700",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "e8cb4fd7690c2472"
            ]
        ]
    },
    {
        "id": "8d0ffaafb3a7a6ac",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Update Fin",
        "func": "msg.topic = \"UPDATE \" + flow.get('DBname') + \".General \";\nmsg.topic += \"SET Fin = '\" + flow.get('FechaHora') + \"';\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 920,
        "wires": [
            [
                "db45f59a04b031f6"
            ]
        ]
    },
    {
        "id": "0709e27ef92f6972",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "d36e9a4221ddeb6a",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "a70be18593a21a9a",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "1672b24785d92334",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "b0efe45631a96e07",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "COMPROBACION ULTIMA FILA",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".General ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "d3455a7960c23909"
            ]
        ]
    },
    {
        "id": "f138991979031fe8",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "COMPARACION DE ARRAYS",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocal = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducido',arrayIntroducidolocal);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1100,
        "wires": [
            [
                "f9572b6d364d9066"
            ]
        ]
    },
    {
        "id": "83cda6c5dc263042",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "8f305a3dc9de195a",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Check Valores iguales",
        "func": "//recuperamos el valor de la ultima medida del sensor y lo comparamos con el que estamos a punto de introducir\n//si estos valores coinciden, en lugar de seguir con la escritura saltamos una iteracion en el loop\nmsg.payload = msg.payload[0];\nmsg.payload = msg.payload[\"Valor\"];\nflow.set(\"ValorPrevio\", msg.payload);\n\nmsg.payload = flow.get(\"Objeto\");\nvar sensorKey = 'Sensor' + flow.get('NumSensor');\nmsg.payload = msg.payload[sensorKey];\nflow.set(\"ValorActual\", msg.payload);\n\nif (flow.get(\"ValorPrevio\") !== flow.get(\"ValorActual\")) {\n    msg.topic = \"INSERT INTO \" + flow.get(\"DBname\") + \".Tabla (Valor) VALUES ('\" + flow.get(\"ValorActual\") + \"');\";\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 2220,
        "wires": [
            [
                "f31189780880f305",
                "e38cb6a00f14de7c"
            ]
        ]
    },
    {
        "id": "f31189780880f305",
        "type": "switch",
        "z": "b29fc04ec927643e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 2280,
        "wires": [
            [
                "3bb624a72ec89ceb"
            ],
            [
                "d3026a84fa705378"
            ]
        ]
    },
    {
        "id": "7a6b60941060d5d9",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Bypass compresion",
        "func": "if (flow.get(\"ModoCompresion\") == 1) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 2380,
        "wires": [
            [
                "cd863ff0531f286f"
            ]
        ]
    },
    {
        "id": "cd863ff0531f286f",
        "type": "switch",
        "z": "b29fc04ec927643e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2430,
        "y": 2380,
        "wires": [
            [
                "5398a5fa3a3db77c"
            ],
            [
                "3bb624a72ec89ceb"
            ]
        ]
    },
    {
        "id": "308d75edd3ffc3b5",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Modo Compresion",
        "func": "flow.set(\"ModoCompresion\",msg.payload);\nmsg.payload = \"Modo Compresion Status=\"+flow.get(\"ModoCompresion\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2500,
        "wires": [
            [
                "14f86a8f0ced2f7c"
            ]
        ]
    },
    {
        "id": "2dd573ddd8e25ca2",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1630,
        "y": 2480,
        "wires": [
            [
                "308d75edd3ffc3b5"
            ]
        ]
    },
    {
        "id": "10bdc896affdb05e",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1630,
        "y": 2520,
        "wires": [
            [
                "308d75edd3ffc3b5"
            ]
        ]
    },
    {
        "id": "e38cb6a00f14de7c",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "COMPRESSION",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 2220,
        "wires": []
    },
    {
        "id": "14f86a8f0ced2f7c",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2500,
        "wires": []
    },
    {
        "id": "2fb048b1c322577a",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "",
        "func": "\nvar signals = flow.get(\"Signals\");\n\nfor(var j =0;j <flow.get(\"NumSignals\");j++){\n    \n    flow.set(String(signals[j]),msg.payload[String(signals[j])]);\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "324feed9c438178c",
        "type": "split",
        "z": "b29fc04ec927643e",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1940,
        "y": 760,
        "wires": [
            [
                "22eb4734c223898f"
            ]
        ]
    },
    {
        "id": "22eb4734c223898f",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 760,
        "wires": [
            [
                "37d14fa9b28eb4c9"
            ]
        ]
    },
    {
        "id": "ee87412239aa67e6",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "set variables auxiliares",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"Objeto\",msg.payload);\nflow.set(\"NumSignals\",Object.keys(flow.get(\"Objeto\")).length);\nflow.set(`j`,0);\nflow.set(\"PredefinedSignalsArray\",new Array(flow.get(\"NumSignals\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 760,
        "wires": [
            [
                "324feed9c438178c"
            ]
        ]
    },
    {
        "id": "37d14fa9b28eb4c9",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "80871466e2b50611",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "CONSULTA4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c58365c7667fa45c",
        "type": "link out",
        "z": "b29fc04ec927643e",
        "name": "Numero de Sensores",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 460,
        "wires": []
    },
    {
        "id": "6135063f3fd57ba1",
        "type": "link out",
        "z": "b29fc04ec927643e",
        "name": "Info de los Sensores OBJECT",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 520,
        "wires": []
    },
    {
        "id": "0215417a8c593f17",
        "type": "link out",
        "z": "b29fc04ec927643e",
        "name": "Cantidad de Producciones Number",
        "mode": "link",
        "links": [],
        "x": 2595,
        "y": 560,
        "wires": []
    },
    {
        "id": "8d37ef910d1b3f07",
        "type": "link out",
        "z": "b29fc04ec927643e",
        "name": "INFO SENSOR TEXT",
        "mode": "link",
        "links": [],
        "x": 2215,
        "y": 2200,
        "wires": []
    },
    {
        "id": "d487ebc3b614f268",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "REVISAR",
        "info": "UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1; : msg.topic : string[93]\n\"UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1;\"",
        "x": 1500,
        "y": 920,
        "wires": []
    },
    {
        "id": "bcca708054a8cab1",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "INSERT EN GENERAL",
        "func": "var signals = flow.get(\"Signals\");\nvar objeto = flow.get(\"Objeto\");\nvar dbName = flow.get(\"DBname\");\nvar fechaHora = flow.get(\"FechaHora\");\n\n// Construir la consulta SQL de inserción\nvar topic = \"INSERT INTO `\" + dbName + \"`.`General` VALUES (\";\n\n// Agregar la fecha y hora\ntopic += \"'\" + fechaHora + \"', \";\n\n// Agregar la primera señal\nvar firstSignal = signals[0];\nvar firstValor = objeto[firstSignal];\nif (typeof firstValor === 'string') {\n    topic += \"'\" + firstValor + \"'\";\n} else {\n    topic += firstValor;\n}\n\n// Agregar coma\ntopic += \", \";\n\n// Iterar a través del resto de las señales y construir los valores de la inserción\nfor (var k = 1; k < signals.length; k++) {\n    var signal = signals[k];\n\n    // Obtener el valor correspondiente del objeto\n    var valor = objeto[signal];\n\n    // Agregar el valor a la consulta SQL\n    if (typeof valor === 'string') {\n        // Si es una cadena, agregar comillas simples alrededor del valor\n        topic += \"'\" + valor + \"'\";\n    } else {\n        // De lo contrario, agregar el valor directamente\n        topic += valor;\n    }\n\n    // Agregar coma si no es el último valor\n    if (k < signals.length - 1) {\n        topic += \", \";\n    }\n}\n\n// Cerrar paréntesis de la consulta SQL de inserción\ntopic += \")\";\n\n// return the SQL query\nreturn {\n    topic: topic\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 980,
        "wires": [
            [
                "93a1dedbf7a25665"
            ]
        ]
    },
    {
        "id": "36ed50915a1ad8bd",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1940,
        "y": 460,
        "wires": [
            [
                "7988f8388a77671e",
                "36f24992593c66a3"
            ]
        ]
    },
    {
        "id": "e06a54a994a4b32f",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1940,
        "y": 520,
        "wires": [
            [
                "b693995511fdef71"
            ]
        ]
    },
    {
        "id": "db45f59a04b031f6",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1980,
        "y": 920,
        "wires": [
            [
                "bcca708054a8cab1"
            ]
        ]
    },
    {
        "id": "d3455a7960c23909",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1980,
        "y": 1040,
        "wires": [
            [
                "f138991979031fe8"
            ]
        ]
    },
    {
        "id": "fda616118d9115f7",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2390,
        "y": 1160,
        "wires": [
            [
                "a9d4a4053b21e4bb"
            ]
        ]
    },
    {
        "id": "11fc1b7a6e52621e",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2120,
        "y": 1280,
        "wires": [
            [
                "80871466e2b50611"
            ]
        ]
    },
    {
        "id": "5398a5fa3a3db77c",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2590,
        "y": 2260,
        "wires": [
            [
                "8f305a3dc9de195a"
            ]
        ]
    },
    {
        "id": "3bb624a72ec89ceb",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2990,
        "y": 2380,
        "wires": [
            [
                "d3026a84fa705378"
            ]
        ]
    },
    {
        "id": "731b34d3df8c5f74",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "OVERRIDE DE O.L POR SENSOR",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "d01bc745e32e297b",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "info": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "x": 2490,
        "y": 1060,
        "wires": []
    },
    {
        "id": "e39e8ebdfef446b1",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "REVISAR",
        "info": "",
        "x": 2360,
        "y": 380,
        "wires": []
    },
    {
        "id": "59b82259f2cb8fcf",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3420,
        "y": 1060,
        "wires": []
    },
    {
        "id": "26b1f19b95de8c9e",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "66917f59b8013ff6",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1720,
        "wires": [
            [
                "aae130a9851e21d8"
            ]
        ]
    },
    {
        "id": "9a04d1f5b403853f",
        "type": "switch",
        "z": "b29fc04ec927643e",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1720,
        "wires": [
            [
                "66fb65fed4bcf4e8"
            ],
            [
                "66917f59b8013ff6"
            ]
        ]
    },
    {
        "id": "aae130a9851e21d8",
        "type": "switch",
        "z": "b29fc04ec927643e",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1720,
        "wires": [
            [
                "fa485ec415b12ca4"
            ],
            [
                "851e670951375951"
            ]
        ]
    },
    {
        "id": "e64d30a855e2f880",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "i for loop",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1660,
        "wires": [
            [
                "47a8fadd3db53192"
            ]
        ]
    },
    {
        "id": "47a8fadd3db53192",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<4){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1720,
        "wires": [
            [
                "9a04d1f5b403853f"
            ]
        ]
    },
    {
        "id": "851e670951375951",
        "type": "delay",
        "z": "b29fc04ec927643e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2590,
        "y": 1720,
        "wires": [
            [
                "47a8fadd3db53192"
            ]
        ]
    },
    {
        "id": "66fb65fed4bcf4e8",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1660,
        "wires": [
            [
                "03047c861415216e"
            ]
        ]
    },
    {
        "id": "fa485ec415b12ca4",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "CORTE REBOBINADOR",
        "func": "if(flow.get('CORTE_REBOBINADOR')==1){\n        msg.payload=0;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 1720,
        "wires": [
            [
                "46a155c7a911b66c",
                "0508b69965d49a83"
            ]
        ]
    },
    {
        "id": "3a622c08c86e98d3",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "59873d3f256dd9a6",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "46b3003338777974",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "21ee4d6851bdd895",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "06982d5c65e5355c",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Control ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            [
                "0478f8c3dd70a7ad"
            ]
        ]
    },
    {
        "id": "b4ac679d3553d20e",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "ArraysParaComparar",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocalcontrol = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducidocontrol',arrayIntroducidolocalcontrol);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1600,
        "wires": [
            [
                "e64d30a855e2f880"
            ]
        ]
    },
    {
        "id": "0478f8c3dd70a7ad",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 1540,
        "wires": [
            [
                "b4ac679d3553d20e"
            ]
        ]
    },
    {
        "id": "03047c861415216e",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2390,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "46a155c7a911b66c",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "CORTE DESBOBINADOR",
        "func": "\n\nif(flow.get('CORTE_DESBOBINADOR')==1){\n        msg.payload=0;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3080,
        "y": 1660,
        "wires": [
            [
                "e1d186bcef2bab5e"
            ]
        ]
    },
    {
        "id": "5559e8e12bb56572",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1910,
        "y": 1640,
        "wires": [
            [
                "9a04d1f5b403853f"
            ]
        ]
    },
    {
        "id": "0508b69965d49a83",
        "type": "delay",
        "z": "b29fc04ec927643e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3380,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "e1d186bcef2bab5e",
        "type": "delay",
        "z": "b29fc04ec927643e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3380,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "b40bf0e491b1b80b",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "------------------------------------------------------------------------*ESCRITURA EN CONTROL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2040,
        "y": 1340,
        "wires": []
    },
    {
        "id": "2ae1049b69e1153c",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "ESCRITURA EN LA TABLA DE CONTROL",
        "func": "// Obtener el payload del mensaje\nlet data = msg.payload;\n\n// Verificar si el payload es un string y convertirlo a objeto JSON\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\n// Inicializar un array para almacenar las consultas SQL\nlet sqlQueries = [];\n\n// Iterar sobre cada clave en el objeto de datos\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        // Construir la consulta SQL con una tabla estática y claves como columnas\n        let query = `INSERT INTO INT_maquina1.control (${key}) VALUES (\"${value}\")`;\n        sqlQueries.push(query);\n    }\n}\n\n// Devolver las consultas generadas en el payload del mensaje\nmsg.topic = sqlQueries.join(';');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1480,
        "wires": [
            [
                "cfff19e7a804a495"
            ]
        ]
    },
    {
        "id": "b5d1161fe37b33c5",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2120,
        "y": 1500,
        "wires": [
            [
                "06982d5c65e5355c"
            ]
        ]
    },
    {
        "id": "ea8443157d17843a",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "-----------------ORDEN------------",
        "func": "// Función para reordenar las variables dentro del paquete\nfunction reordenarPaquete(paquete) {\n    // Define el orden deseado de las variables\n    const ordenDeseado = [\"1LOTE\", \"2RECETA\", \"3PROCESO\", \"4FASE\", \"5OPERARIO\", \"zAVANCE_MANUAL\", \"zABORTAR\", flow.get(\"Adicional1\"), flow.get(\"Adicional2\"), flow.get(\"Adicional3\"), flow.get(\"Adicional4\"), flow.get(\"Adicional5\"), flow.get(\"Adicional5\"), flow.get(\"Adicional6\"), flow.get(\"Adicional7\"), flow.get(\"Adicional8\"), flow.get(\"Adicional9\"), flow.get(\"Adicional10\"), flow.get(\"Adicional11\"), flow.get(\"Adicional12\"), flow.get(\"Adicional13\"), flow.get(\"Adicional14\"), flow.get(\"Adicional15\"), \"zerror_ciclo\", flow.get(\"AdicionalT1\"), flow.get(\"AdicionalT2\"), flow.get(\"AdicionalT3\"), flow.get(\"AdicionalT4\"), flow.get(\"AdicionalT5\"), flow.get(\"AdicionalT6\"), flow.get(\"AdicionalT7\"), flow.get(\"AdicionalT8\"), flow.get(\"AdicionalT9\"), flow.get(\"AdicionalT10\"), flow.get(\"AdicionalT11\"), flow.get(\"AdicionalT12\"), flow.get(\"AdicionalT13\"), flow.get(\"AdicionalT14\"), flow.get(\"AdicionalT15\") ];\n\n    // Crea un nuevo objeto para almacenar las variables reordenadas,\n    let paqueteOrdenado = {};\n\n    // Itera sobre el orden deseado\n    ordenDeseado.forEach(variable => {\n        // Verifica si la variable está presente en el paquete recibido\n        if (paquete.hasOwnProperty(variable)) {\n            // Agrega la variable al paquete ordenado\n            paqueteOrdenado[variable] = paquete[variable];\n        }\n    });\n\n    // Devuelve el paquete ordenado\n    return paqueteOrdenado;\n}\n\n// Llama a la función de reordenamiento con el paquete recibido como argumento\nmsg.payload= reordenarPaquete(msg.payload);\n\n// Devuelve el mensaje con el paquete ordenado\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1080,
        "wires": [
            [
                "ee87412239aa67e6",
                "64f5c58dca377ab2",
                "36f24992593c66a3",
                "ebab38edbb822380",
                "40f3cd04eded094d",
                "d9cead27004a61be",
                "2fb048b1c322577a",
                "04b6ed81253777de",
                "913a50e9d2939fb7"
            ]
        ]
    },
    {
        "id": "cfd2b73edc6c4762",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "DEFINIR ORDENES DE LECTURA",
        "info": "",
        "x": 2100,
        "y": 1580,
        "wires": []
    },
    {
        "id": "9db0074b77ccac6d",
        "type": "json",
        "z": "b29fc04ec927643e",
        "name": "Envio del señales de control a la BDD",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1250,
        "y": 1460,
        "wires": [
            [
                "2ae1049b69e1153c"
            ]
        ]
    },
    {
        "id": "cfff19e7a804a495",
        "type": "split",
        "z": "b29fc04ec927643e",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2050,
        "y": 1440,
        "wires": [
            [
                "f89334fb2904b80a"
            ]
        ]
    },
    {
        "id": "4fc268450ab856b8",
        "type": "json",
        "z": "b29fc04ec927643e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2230,
        "y": 1440,
        "wires": [
            [
                "b5d1161fe37b33c5",
                "eda236875b5038cc"
            ]
        ]
    },
    {
        "id": "eda236875b5038cc",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "REV",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 1440,
        "wires": []
    },
    {
        "id": "93a1dedbf7a25665",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1980,
        "y": 980,
        "wires": [
            [
                "b0efe45631a96e07",
                "a0059b478a3c6d57"
            ]
        ]
    },
    {
        "id": "a095831ff1a9e82c",
        "type": "split",
        "z": "b29fc04ec927643e",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 2900,
        "y": 1460,
        "wires": [
            [
                "e0456ce8419f2f65"
            ]
        ]
    },
    {
        "id": "e0456ce8419f2f65",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 1460,
        "wires": [
            [
                "aa749fc373c942a7"
            ]
        ]
    },
    {
        "id": "a2982511cb6531d9",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "set variables Control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j`,0);\nflow.set(\"SeñalesdeControl\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2620,
        "y": 1440,
        "wires": [
            [
                "a095831ff1a9e82c"
            ]
        ]
    },
    {
        "id": "aa749fc373c942a7",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "cec73d1d4f5a67cf",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "ENTRADAS SIEMENS PLC",
        "info": "\nEMAIL: \"~+TIEMPO,102.00;LITROS,204.00;HORAS:,1580.00\"",
        "x": 160,
        "y": 920,
        "wires": []
    },
    {
        "id": "2b73b7171e047947",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "Inserciones de sensores con O.L Independiente",
        "info": "",
        "x": 1840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "a5ccc37aec7ce299",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "Inserciones de sensores con O.L General de Sensores",
        "info": "",
        "x": 2500,
        "y": 1800,
        "wires": []
    },
    {
        "id": "1d8353e99a0d2b13",
        "type": "json",
        "z": "b29fc04ec927643e",
        "name": "ORDEN_LECTURA_tipo = \"2\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2470,
        "y": 2060,
        "wires": [
            [
                "5fc15617c9317799",
                "068e08b2f6476da2"
            ]
        ]
    },
    {
        "id": "5fc15617c9317799",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO int_maquina1.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1980,
        "wires": [
            [
                "408dc59b993c980d"
            ]
        ]
    },
    {
        "id": "408dc59b993c980d",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1920,
        "wires": [
            [
                "4cac23e8f27b00fa"
            ]
        ]
    },
    {
        "id": "4cac23e8f27b00fa",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "CHECK O.L.",
        "func": "\nif (flow.get(\"ORDEN_LECTURA_sensores\") !== 1) {\n    node.warn('La orden de Lectura General de Sensores está apagada');\n} else {\n    \n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1860,
        "wires": [
            [
                "0d7dc75e9ad723d8"
            ]
        ]
    },
    {
        "id": "0d7dc75e9ad723d8",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2700,
        "y": 1860,
        "wires": [
            [
                "068e08b2f6476da2"
            ]
        ]
    },
    {
        "id": "068e08b2f6476da2",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "debug sensores gnral",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 1960,
        "wires": []
    },
    {
        "id": "e75b201609492309",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "set O.L. EMAIL S1C",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3e36c6f2ed21cef6",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "e75b201609492309"
            ]
        ]
    },
    {
        "id": "70696974295738ae",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "set O.L. EMAIL D1C",
        "func": "\nflow.set(\"D1C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "75907274d1b5cfab",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "70696974295738ae"
            ]
        ]
    },
    {
        "id": "17127e1175886046",
        "type": "template",
        "z": "b29fc04ec927643e",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "30c14a8fcb2f13b7"
            ]
        ]
    },
    {
        "id": "30c14a8fcb2f13b7",
        "type": "rbe",
        "z": "b29fc04ec927643e",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "e75b201609492309"
            ]
        ]
    },
    {
        "id": "255514939fc58814",
        "type": "websocket in",
        "z": "b29fc04ec927643e",
        "name": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "17127e1175886046"
            ]
        ]
    },
    {
        "id": "7ce19d8dc957a484",
        "type": "template",
        "z": "b29fc04ec927643e",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "4ef748baac230bb7"
            ]
        ]
    },
    {
        "id": "4ef748baac230bb7",
        "type": "rbe",
        "z": "b29fc04ec927643e",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "70696974295738ae"
            ]
        ]
    },
    {
        "id": "cfb8190600109554",
        "type": "websocket in",
        "z": "b29fc04ec927643e",
        "name": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "7ce19d8dc957a484"
            ]
        ]
    },
    {
        "id": "dcdf347a90706bf7",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "set L. EMAIL",
        "func": "\nflow.set(\"CONTROL_EMAIL\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4570,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "14e339343dbe5760",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "¿O.L EMAIL?",
        "func": "if (flow.get(\"CONTROL_EMAIL\") === 1) {\n    // Bloquear ejecución enviando un mensaje de error\n    msg.payload=1\n    return msg;\n} else {\n    // Continuar el flujo si el valor es 1\n    node.error(\"EMAIL EN PROCESO\", msg);\n    return null; // Detener el flujo\n   \n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3400,
        "y": 1220,
        "wires": [
            [
                "e47e30de100911c5"
            ]
        ]
    },
    {
        "id": "af7490140bf96dd7",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 4290,
        "y": 340,
        "wires": [
            [
                "dcdf347a90706bf7",
                "345dbd5e161c3e6c",
                "e47e30de100911c5"
            ]
        ]
    },
    {
        "id": "9d03586040ba2b2a",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "NOTIFICACIONES DE TRAZABILIDAD POR EMAIL.",
        "info": "",
        "x": 4700,
        "y": 140,
        "wires": []
    },
    {
        "id": "de0ac60e1bf85957",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "70696974295738ae"
            ]
        ]
    },
    {
        "id": "048f3684fcf71c98",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "e75b201609492309"
            ]
        ]
    },
    {
        "id": "60229c0f97b15531",
        "type": "split",
        "z": "b29fc04ec927643e",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1660,
        "y": 1380,
        "wires": [
            [
                "344e855603fd41f7"
            ]
        ]
    },
    {
        "id": "344e855603fd41f7",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Declaracion Señales DE CONTROL",
        "func": "var CSignals = msg.signals;\n\nvar CSignalsLocal = flow.get(\"ControlSignalsArray\");\n\nCSignalsLocal[flow.get('j1')]=CSignals;\n\nflow.set('j1',flow.get('j1')+1);\n\nif(flow.get(\"j1\")==flow.get(\"NumSignalsControl\")){\n    flow.set(\"CSignals\",CSignalsLocal);\n}\n\nmsg.payload = msg.CSignals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1380,
        "wires": [
            [
                "bddcf4e1fe35168e"
            ]
        ]
    },
    {
        "id": "b74d4f056b7171a0",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "set variables de control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j1`,0);\nflow.set(\"ControlSignalsArray\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1380,
        "wires": [
            [
                "60229c0f97b15531"
            ]
        ]
    },
    {
        "id": "bddcf4e1fe35168e",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j1\") == flow.get(\"NumSignalsControl\")) {\n    msg.payload = flow.get(\"ObjetoControl\");\n\n    var signals = flow.get(\"CSignals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignalsControl\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "a553d42154783667",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3420,
        "y": 1320,
        "wires": []
    },
    {
        "id": "5e6cc75f49f41815",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "set  TIPO O.L.",
        "func": "\nflow.set(\"ORDEN_LECTURA_tipo\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "031ff470952d3510",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 650,
        "y": 120,
        "wires": [
            [
                "5e6cc75f49f41815"
            ]
        ]
    },
    {
        "id": "a870fc7999071f9d",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "set O.L.Sensores",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0bdfd570ca17f4b8",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 790,
        "y": 340,
        "wires": [
            [
                "a870fc7999071f9d"
            ]
        ]
    },
    {
        "id": "1887714e471f2512",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "Modelo de funcionamiento con ordenes de lectura Individuales o General",
        "info": "",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "42724eff9456185b",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "set  TIPO O.L.",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f03296e7daedb2ec",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 910,
        "y": 120,
        "wires": [
            [
                "42724eff9456185b"
            ]
        ]
    },
    {
        "id": "c8efcd470e1b0103",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "OVERRIDE DE O.L General Sensores",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "f89334fb2904b80a",
        "type": "split",
        "z": "b29fc04ec927643e",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2190,
        "y": 1400,
        "wires": [
            [
                "4fc268450ab856b8"
            ]
        ]
    },
    {
        "id": "392fa2e007413a8d",
        "type": "s7 in",
        "z": "b29fc04ec927643e",
        "endpoint": "d4d4f8fd6ca9d180",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "01cdf8ed5a2a427f"
            ]
        ]
    },
    {
        "id": "12aa675b97f2fc38",
        "type": "s7 in",
        "z": "b29fc04ec927643e",
        "endpoint": "b0c24bc0315a3586",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 220,
        "y": 1380,
        "wires": [
            [
                "b74d4f056b7171a0"
            ]
        ]
    },
    {
        "id": "a0059b478a3c6d57",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "SELECT LAST ROW",
        "func": "var controlemail= flow.get(\"CONTROL_EMAIL\");\nif (controlemail===1){\nmsg.topic= \"SELECT * FROM INT_\"+flow.get (\"Maquina\")+\".General ORDER BY 'FechaHora' DESC LIMIT 1;\";\nreturn msg;}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 980,
        "wires": [
            [
                "a6e7417bc30dbd8e"
            ]
        ]
    },
    {
        "id": "a6e7417bc30dbd8e",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2500,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "345dbd5e161c3e6c",
        "type": "json",
        "z": "b29fc04ec927643e",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 4510,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "76b56ca6e45b5d72",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "DEFINIR ADICIONALES",
        "props": [
            {
                "p": "Adicional1",
                "v": "TT_IMPULSION",
                "vt": "str"
            },
            {
                "p": "Adicional2",
                "v": "TT_RETORNO",
                "vt": "str"
            },
            {
                "p": "Adicional3",
                "v": "CT_RETORNO",
                "vt": "str"
            },
            {
                "p": "Adicional4",
                "v": "MATRICULA_CISTERNA",
                "vt": "str"
            },
            {
                "p": "Adicional5",
                "v": "CONDUCTOR_CISTERNA",
                "vt": "str"
            },
            {
                "p": "Adicional6",
                "v": "LITROS_SOSA",
                "vt": "str"
            },
            {
                "p": "Adicional7",
                "v": "LITROS_ACIDO",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 760,
        "wires": [
            [
                "7905ebd1569f15ad"
            ]
        ]
    },
    {
        "id": "7905ebd1569f15ad",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"Adicional1\", msg.Adicional1);\nflow.set(\"Adicional2\", msg.Adicional2);\nflow.set(\"Adicional3\", msg.Adicional3);\nflow.set(\"Adicional4\", msg.Adicional4);\nflow.set(\"Adicional5\", msg.Adicional5);\nflow.set(\"Adicional6\", msg.Adicional6);\nflow.set(\"Adicional7\", msg.Adicional7);\nflow.set(\"Adicional8\", msg.Adicional8);\nflow.set(\"Adicional9\", msg.Adicional9);\nflow.set(\"Adicional10\", msg.Adicional10);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "622cd3539ef399eb",
        "type": "s7 out",
        "z": "b29fc04ec927643e",
        "endpoint": "b0c24bc0315a3586",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 3440,
        "y": 1160,
        "wires": []
    },
    {
        "id": "650e61afb658c591",
        "type": "json",
        "z": "b29fc04ec927643e",
        "name": "ORDEN_LECTURA_tipo = \"1\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1890,
        "y": 1880,
        "wires": [
            [
                "b54c18dae5664dbe"
            ]
        ]
    },
    {
        "id": "b54c18dae5664dbe",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO INT_LC02.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 1940,
        "wires": [
            [
                "f3962760a5dac5c3"
            ]
        ]
    },
    {
        "id": "b6894c9bbe15ee81",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_LC02\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1900,
        "wires": [
            [
                "b3a1517ae0e23978"
            ]
        ]
    },
    {
        "id": "94bce59241414610",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "CHECK O.L.",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_LC02\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n            break; // Salir del bucle si encontramos una consulta permitida\n        } else if (controlValue === 0) {\n            // Si encontramos un control que es 0, simplemente continuar con el siguiente\n            node.warn(`El control para la tabla ${tableName} es 0. La consulta será descartada.`);\n            // Aquí no se hace nada porque el mensaje será descartado si no se encuentra ninguna consulta permitida\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, simplemente descartar el mensaje\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null; // Esto efectivamente descarta el mensaje sin detener el flujo\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1860,
        "wires": [
            [
                "b6894c9bbe15ee81"
            ]
        ]
    },
    {
        "id": "f3962760a5dac5c3",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 2040,
        "wires": [
            [
                "94bce59241414610"
            ]
        ]
    },
    {
        "id": "b3a1517ae0e23978",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_LC02\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1940,
        "wires": [
            [
                "13348c54de27e47d"
            ]
        ]
    },
    {
        "id": "2b1134cfa6347f93",
        "type": "switch",
        "z": "b29fc04ec927643e",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1830,
        "y": 2060,
        "wires": [
            [
                "1d8353e99a0d2b13"
            ]
        ]
    },
    {
        "id": "ab16353acdd954d0",
        "type": "switch",
        "z": "b29fc04ec927643e",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1630,
        "y": 1960,
        "wires": [
            [
                "650e61afb658c591"
            ],
            [
                "2b1134cfa6347f93"
            ],
            []
        ]
    },
    {
        "id": "17d29664fa9b8bfe",
        "type": "s7 in",
        "z": "b29fc04ec927643e",
        "endpoint": "f80ab5477cb83c39",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 230,
        "y": 1960,
        "wires": [
            [
                "dfed911c6266361f",
                "ab16353acdd954d0",
                "bfa4157bbd133bf8"
            ]
        ]
    },
    {
        "id": "13348c54de27e47d",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2240,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "4b7393a4fb4b61d0",
        "type": "e-mail",
        "z": "b29fc04ec927643e",
        "server": "grupointegra-com-es.correoseguro.dinaserver.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Envio Email",
        "x": 5370,
        "y": 240,
        "wires": []
    },
    {
        "id": "e47e30de100911c5",
        "type": "json",
        "z": "b29fc04ec927643e",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 4270,
        "y": 240,
        "wires": [
            [
                "dbc722b3c18b6898"
            ]
        ]
    },
    {
        "id": "c43e694ca0f9609a",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 4700,
        "y": 240,
        "wires": [
            [
                "259314a6c9bd380d"
            ]
        ]
    },
    {
        "id": "259314a6c9bd380d",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "function 88",
        "func": "// Verifica si el payload es un string y lo convierte a JSON\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (error) {\n        node.error(\"El payload no es un JSON válido: \" + error);\n        return;\n    }\n}\n\n// Retorna el mensaje con el payload convertido\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4930,
        "y": 240,
        "wires": [
            [
                "95e66e05ad09dec9"
            ]
        ]
    },
    {
        "id": "ec4f35fd0b82be5e",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "(BETA)",
        "info": "",
        "x": 5040,
        "y": 140,
        "wires": []
    },
    {
        "id": "5577c8c240735087",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "function 91",
        "func": "var Lote = flow.get(\"1LOTE\");\nvar Maquina = flow.get(\"DBname\");\n\n// Asegurarse de que Lote se concatene como string con comillas simples\nvar query = \"SELECT `4FASE`, `TT_IMPULSION`, `TT_RETORNO`, `CT_RETORNO`, `99CONSUMOAGUA(Lh)`, `99AIRECOMPRIMIDO(Wh)`, `99ELECTRICIDAD(Wh)`, `99VAPOR(gv/h)`, `LITROS_SOSA`, `LITROS_ACIDO`, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM \" + Maquina + \".General WHERE 1LOTE = '\" + Lote + \"';\";\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4450,
        "y": 240,
        "wires": [
            [
                "c43e694ca0f9609a"
            ]
        ]
    },
    {
        "id": "95e66e05ad09dec9",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "function 94",
        "func": "// Recupera el contenido del payload\nlet content = flow.get(\"CONTENIDO_EMAIL\") || \"\";  // Asegura que no sea null\nlet RECETA = flow.get(\"2RECETA\") || \"No disponible\";\nlet PROCESO = flow.get(\"3PROCESO\") || \"No disponible\";\nvar LOTE = flow.get(\"1LOTE\") || \"No disponible\";\nvar FASE = flow.get(\"4FASE\") || \"No disponible\";\nvar MATRICULA_CISTERNA = flow.get(\"MATRICULA_CISTERNA\") || \"No disponible\";\nvar CONDUCTOR_CISTERNA = flow.get(\"CONDUCTOR_CISTERNA\") || \"No disponible\";\nvar Registro = msg.payload;  // El payload ya debe contener el JSON parseado.\nvar OPERARIO = flow.get(\"5OPERARIO\") || \"No disponible\";\n\n// Filtra los elementos vacíos del contenido al dividirlo\nlet items = content.split(';')\n    .map(item => item.trim())\n    .filter(item => item !== \"\")  // Elimina los elementos vacíos\n    .map(item => `<li>${item}</li>`)\n    .join('\\n');\n\n// Verifica que el contenido de Registro sea un array y construye una tabla\nlet registroTable = \"\";\n\nif (Array.isArray(Registro)) {\n    registroTable = `\n        <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse: collapse;\">\n           <thead>\n    <tr>\n        <th>FASE</th>\n        <th>TT_IMPULSION</th>\n        <th>TT_RETORNO</th>\n        <th>CT_RETORNO</th>\n        <th>AIRECOMPRIMIDO(Wh)</th>\n        <th>CONSUMOAGUA(Wh)</th>\n        <th>ELECTRICIDAD(Wh)</th>\n        <th>VAPOR(kgv/h)</th>\n        <th>LITROS_SOSA</th>\n        <th>LITROS_ACIDO</th>\n        <th>Fecha y Hora</th>\n    </tr>\n</thead>\n<tbody>\n    ${Registro.map(reg => `\n        <tr>\n            <td>${reg['4FASE'] || \"No disponible\"}</td>\n            <td>${reg.TT_IMPULSION || \"No disponible\"}</td>\n            <td>${reg.TT_RETORNO || \"No disponible\"}</td>\n            <td>${reg.CT_RETORNO || \"No disponible\"}</td>\n            <td>${reg[\"99AIRECOMPRIMIDO(Wh)\"] || \"Sin consumo\"}</td>\n            <td>${reg[\"99CONSUMOAGUA(Wh)\"] || \"Sin consumo\"}</td>\n            <td>${reg[\"99ELECTRICIDAD(Wh)\"] || \"Sin consumo\"}</td>\n            <td>${reg[\"99VAPOR(gv/h)\"] || \"Sin consnumo\"}</td>\n            <td>${reg[\"LITROS_SOSA\"] || \"Sin consumo\"}</td>\n            <td>${reg[\"LITROS_ACIDO\"] || \"Sin consumo\"}</td>\n            <td>${reg.Fechahora || \"No disponible\"}</td>\n        </tr>\n    `).join('')}\n</tbody>\n\n    `;\n} else {\n    registroTable = `<p>No se encontraron registros válidos.</p>`;\n}\n\n// Arma el contenido HTML completo con la tabla\nmsg.payload = `\n    <html>\n        <body>\n            <h1>Alerta de Trazabilidad:</h1>\n            <p>En este documento puede encontrar los datos de Limpieza de la línea: ${flow.get(\"Maquina\")}</p>\n            <ul>\n                ${items}\n                <li>Lote: ${LOTE}</li>\n                <li>Proceso: ${PROCESO}</li>\n                <li>Receta: ${RECETA}</li>\n                <li>Matrícula: ${MATRICULA_CISTERNA}</li>\n                <li>Conductor: ${CONDUCTOR_CISTERNA}</li>\n                <li>Operario: ${OPERARIO}</li>\n            </ul>\n            <h2>Registros:</h2>\n            ${registroTable}\n            <img src=\"cid:miImagen\" alt=\"Imagen Incrustada\" />\n        </body>\n    </html>\n`;\n\n// Especifica que se trata de contenido HTML\nmsg.html = msg.payload;\n\n// Configura el mensaje\nmsg.to = \"jgonzalez@serrycamp.com\";\nmsg.topic = \"Datos de la línea LC02. Lote:\" + flow.get(\"1LOTE\");;\nmsg.attachments = [\n    {\n        filename: \"Logo.jpg\", // Cambia esto por el nombre de tu imagen\n        path: \"/home/intboxes/Documents/Logo.jpg\", // Cambia esto por la ruta a tu imagen\n        cid: \"miImagen\"  // cid debe coincidir con el del HTML\n    }\n\n];\n\n// Envía el me\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5130,
        "y": 240,
        "wires": [
            [
                "4b7393a4fb4b61d0",
                "d3e7bfc1f2a44158"
            ]
        ]
    },
    {
        "id": "6bdf9de6ece7f6a6",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "TESTING",
        "info": "",
        "x": 4740,
        "y": 380,
        "wires": []
    },
    {
        "id": "0341d9311ba84f07",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "----------------------------------------NOTIFICACIONES----------------------------------------",
        "info": "",
        "x": 4740,
        "y": 40,
        "wires": []
    },
    {
        "id": "d3e7bfc1f2a44158",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "CONFIRMACION AL PLC",
        "func": "msg.payload = 2;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5350,
        "y": 320,
        "wires": [
            [
                "d6867dba2e4b7453"
            ]
        ]
    },
    {
        "id": "d6867dba2e4b7453",
        "type": "s7 out",
        "z": "b29fc04ec927643e",
        "endpoint": "b0c24bc0315a3586",
        "variable": "CONTROL_EMAIL",
        "name": "",
        "x": 5630,
        "y": 240,
        "wires": []
    },
    {
        "id": "cafb3586fb26a2b7",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "ORDEN_LECTURA_G(OK)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=2;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 1200,
        "wires": [
            [
                "622cd3539ef399eb",
                "14e339343dbe5760",
                "92b84216fcbaf92b"
            ]
        ]
    },
    {
        "id": "a9d4a4053b21e4bb",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "ORDEN_LECTURA_G(KO)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=3;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 1160,
        "wires": [
            [
                "622cd3539ef399eb"
            ]
        ]
    },
    {
        "id": "ec6310f57e3e4a13",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "ORDEN DE LECTURA GENERAL BLOCK",
        "func": "// Obtener los valores de las variables de flujo\nconst ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nconst latenciaOrdenLectura = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 1\nif (ordenLectura === 1) {\n    // Si ORDEN_LECTURA_general es 1, verificar la latencia\n    if (latenciaOrdenLectura === 1) {\n        // Si la latencia es 1, bloquear la ejecución\n        node.error(\"LATENCIA_ORDEN_LECTURA_general es 1, bloqueo de flujo\", msg);\n        return null; // Detener el flujo\n    } else {\n        // Si la latencia no es 1, continuar el flujo\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n        return msg;\n    }\n} else {\n    // Si ORDEN_LECTURA_general no es 1, bloquear la ejecución\n    node.error(\"ORDEN_LECTURA_general no es 1, bloqueo de flujo\", msg);\n    return null; // Detener el flujo\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 860,
        "wires": [
            [
                "bcca708054a8cab1"
            ]
        ]
    },
    {
        "id": "913a50e9d2939fb7",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "Check Latencia",
        "func": "// Obtener el valor de ORDEN_LECTURA_general\nvar ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 0 o 2\nif (ordenLectura === 0 || ordenLectura === 2) {\n    // Si es 0 o 2, establecer la latencia en el valor actual de ORDEN_LECTURA_general\n    flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 0);\n    return msg;\n}else{\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 860,
        "wires": [
            [
                "ec6310f57e3e4a13"
            ]
        ]
    },
    {
        "id": "acf2e8c17fcc58bc",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "------------------------------------------------------------------------*GESTION DE TABLA DE LOTES*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2060,
        "y": 2840,
        "wires": []
    },
    {
        "id": "861a414e306cff0a",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "------------------------------------------------------------------------RESPUESTA ERROR DE CICLO--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2050,
        "y": 2620,
        "wires": []
    },
    {
        "id": "dfed911c6266361f",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "COMPROBACIÓN DE ERROR DE CICLO",
        "func": "var errorciclo = flow.get(\"zerror_ciclo\");\nvar OL = flow.get(\"ORDEN_LECTURA_general\");\n\n// Verifica que las variables existen\nif (typeof errorciclo === 'undefined' || typeof OL === 'undefined') {\n    node.warn(\"Variables zerror_ciclo u ORDEN_LECTURA_general no definidas\");\n    return null;\n}\n\n// Si zerror_ciclo es true, envía un payload de 2\nif (errorciclo === true) {\n    msg.payload = false;\n    return msg;\n} else {\n    // Si es false, envía un payload de 0 (o el valor que necesites cuando no hay error)\n    \n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 2700,
        "wires": [
            [
                "70c56d99f06389ae"
            ]
        ]
    },
    {
        "id": "70c56d99f06389ae",
        "type": "s7 out",
        "z": "b29fc04ec927643e",
        "endpoint": "b0c24bc0315a3586",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 2160,
        "y": 2700,
        "wires": []
    },
    {
        "id": "7df61d76c1549d48",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 280,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f206f9dc181dc6b5",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 280,
        "y": 1140,
        "wires": []
    },
    {
        "id": "a176239f5d0cb50a",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 270,
        "y": 1320,
        "wires": []
    },
    {
        "id": "fdd5ffb2b9a4c816",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 270,
        "y": 1460,
        "wires": []
    },
    {
        "id": "35b0744b5adbc358",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 270,
        "y": 1900,
        "wires": []
    },
    {
        "id": "fb358ec4511963de",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 270,
        "y": 2020,
        "wires": []
    },
    {
        "id": "2232d969952bb736",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "-------------------------DECLARACIÓN DE ADICIONALES GENERALES---------------------------------",
        "info": "",
        "x": 720,
        "y": 700,
        "wires": []
    },
    {
        "id": "dcb4e0d0f8b5fedb",
        "type": "s7 out",
        "z": "b29fc04ec927643e",
        "endpoint": "b0c24bc0315a3586",
        "variable": "LOTEC",
        "name": "",
        "x": 1980,
        "y": 3040,
        "wires": []
    },
    {
        "id": "bfa4157bbd133bf8",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "ORDEN_LECTURA_LOTE(ok)",
        "func": "// Obtener las variables necesarias de flujo\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_LOTE\");\nvar OPERARIO = flow.get(\"5OPERARIO\"); // Asegurarse de que \"5OPERARIO\" es una variable válida de flujo\nvar LOTEC = flow.get(\"LOTEC\");\nvar Lote = flow.get(\"1LOTE\");\n\n// Reset de latencia si LOTEC es 0, 2 o 4\nif (LOTEC === 0 || LOTEC === 2 || LOTEC === 4) {\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 0);\n  \n}\n\n// Orden para iniciar el lote (LOTEC = 1)\nif (LOTEC === 1 && latencia === 0) {\n    msg.payload = 2;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    \n  // Consulta SQL para insertar un nuevo lote e iniciar el lote con hora de inicio\n    msg.topic = `INSERT INTO INT_LC02.LOTE (1LOTE, 3FechaInicioLote, 4FechaFinLote, 5OPERARIO)\n                 VALUES ('${Lote}', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '${OPERARIO}');`;\n\nreturn msg;\n}\n\n// Orden para finalizar el lote (LOTEC = 3)\nif (LOTEC === 3 && latencia === 0) {\n    msg.payload = 4;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de finalización del lote más reciente\n    msg.topic = `UPDATE INT_LC02.LOTE \n                 SET 4FechaFinLote = CURRENT_TIMESTAMP \n                 WHERE 1LOTE = '${Lote}' \n                 ORDER BY 3FechaInicioLote DESC \n                 LIMIT 1;`;\nreturn msg;\n}else{\nreturn null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 2980,
        "wires": [
            [
                "dcb4e0d0f8b5fedb",
                "3911ed5464dc673f"
            ]
        ]
    },
    {
        "id": "3911ed5464dc673f",
        "type": "mysql",
        "z": "b29fc04ec927643e",
        "mydb": "884e4ae10df762d0",
        "name": "",
        "x": 1970,
        "y": 2980,
        "wires": [
            []
        ]
    },
    {
        "id": "d42fd59629eb5a83",
        "type": "s7 in",
        "z": "b29fc04ec927643e",
        "endpoint": "0a38ef4bc8ee3334",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 110,
        "y": 3240,
        "wires": [
            [
                "bd9ce94aaa5662e1"
            ]
        ]
    },
    {
        "id": "1cdff7dccbf7fb45",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "-------------COSNUMOS-------------------------------------------",
        "info": "",
        "x": 220,
        "y": 3140,
        "wires": []
    },
    {
        "id": "60a467df06c6f90c",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "-------------CONSUMOS-------------------------------------------",
        "info": "",
        "x": 220,
        "y": 3300,
        "wires": []
    },
    {
        "id": "92b84216fcbaf92b",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "RESETCONSUMOS",
        "func": "flow.set (\"RESETCONSUMOS\",1)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "01cdf8ed5a2a427f",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "ANÁLISIS DE CONSUMOS",
        "func": "// Obtenemos el objeto recibido (msg.payload)\nlet objeto = msg.payload;\n\n// Iteramos sobre las variables \"AdicionalT1\" a \"AdicionalT15\"\nfor (let z = 1; z <= 15; z++) {\n    // Obtenemos el nombre de la variable AdicionalTi desde el flujo\n    let adicional = flow.get(\"AdicionalT\" + z);\n\n    // Si la variable AdicionalTi no es null o undefined, la agregamos al objeto\n    if (adicional !== null && adicional !== undefined) {\n        // Obtenemos el valor de la variable adicional desde el flujo\n        let valorAdicional = flow.get(adicional);\n\n        // Si la variable adicional tiene un valor, la agregamos al objeto\n        if (valorAdicional !== null && valorAdicional !== undefined) {\n            // Agregamos la clave y el valor al objeto\n            objeto[adicional] = valorAdicional;\n        }\n    }\n}\n\n// Devolvemos el objeto modificado\nmsg.payload = objeto;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1080,
        "wires": [
            [
                "ea8443157d17843a",
                "4f80e0f7f91fea3f"
            ]
        ]
    },
    {
        "id": "b52ac7311eeb3f03",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "NUEVO ADICIONAL (TOTALIZACIÓN)",
        "props": [
            {
                "p": "AdicionalT1",
                "v": "99AIRECOMPRIMIDO(Wh)",
                "vt": "str"
            },
            {
                "p": "AdicionalT2",
                "v": "99CONSUMOAGUA(Lh)",
                "vt": "str"
            },
            {
                "p": "AdicionalT3",
                "v": "99ELECTRICIDAD(Wh)",
                "vt": "str"
            },
            {
                "p": "AdicionalT4",
                "v": "99VAPOR(gv/h)",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 560,
        "y": 820,
        "wires": [
            [
                "bde8c94e3aee0bba"
            ]
        ]
    },
    {
        "id": "bde8c94e3aee0bba",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"AdicionalT1\", msg.AdicionalT1);\nflow.set(\"AdicionalT2\", msg.AdicionalT2);\nflow.set(\"AdicionalT3\", msg.AdicionalT3);\nflow.set(\"AdicionalT4\", msg.AdicionalT4);\nflow.set(\"AdicionalT5\", msg.AdicionalT5);\nflow.set(\"AdicionalT6\", msg.AdicionalT6);\nflow.set(\"AdicionalT7\", msg.AdicionalT7);\nflow.set(\"AdicionalT8\", msg.AdicionalT8);\nflow.set(\"AdicionalT9\", msg.AdicionalT9);\nflow.set(\"AdicionalT10\", msg.AdicionalT10);\nflow.set(\"AdicionalT11\", msg.AdicionalT11);\nflow.set(\"AdicionalT12\", msg.AdicionalT12);\nflow.set(\"AdicionalT13\", msg.AdicionalT13);\nflow.set(\"AdicionalT14\", msg.AdicionalT14);\nflow.set(\"AdicionalT15\", msg.AdicionalT15);\n\nmsg.payload = msg.payload\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "bd9ce94aaa5662e1",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "DECLARACION Y TOTALIZACIÓN DE CONSUMOS",
        "func": "// Obtenemos el orden de lectura desde el flujo\nlet lotec = flow.get(\"LOTEC\");\nvar resetconsumos = flow.get(\"RESETCONSUMOS\");\n\n// Obtenemos el objeto de energía desde el payload\nlet energia = msg.payload; // Suponemos que el payload contiene el objeto con las variables\n\n// Si el orden de lectura es 0, significa que es una nueva lectura y debemos resetear las variables\nif (lotec === 0 || resetconsumos === 1) {\n    // Reseteamos las variables finales directamente al comenzar una nueva lectura\n    Object.keys(energia).forEach(clave => {\n        flow.set(clave, 0); // Inicializamos a 0 en el flujo como número\n        flow.set(\"RESETCONSUMOS\", 0);\n    });\n    node.warn(\"Variables reseteadas a cero.\"); // Mensaje de depuración opcional\n\n} else if (lotec !== 0) { // Si el orden de lectura no es 0, acumulamos los valores\n    // Fase de acumulación: iteramos sobre las claves de 'energia' y acumulamos los valores directamente\n    for (let clave in energia) {\n        // Aseguramos que la clave sea una propiedad propia\n        if (energia.hasOwnProperty(clave)) {\n            // Intentamos convertir el valor a número; manejamos NaN y valores inválidos\n            let valorNumerico = parseFloat(energia[clave]);\n            if (isNaN(valorNumerico)) {\n                node.warn(`Valor inválido para clave ${clave}: ${energia[clave]}`);\n                continue; // Saltamos a la siguiente clave en caso de error\n            }\n\n            // Convertimos kW/h a kW/s (dividimos entre 3600)\n            let valorPorSegundo = valorNumerico / 3600;\n\n            // Obtenemos el valor acumulado actual desde el flujo\n            let valorAcumulado = flow.get(clave) || 0;\n\n            // Sumamos el valor convertido al acumulado\n            let nuevoValor = valorAcumulado + valorPorSegundo;\n\n            // Redondeo a 2 decimales\n            let valoredondeado = parseFloat(nuevoValor.toFixed(2));\n\n            // Guardamos el valor numérico en el flujo para cálculos futuros\n            flow.set(clave, valoredondeado);\n        }\n    }\n    node.warn(\"Acumulación completada.\"); // Mensaje de depuración opcional\n\n} else {\n    // Si el orden de lectura es un valor no esperado\n    node.warn(`Orden de lectura no reconocido: ${lotec}`);\n}\n\n// Agregamos sufijo al final para mostrar (sin afectar cálculos)\nObject.keys(energia).forEach(clave => {\n    let valorConSufijo = `${flow.get(clave)} kw/h`;\n    node.warn(`Clave: ${clave}, Valor con sufijo: ${valorConSufijo}`);\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "4f80e0f7f91fea3f",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "TESTER",
        "func": "flow.set (\"TEST\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "7051c4ebe5cbd198",
        "type": "inject",
        "z": "b29fc04ec927643e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 850,
        "y": 1260,
        "wires": [
            [
                "f1401e377003987e"
            ]
        ]
    },
    {
        "id": "f1401e377003987e",
        "type": "function",
        "z": "b29fc04ec927643e",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"ORDEN_LECTURA_general\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "dbc722b3c18b6898",
        "type": "switch",
        "z": "b29fc04ec927643e",
        "name": "",
        "property": "4FASE",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "Reposo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Arranque Inicial",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Reposo",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 4350,
        "y": 180,
        "wires": [
            [
                "6161c7bf6d42c009"
            ],
            [
                "6161c7bf6d42c009"
            ],
            [
                "5577c8c240735087"
            ]
        ]
    },
    {
        "id": "99dfde706cbaef32",
        "type": "debug",
        "z": "b29fc04ec927643e",
        "name": "BLOCK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4380,
        "y": 140,
        "wires": []
    },
    {
        "id": "93f9755094e7464d",
        "type": "comment",
        "z": "b29fc04ec927643e",
        "name": "FASE OLD ",
        "info": "DB17,S772.50",
        "x": 200,
        "y": 1040,
        "wires": []
    },
    {
        "id": "78473015d67a9758",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "------------------------------------------------------------------------*ESCRITURA EN GENERAL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2020,
        "y": 700,
        "wires": []
    },
    {
        "id": "efc2dcb731367d9a",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "648638266bb1760b",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = 'EXPEDICION'\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 340,
        "wires": [
            [
                "66f4ba74f091cf38"
            ]
        ]
    },
    {
        "id": "66f4ba74f091cf38",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 340,
        "wires": []
    },
    {
        "id": "bc073d96adf851eb",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Escritura en Tabla de Sensor",
        "func": "/*Este nodo prepara el Query para almacenar la información\ndel sensor proveniente del PLC en su lugar correspondiente.\nEsto solo se procesa si la orden de lectura de este sensor\nse encuentra activa\n*/\nmsg.payload = flow.get('Objeto');\n\nif (flow.get('NumSensor') <= flow.get('MaxSensor') && msg.payload[ + flow.get('Sensor' + flow.get('NumSensor'))] == true) {\n    var tableName = flow.get('Sensor' + flow.get('NumSensor'));\n    var datetime = flow.get('FechaHora');\n    var value = msg.payload[flow.get('NumSensor')];\n    var dbName = flow.get('DBname');\n      \n   var topic = \"INSERT INTO \" + dbName + \".\" + tableName + \" (FechaHora, Unidad) VALUES ('\" + datetime + \"', '\" + value + \"');\";\n   \n\n    msg.queryCompresion = \"SELECT Valor FROM \" + flow.get('DBname') + \".\" + tableName + \" ORDER BY FechaHora DESC LIMIT 1;\";\n\n    msg.topic = topic;\n    flow.set(\"queryValor\", msg.topic);\n    msg.payload = 0;\n    return msg;\n} else {\n    msg.payload = 1;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 2240,
        "wires": [
            [
                "394ab1fc575a59d6",
                "b3acd3495a83518c",
                "e4bbd0d128a39eb1"
            ]
        ]
    },
    {
        "id": "735e8bd9b32e5b6c",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1220,
        "wires": [
            [
                "0e25625205f9a2f2"
            ]
        ]
    },
    {
        "id": "6116d3d3bc155646",
        "type": "switch",
        "z": "15dbec24b3a42a2e",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1220,
        "wires": [
            [
                "f7f9cf16e4794caf"
            ],
            [
                "735e8bd9b32e5b6c"
            ]
        ]
    },
    {
        "id": "0e25625205f9a2f2",
        "type": "switch",
        "z": "15dbec24b3a42a2e",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1220,
        "wires": [
            [
                "e3bc6f96b1346255"
            ],
            [
                "cdbfeb11edd9dd55"
            ]
        ]
    },
    {
        "id": "43ae6a93b298d83d",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LOOP DEVOLUCION O ERROR",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1160,
        "wires": [
            [
                "c997c7ecf7048354"
            ]
        ]
    },
    {
        "id": "c997c7ecf7048354",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<12){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "6116d3d3bc155646"
            ]
        ]
    },
    {
        "id": "cdbfeb11edd9dd55",
        "type": "delay",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2600,
        "y": 1260,
        "wires": [
            [
                "c997c7ecf7048354"
            ]
        ]
    },
    {
        "id": "f7f9cf16e4794caf",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1160,
        "wires": [
            [
                "781204f0e57bb69b"
            ]
        ]
    },
    {
        "id": "b3acd3495a83518c",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2220,
        "wires": []
    },
    {
        "id": "7697477fe17853a1",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Definir_MaxSensor",
        "func": "/*Este nodo declara la variable de flow MaxSensores para conocer\ncuantos sensores hay definidos en la máquina\n*/\nvar valor = Object.values(msg.payload);\nflow.set('MaxSensor',valor['0']);\nmsg.payload = flow.get('MaxSensor');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 460,
        "wires": [
            [
                "bd6be6ebcac94d88",
                "9bf3a3c51580ce67"
            ]
        ]
    },
    {
        "id": "bd6be6ebcac94d88",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "Numero de sensores1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 460,
        "wires": []
    },
    {
        "id": "8e54561ad6334f7e",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Inicializacion del loop",
        "func": "/*Este nodo inicializa las variables necesarias para ciclar\nla información de cada uno de los sensores y escribirla en \nla tabla correspondiente en la BD de la máquina\n*/\n\nflow.set('NumSensor',1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 2200,
        "wires": [
            [
                "bc073d96adf851eb",
                "36e950d56b5a0beb"
            ]
        ]
    },
    {
        "id": "394ab1fc575a59d6",
        "type": "switch",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 2380,
        "wires": [
            [
                "c506aaeaea13b002"
            ],
            [
                "95081680f37b1ef1"
            ]
        ]
    },
    {
        "id": "95081680f37b1ef1",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "loop",
        "func": "if(flow.get('NumSensor')<flow.get('MaxSensor')){\n    flow.set('NumSensor',flow.get('NumSensor')+1);\n    msg.payload = flow.get('NumSensor');\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 2380,
        "wires": [
            [
                "bc073d96adf851eb"
            ]
        ]
    },
    {
        "id": "0b89b453406be14f",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Buscar Numero de sensores",
        "func": "/*Este nodo consulta la tabla Sensores para saber cuántas\nentradas existen en la tabla, siendo cada una de ellas\nun sensor\n*/\n\nmsg.topic = \"SELECT COUNT(*) FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 440,
        "wires": [
            [
                "df2a03b80bde1725"
            ]
        ]
    },
    {
        "id": "b76a938596d3800f",
        "type": "split",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2070,
        "y": 460,
        "wires": [
            [
                "7697477fe17853a1"
            ]
        ]
    },
    {
        "id": "c52d1bd459cecdc3",
        "type": "trigger",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1420,
        "y": 340,
        "wires": [
            [
                "648638266bb1760b",
                "0b89b453406be14f"
            ]
        ]
    },
    {
        "id": "4fa6edc0667fd4cb",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "FechaHora",
        "func": "/*Declara la valiable FechaHora que contiene la fecha y hora \nque será utilizada en el flow\n*/\nvar now = new Date(); \nvar año = now.getFullYear();\nvar mes = now.getMonth()+1; \nvar dia = now.getDate();\nvar hora = now.getHours();\nvar minuto = now.getMinutes();\nvar segundo = now.getSeconds(); \n\n\nif(mes.toString().length == 1) {\n    mes = '0'+mes;\n}\n\nif(dia.toString().length == 1) {\n    dia = '0'+dia;\n} \n\nif(hora.toString().length == 1) {\n    hora = '0'+hora;\n}\n\nif(minuto.toString().length == 1) {\n    minuto = '0'+minuto;\n    \n}\n\nif(segundo.toString().length == 1) {\n    segundo = '0'+segundo;\n} \n\n\nvar FechaHoralocal = año+'-'+mes+'-'+dia+' '+hora+':'+minuto+':'+segundo;\nflow.set('FechaHora',FechaHoralocal);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5cadc46463a12f13",
        "type": "rbe",
        "z": "15dbec24b3a42a2e",
        "name": "Block unless value changes",
        "func": "deadband",
        "gap": "0",
        "start": "1",
        "inout": "out",
        "septopics": true,
        "property": "payload['ORDEN_LECTURA_general']",
        "topi": "topic",
        "x": 2460,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "fb9bc184e3947fe1",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "EscrituraErrorCiclo",
        "func": "/*Este nodo se encarga de notificar que ha habido un error\ndurante el proceso de escritura, resultando en que el PLC\nno recibió la orden de setear la variable OrdenLectura a 0 y\ntuvo que avanzar de manera automática tras esperar la orden\ndurante 60 segundos sin resultado\n*/\nflow.set('ERROR_CICLO', msg.payload['ERROR_CICLO']);\n\nif (flow.get('ERROR_CICLO') == 1) {\n    msg.topic = \"INSERT INTO \" + flow.get('DBname') + \".General (error_ciclo) VALUES ('\";\n    msg.topic += flow.get('ERROR_CICLO') + \"');\";\n\n    msg.topic = msg.topic;\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1280,
        "wires": [
            [
                "e68d09ab242afee4"
            ]
        ]
    },
    {
        "id": "59b90fea3476a2bb",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Cantidad de producciones?",
        "func": "flow.set('CantidadProducciones',msg.payload['CantidadProducciones']);\nmsg.payload = flow.get('CantidadProducciones');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "71e098e6091fb34f",
                "b1d1f89f087ffef3"
            ]
        ]
    },
    {
        "id": "71e098e6091fb34f",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "CONSULTA3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 560,
        "wires": []
    },
    {
        "id": "603922994c9e8ca3",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Buscar info los sensores",
        "func": "/*Este nodo realiza un Query para obtener la informacion\ndel nombre de cada sensor para declararlos como variables de\nflow y que puedan ser utilizados en el apartado de *Escritura en Sensores*\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "6795401e6b3287f5"
            ]
        ]
    },
    {
        "id": "f40f71a009093aaa",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Declaracion de sensores",
        "func": "// Este nodo guarda el nombre de cada sensor en una variable de flujo para ser utilizada en este flujo\n\n// Obtener el valor actual de 'i' de la variable de flujo (si 'i' no está definida, se asumirá inicialmente como 0)\nvar i = flow.get('i') || 0;\n\n// Obtener el array de sensores del mensaje de entrada\nvar array = Object.values(msg.payload);\n\n// Iterar a través de cada sensor hasta el número máximo de sensores definido en 'MaxSensor'\nfor (; i < flow.get('MaxSensor') && i < array.length; i++) {\n    // Guardar el objeto sensor actual en una variable de flujo con un nombre único\n    flow.set('Sensor' + (i + 1), array[i].Sensor);\n}\n\n// Guardar el valor actual de 'i' en la variable de flujo\nflow.set('i', i);\n\n// Devolver el mensaje de entrada sin cambios\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 520,
        "wires": [
            [
                "a85ad95fc1a7bd50",
                "05629831e3f1cc8b"
            ]
        ]
    },
    {
        "id": "a85ad95fc1a7bd50",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "CONSULTA2(ARRAY) SENSORES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 520,
        "wires": []
    },
    {
        "id": "4fa916f6d5c3ae66",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "------------------------------------------------------------------------*DATOS DE MAQUINA*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de cada máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 730,
        "y": 640,
        "wires": []
    },
    {
        "id": "c3a2f3f9c3864251",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "Consultas de informacion necesaria para el programa",
        "info": "",
        "x": 1740,
        "y": 380,
        "wires": []
    },
    {
        "id": "916f6fbdc7fee54d",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "------------------------------------------------------------------------*ESCRITURA EN LAS TABLAS DE SENSOR Y ASIGNACIÓN DE ID*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2170,
        "y": 2140,
        "wires": []
    },
    {
        "id": "9fe8c19f6c7049cc",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "INSTRUCCIONES ------ POR FAVOR LEER PARA CORRECTA CONFIGURACIÓN DEL FLOW",
        "info": "INFORMACION PARA CONFIGURAR EL FLOW DE MAQUINA:\n\nCuando se quiera configurar este flow por primera vez el usuario debe editar 3 nodos:\n\n-`Definir_Maquina`: Se debe asignar a la variable Nombre el nombre que tenga nuestra máquina. (var Nombre = 'Nombre de la máquina')\n\n-`Definir_SQL`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo Connection. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro servidor de base de datos los campos Server, Port, Username y Password.\n\n-`Definir_PLC`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo PLC. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro PLC los campos Adress y Port bajo la pestaña Connection. Además, en la pestaña Variables debemos declarar la dirección y nombre de cada una de nuestras variables.\n\n`IMPORTANTE`: Recordar que el nombre que demos a las variables de sensores deben ser iguales que los otorgados a estos mismos sensores en las variables de sensor del flow `Añadir máquinas y sensores`",
        "x": 710,
        "y": 600,
        "wires": []
    },
    {
        "id": "1a8d50aa673d9f38",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "DEFINIR",
        "info": "",
        "x": 1960,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "3429043fff81c897",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "DEFINIR",
        "info": "",
        "x": 1620,
        "y": 300,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "a16eca3e69d7311f",
        "type": "delay",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 2200,
        "wires": [
            [
                "8e54561ad6334f7e"
            ]
        ]
    },
    {
        "id": "e3021d501f8d650a",
        "type": "delay",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "pauseType": "delay",
        "timeout": "700",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "fb9bc184e3947fe1"
            ]
        ]
    },
    {
        "id": "02db248ee6de285a",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Update Fin",
        "func": "msg.topic = \"UPDATE \" + flow.get('DBname') + \".General \";\nmsg.topic += \"SET Fin = '\" + flow.get('FechaHora') + \"';\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 920,
        "wires": [
            [
                "240b949a73b58643"
            ]
        ]
    },
    {
        "id": "2bca496c68aa4e68",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "REVISAR DELAY",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 900,
        "wires": []
    },
    {
        "id": "6d5918388593c31b",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "97ba3283246f626a",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "ef1d49e1c1d79371",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "fe4227bb2c0d2b53",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "720d11b7da3ab3cb",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "COMPROBACION ULTIMA FILA",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".General ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "21a8c2a0e3d71037",
                "384d1dcf2b22646e"
            ]
        ]
    },
    {
        "id": "e685e5008e9482eb",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "COMPARACION DE ARRAYS",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocal = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducido',arrayIntroducidolocal);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1100,
        "wires": [
            [
                "43ae6a93b298d83d"
            ]
        ]
    },
    {
        "id": "384d1dcf2b22646e",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e4bbd0d128a39eb1",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "b112ae0594f9d8cc",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Check Valores iguales",
        "func": "//recuperamos el valor de la ultima medida del sensor y lo comparamos con el que estamos a punto de introducir\n//si estos valores coinciden, en lugar de seguir con la escritura saltamos una iteracion en el loop\nmsg.payload = msg.payload[0];\nmsg.payload = msg.payload[\"Valor\"];\nflow.set(\"ValorPrevio\", msg.payload);\n\nmsg.payload = flow.get(\"Objeto\");\nvar sensorKey = 'Sensor' + flow.get('NumSensor');\nmsg.payload = msg.payload[sensorKey];\nflow.set(\"ValorActual\", msg.payload);\n\nif (flow.get(\"ValorPrevio\") !== flow.get(\"ValorActual\")) {\n    msg.topic = \"INSERT INTO \" + flow.get(\"DBname\") + \".Tabla (Valor) VALUES ('\" + flow.get(\"ValorActual\") + \"');\";\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 2220,
        "wires": [
            [
                "df226d08fcc47847",
                "ad9a3acbeeda2746"
            ]
        ]
    },
    {
        "id": "df226d08fcc47847",
        "type": "switch",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 2280,
        "wires": [
            [
                "9b659680e1103cb9"
            ],
            [
                "95081680f37b1ef1"
            ]
        ]
    },
    {
        "id": "c506aaeaea13b002",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Bypass compresion",
        "func": "if (flow.get(\"ModoCompresion\") == 1) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 2380,
        "wires": [
            [
                "c43c29b72cbdbe92"
            ]
        ]
    },
    {
        "id": "c43c29b72cbdbe92",
        "type": "switch",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2430,
        "y": 2380,
        "wires": [
            [
                "56950a23aad9f786"
            ],
            [
                "9b659680e1103cb9"
            ]
        ]
    },
    {
        "id": "fd953eca6029d3ad",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Modo Compresion",
        "func": "flow.set(\"ModoCompresion\",msg.payload);\nmsg.payload = \"Modo Compresion Status=\"+flow.get(\"ModoCompresion\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2500,
        "wires": [
            [
                "4d53337b3b52dcbf"
            ]
        ]
    },
    {
        "id": "3e670526b7a180c9",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1630,
        "y": 2480,
        "wires": [
            [
                "fd953eca6029d3ad"
            ]
        ]
    },
    {
        "id": "184dae0b96613826",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1630,
        "y": 2520,
        "wires": [
            [
                "fd953eca6029d3ad"
            ]
        ]
    },
    {
        "id": "ad9a3acbeeda2746",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "COMPRESSION",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 2220,
        "wires": []
    },
    {
        "id": "4d53337b3b52dcbf",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2500,
        "wires": []
    },
    {
        "id": "9f5683755513edc5",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "func": "\nvar signals = flow.get(\"Signals\");\n\nfor(var j =0;j <flow.get(\"NumSignals\");j++){\n    \n    flow.set(String(signals[j]),msg.payload[String(signals[j])]);\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 640,
        "wires": [
            [
                "e81da8be18c75313"
            ]
        ]
    },
    {
        "id": "e81da8be18c75313",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 640,
        "wires": []
    },
    {
        "id": "fd5bbbd5123e762a",
        "type": "split",
        "z": "15dbec24b3a42a2e",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1940,
        "y": 760,
        "wires": [
            [
                "3b7247ce87270bc5"
            ]
        ]
    },
    {
        "id": "3b7247ce87270bc5",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 760,
        "wires": [
            [
                "83f18eb30c49bc80"
            ]
        ]
    },
    {
        "id": "de90581c58de00c7",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "set variables auxiliares",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"Objeto\",msg.payload);\nflow.set(\"NumSignals\",Object.keys(flow.get(\"Objeto\")).length);\nflow.set(`j`,0);\nflow.set(\"PredefinedSignalsArray\",new Array(flow.get(\"NumSignals\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 760,
        "wires": [
            [
                "fd5bbbd5123e762a"
            ]
        ]
    },
    {
        "id": "83f18eb30c49bc80",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "18dc6c12e55b6838",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "CONSULTA4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1280,
        "wires": []
    },
    {
        "id": "9bf3a3c51580ce67",
        "type": "link out",
        "z": "15dbec24b3a42a2e",
        "name": "Numero de Sensores",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 460,
        "wires": []
    },
    {
        "id": "05629831e3f1cc8b",
        "type": "link out",
        "z": "15dbec24b3a42a2e",
        "name": "Info de los Sensores OBJECT",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 520,
        "wires": []
    },
    {
        "id": "b1d1f89f087ffef3",
        "type": "link out",
        "z": "15dbec24b3a42a2e",
        "name": "Cantidad de Producciones Number",
        "mode": "link",
        "links": [],
        "x": 2595,
        "y": 560,
        "wires": []
    },
    {
        "id": "36e950d56b5a0beb",
        "type": "link out",
        "z": "15dbec24b3a42a2e",
        "name": "INFO SENSOR TEXT",
        "mode": "link",
        "links": [],
        "x": 2215,
        "y": 2200,
        "wires": []
    },
    {
        "id": "be29df52c904b42e",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "REVISAR",
        "info": "UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1; : msg.topic : string[93]\n\"UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1;\"",
        "x": 1500,
        "y": 920,
        "wires": []
    },
    {
        "id": "45592a2589b18d5b",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "INSERT EN GENERAL",
        "func": "var signals = flow.get(\"Signals\");\nvar objeto = flow.get(\"Objeto\");\nvar dbName = flow.get(\"DBname\");\nvar fechaHora = flow.get(\"FechaHora\");\n\n// Construir la consulta SQL de inserción\nvar topic = \"INSERT INTO `\" + dbName + \"`.`General` VALUES (\";\n\n// Agregar la fecha y hora\ntopic += \"'\" + fechaHora + \"', \";\n\n// Agregar la primera señal\nvar firstSignal = signals[0];\nvar firstValor = objeto[firstSignal];\nif (typeof firstValor === 'string') {\n    topic += \"'\" + firstValor + \"'\";\n} else {\n    topic += firstValor;\n}\n\n// Agregar coma\ntopic += \", \";\n\n// Iterar a través del resto de las señales y construir los valores de la inserción\nfor (var k = 1; k < signals.length; k++) {\n    var signal = signals[k];\n\n    // Obtener el valor correspondiente del objeto\n    var valor = objeto[signal];\n\n    // Agregar el valor a la consulta SQL\n    if (typeof valor === 'string') {\n        // Si es una cadena, agregar comillas simples alrededor del valor\n        topic += \"'\" + valor + \"'\";\n    } else {\n        // De lo contrario, agregar el valor directamente\n        topic += valor;\n    }\n\n    // Agregar coma si no es el último valor\n    if (k < signals.length - 1) {\n        topic += \", \";\n    }\n}\n\n// Cerrar paréntesis de la consulta SQL de inserción\ntopic += \")\";\n\n// return the SQL query\nreturn {\n    topic: topic\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 980,
        "wires": [
            [
                "2bca496c68aa4e68",
                "8e62233a967a48e3"
            ]
        ]
    },
    {
        "id": "df2a03b80bde1725",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 460,
        "wires": [
            [
                "b76a938596d3800f",
                "603922994c9e8ca3"
            ]
        ]
    },
    {
        "id": "6795401e6b3287f5",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 520,
        "wires": [
            [
                "f40f71a009093aaa"
            ]
        ]
    },
    {
        "id": "240b949a73b58643",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 920,
        "wires": [
            [
                "45592a2589b18d5b"
            ]
        ]
    },
    {
        "id": "21a8c2a0e3d71037",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 1040,
        "wires": [
            [
                "e685e5008e9482eb"
            ]
        ]
    },
    {
        "id": "781204f0e57bb69b",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1160,
        "wires": [
            [
                "b81bac9694fdd8f7"
            ]
        ]
    },
    {
        "id": "e68d09ab242afee4",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1280,
        "wires": [
            [
                "18dc6c12e55b6838"
            ]
        ]
    },
    {
        "id": "56950a23aad9f786",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2570,
        "y": 2260,
        "wires": [
            [
                "b112ae0594f9d8cc"
            ]
        ]
    },
    {
        "id": "9b659680e1103cb9",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2970,
        "y": 2380,
        "wires": [
            [
                "95081680f37b1ef1"
            ]
        ]
    },
    {
        "id": "74e25391f0bb8c94",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "OVERRIDE DE O.L POR SENSOR",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "ad7ce1d2142a2f72",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "info": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "x": 2490,
        "y": 1060,
        "wires": []
    },
    {
        "id": "ff57178b9e9e9039",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "REVISAR",
        "info": "",
        "x": 2360,
        "y": 380,
        "wires": []
    },
    {
        "id": "a8246fcf1a019c8f",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3520,
        "y": 1060,
        "wires": []
    },
    {
        "id": "46e997c4ab0eece4",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "43e80705a88e2291",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1720,
        "wires": [
            [
                "477832722caeddca"
            ]
        ]
    },
    {
        "id": "149f26772e3d7255",
        "type": "switch",
        "z": "15dbec24b3a42a2e",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1720,
        "wires": [
            [
                "c18e775e31e1e95b"
            ],
            [
                "43e80705a88e2291"
            ]
        ]
    },
    {
        "id": "477832722caeddca",
        "type": "switch",
        "z": "15dbec24b3a42a2e",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1720,
        "wires": [
            [
                "ba56f1c393f7ea37"
            ],
            [
                "a04ee5401a8cde2d"
            ]
        ]
    },
    {
        "id": "c93f8c776e1a18c0",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "i for loop",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1660,
        "wires": [
            [
                "7382fe867231d667"
            ]
        ]
    },
    {
        "id": "7382fe867231d667",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<4){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1720,
        "wires": [
            [
                "149f26772e3d7255"
            ]
        ]
    },
    {
        "id": "a04ee5401a8cde2d",
        "type": "delay",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2590,
        "y": 1720,
        "wires": [
            [
                "7382fe867231d667"
            ]
        ]
    },
    {
        "id": "c18e775e31e1e95b",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".Errorlog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1660,
        "wires": [
            [
                "a3f63b666673a90b"
            ]
        ]
    },
    {
        "id": "ba56f1c393f7ea37",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "CORTE REBOBINADOR",
        "func": "if(flow.get('CORTE_REBOBINADOR')==1){\n        msg.payload=0;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 1720,
        "wires": [
            [
                "dee9286f887100d6",
                "d3cb4c749086c6af"
            ]
        ]
    },
    {
        "id": "199ad448c95a7fa6",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "199ce07ba0c22f38",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "2e55b647b97203b3",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "06d3fa81a50ca9c9",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "66af1453cb0496a1",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Control ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            [
                "db7ede47bfa9891a"
            ]
        ]
    },
    {
        "id": "436bd1bcc3cbfeb7",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "ArraysParaComparar",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocalcontrol = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducidocontrol',arrayIntroducidolocalcontrol);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1600,
        "wires": [
            [
                "c93f8c776e1a18c0"
            ]
        ]
    },
    {
        "id": "db7ede47bfa9891a",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1900,
        "y": 1540,
        "wires": [
            [
                "436bd1bcc3cbfeb7"
            ]
        ]
    },
    {
        "id": "a3f63b666673a90b",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "dee9286f887100d6",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "CORTE DESBOBINADOR",
        "func": "\n\nif(flow.get('CORTE_DESBOBINADOR')==1){\n        msg.payload=0;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3080,
        "y": 1660,
        "wires": [
            [
                "6df58540b187c7dc"
            ]
        ]
    },
    {
        "id": "4b4150a97e3d7b7f",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1910,
        "y": 1640,
        "wires": [
            [
                "149f26772e3d7255"
            ]
        ]
    },
    {
        "id": "d3cb4c749086c6af",
        "type": "delay",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3380,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "6df58540b187c7dc",
        "type": "delay",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3380,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "b3c10fae7bcc7358",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "------------------------------------------------------------------------*ESCRITURA EN CONTROL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2040,
        "y": 1340,
        "wires": []
    },
    {
        "id": "7a9ff97ceed51c3a",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "ESCRITURA EN LA TABLA DE CONTROL",
        "func": "// Obtener el payload del mensaje\nlet data = msg.payload;\n\n// Verificar si el payload es un string y convertirlo a objeto JSON\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\n// Inicializar un array para almacenar las consultas SQL\nlet sqlQueries = [];\n\n// Iterar sobre cada clave en el objeto de datos\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        // Construir la consulta SQL con una tabla estática y claves como columnas\n        let query = `INSERT INTO INT_maquina1.control (${key}) VALUES (\"${value}\")`;\n        sqlQueries.push(query);\n    }\n}\n\n// Devolver las consultas generadas en el payload del mensaje\nmsg.topic = sqlQueries.join(';');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1480,
        "wires": [
            [
                "f1b89d9ed4075487"
            ]
        ]
    },
    {
        "id": "d70c7613e998bf80",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1500,
        "wires": [
            [
                "66af1453cb0496a1"
            ]
        ]
    },
    {
        "id": "2e089f7ccda6df74",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "-----------------ORDEN------------",
        "func": "// Función para reordenar las variables dentro del paquete\nfunction reordenarPaquete(paquete) {\n    // Define el orden deseado de las variables\n    const ordenDeseado = [\"1LOTE\", \"2RECETA\", \"3PROCESO\", \"4FASE\", \"zAVANCE_MANUAL\", \"zABORTAR\", flow.get(\"Adicional1\"), flow.get(\"Adicional2\"), flow.get(\"Adicional3\"), flow.get(\"Adicional4\"), \"zerror_ciclo\"];\n\n    // Crea un nuevo objeto para almacenar las variables reordenadas\n    let paqueteOrdenado = {};\n\n    // Itera sobre el orden deseado\n    ordenDeseado.forEach(variable => {\n        // Verifica si la variable está presente en el paquete recibido\n        if (paquete.hasOwnProperty(variable)) {\n            // Agrega la variable al paquete ordenado\n            paqueteOrdenado[variable] = paquete[variable];\n        }\n    });\n\n    // Devuelve el paquete ordenado\n    return paqueteOrdenado;\n}\n\n// Llama a la función de reordenamiento con el paquete recibido como argumento\nmsg.payload= reordenarPaquete(msg.payload);\n\n// Devuelve el mensaje con el paquete ordenado\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1080,
        "wires": [
            [
                "de90581c58de00c7",
                "c52d1bd459cecdc3",
                "603922994c9e8ca3",
                "59b90fea3476a2bb",
                "4fa6edc0667fd4cb",
                "e3021d501f8d650a",
                "9f5683755513edc5",
                "a16eca3e69d7311f",
                "2f718bf407ef96fd"
            ]
        ]
    },
    {
        "id": "bf54cfeda5e0f148",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "DEFINIR ORDENES DE LECTURA",
        "info": "",
        "x": 2100,
        "y": 1580,
        "wires": []
    },
    {
        "id": "6bef068f7c68371d",
        "type": "json",
        "z": "15dbec24b3a42a2e",
        "name": "Envio del señales de control a la BDD",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1250,
        "y": 1460,
        "wires": [
            [
                "7a9ff97ceed51c3a"
            ]
        ]
    },
    {
        "id": "f1b89d9ed4075487",
        "type": "split",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2050,
        "y": 1440,
        "wires": [
            [
                "5645d0e34a00383a"
            ]
        ]
    },
    {
        "id": "43bcca09a3f8df8c",
        "type": "json",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2230,
        "y": 1440,
        "wires": [
            [
                "d70c7613e998bf80",
                "b2e12130811b5725"
            ]
        ]
    },
    {
        "id": "b2e12130811b5725",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "REV",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 1440,
        "wires": []
    },
    {
        "id": "8e62233a967a48e3",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 980,
        "wires": [
            [
                "720d11b7da3ab3cb",
                "3f42884701ee5486"
            ]
        ]
    },
    {
        "id": "127afb91cdc29ccb",
        "type": "split",
        "z": "15dbec24b3a42a2e",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 2900,
        "y": 1460,
        "wires": [
            [
                "cd58e2fcbc2a8294"
            ]
        ]
    },
    {
        "id": "cd58e2fcbc2a8294",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 1460,
        "wires": [
            [
                "d1f08d26fcce08b7"
            ]
        ]
    },
    {
        "id": "bd07ec9e9d894215",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "set variables Control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j`,0);\nflow.set(\"SeñalesdeControl\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2620,
        "y": 1440,
        "wires": [
            [
                "127afb91cdc29ccb"
            ]
        ]
    },
    {
        "id": "d1f08d26fcce08b7",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "f4c02e3af48e1337",
        "type": "json",
        "z": "15dbec24b3a42a2e",
        "name": "ORDEN_LECTURA_tipo = \"1\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1610,
        "y": 1860,
        "wires": [
            [
                "edf7a3b9fea48b61"
            ]
        ]
    },
    {
        "id": "edf7a3b9fea48b61",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO int_maquina1.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1920,
        "wires": [
            [
                "6d021c092ce84151"
            ]
        ]
    },
    {
        "id": "8d7d97f4c91943dc",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2160,
        "y": 1880,
        "wires": [
            [
                "7d5f6ea2cfb4100e"
            ]
        ]
    },
    {
        "id": "13f45658fbfe40f5",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "ENTRADAS SIEMENS PLC",
        "info": "\nEMAIL: \"~+TIEMPO,102.00;LITROS,204.00;HORAS:,1580.00\"",
        "x": 120,
        "y": 860,
        "wires": []
    },
    {
        "id": "d3fcac7b39a41810",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+int_maquina1\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === true) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1920,
        "wires": [
            [
                "a56707883fc1465b"
            ]
        ]
    },
    {
        "id": "4cbb5724e6f30652",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "CHECK O.L.",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+int_maquina1\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === true) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n            break; // Salir del bucle si encontramos una consulta permitida\n        } else if (controlValue === 0) {\n            // Si encontramos un control que es 0, simplemente continuar con el siguiente\n            node.warn(`El control para la tabla ${tableName} es 0. La consulta será descartada.`);\n            // Aquí no se hace nada porque el mensaje será descartado si no se encuentra ninguna consulta permitida\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, simplemente descartar el mensaje\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null; // Esto efectivamente descarta el mensaje sin detener el flujo\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1880,
        "wires": [
            [
                "d3fcac7b39a41810"
            ]
        ]
    },
    {
        "id": "6d021c092ce84151",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 2020,
        "wires": [
            [
                "4cbb5724e6f30652"
            ]
        ]
    },
    {
        "id": "2e13083ff002b7b6",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "Inserciones de sensores con O.L Independiente",
        "info": "",
        "x": 1840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "a56707883fc1465b",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+int_maquina1\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === true) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1960,
        "wires": [
            [
                "8d7d97f4c91943dc"
            ]
        ]
    },
    {
        "id": "0c5f66100fef293b",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "Inserciones de sensores con O.L General de Sensores",
        "info": "",
        "x": 2500,
        "y": 1800,
        "wires": []
    },
    {
        "id": "795353bdbbacd45a",
        "type": "switch",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1610,
        "y": 2060,
        "wires": [
            [
                "bfa6be19362dedfd"
            ]
        ]
    },
    {
        "id": "bfa6be19362dedfd",
        "type": "json",
        "z": "15dbec24b3a42a2e",
        "name": "ORDEN_LECTURA_tipo = \"2\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2470,
        "y": 2060,
        "wires": [
            [
                "b81261efae2b8776",
                "0313e0e96edac5d1"
            ]
        ]
    },
    {
        "id": "b81261efae2b8776",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO int_maquina1.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1980,
        "wires": [
            [
                "7ed436339e07f063"
            ]
        ]
    },
    {
        "id": "7ed436339e07f063",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1920,
        "wires": [
            [
                "cd9af535bd833186"
            ]
        ]
    },
    {
        "id": "cd9af535bd833186",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "CHECK O.L.",
        "func": "\nif (flow.get(\"ORDEN_LECTURA_sensores\") !== 1) {\n    node.warn('La orden de Lectura General de Sensores está apagada');\n} else {\n    \n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1860,
        "wires": [
            [
                "6608499088176689"
            ]
        ]
    },
    {
        "id": "6608499088176689",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2680,
        "y": 1860,
        "wires": [
            [
                "0313e0e96edac5d1"
            ]
        ]
    },
    {
        "id": "7d5f6ea2cfb4100e",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "debug sensores ind",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 2000,
        "wires": []
    },
    {
        "id": "0313e0e96edac5d1",
        "type": "debug",
        "z": "15dbec24b3a42a2e",
        "name": "debug sensores gnral",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 1960,
        "wires": []
    },
    {
        "id": "1efdd58ff32c3283",
        "type": "switch",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1350,
        "y": 1960,
        "wires": [
            [
                "f4c02e3af48e1337"
            ],
            [
                "795353bdbbacd45a"
            ],
            [
                "7c5df551f86f7534"
            ]
        ]
    },
    {
        "id": "1509f0f715fa5191",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "set O.L. EMAIL S1C",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ac38bc9c233553ed",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "1509f0f715fa5191"
            ]
        ]
    },
    {
        "id": "074978fb57da1d8f",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "set O.L. EMAIL D1C",
        "func": "\nflow.set(\"D1C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "facb83f408d5e32f",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "074978fb57da1d8f"
            ]
        ]
    },
    {
        "id": "c5e5596f7e0e1680",
        "type": "template",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "0ca6f70e2ebc3161"
            ]
        ]
    },
    {
        "id": "0ca6f70e2ebc3161",
        "type": "rbe",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "1509f0f715fa5191"
            ]
        ]
    },
    {
        "id": "eba6fe1192ef610e",
        "type": "websocket in",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "c5e5596f7e0e1680"
            ]
        ]
    },
    {
        "id": "e0a60d9be74ae7e3",
        "type": "template",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "2dd1f0e89273bf88"
            ]
        ]
    },
    {
        "id": "2dd1f0e89273bf88",
        "type": "rbe",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "074978fb57da1d8f"
            ]
        ]
    },
    {
        "id": "9623fb7cf982977e",
        "type": "websocket in",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "e0a60d9be74ae7e3"
            ]
        ]
    },
    {
        "id": "369be18e78a4b2c6",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "NOTIFICACIONES DE TRAZABILIDAD POR EMAIL.",
        "info": "",
        "x": 4450,
        "y": 80,
        "wires": []
    },
    {
        "id": "2533a73b2f369791",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "074978fb57da1d8f"
            ]
        ]
    },
    {
        "id": "3abf83eefea0b712",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "1509f0f715fa5191"
            ]
        ]
    },
    {
        "id": "7c5df551f86f7534",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "BLOCK \"0\"",
        "func": "msg.payload=node.warn(\"Lectura de Sensores Apagada\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "b31711ac78d8b969",
        "type": "split",
        "z": "15dbec24b3a42a2e",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1660,
        "y": 1380,
        "wires": [
            [
                "be5318248d110ee3"
            ]
        ]
    },
    {
        "id": "be5318248d110ee3",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Declaracion Señales DE CONTROL",
        "func": "var CSignals = msg.signals;\n\nvar CSignalsLocal = flow.get(\"ControlSignalsArray\");\n\nCSignalsLocal[flow.get('j1')]=CSignals;\n\nflow.set('j1',flow.get('j1')+1);\n\nif(flow.get(\"j1\")==flow.get(\"NumSignalsControl\")){\n    flow.set(\"CSignals\",CSignalsLocal);\n}\n\nmsg.payload = msg.CSignals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1380,
        "wires": [
            [
                "e948a94d557e0b20"
            ]
        ]
    },
    {
        "id": "a3bd61ec761e1ada",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "set variables de control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j1`,0);\nflow.set(\"ControlSignalsArray\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1380,
        "wires": [
            [
                "b31711ac78d8b969"
            ]
        ]
    },
    {
        "id": "e948a94d557e0b20",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j1\") == flow.get(\"NumSignalsControl\")) {\n    msg.payload = flow.get(\"ObjetoControl\");\n\n    var signals = flow.get(\"CSignals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignalsControl\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "50f2f24ac7e32bdd",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3520,
        "y": 1320,
        "wires": []
    },
    {
        "id": "a1cabb29d3130c46",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "set  TIPO O.L.",
        "func": "\nflow.set(\"ORDEN_LECTURA_tipo\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "479528925859a3a7",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 650,
        "y": 120,
        "wires": [
            [
                "a1cabb29d3130c46"
            ]
        ]
    },
    {
        "id": "fc4bfabf690b84ea",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "set O.L.Sensores",
        "func": "\nflow.set(\"ORDEN_LECTURA_sensores\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0e491ecd0e2c1dbd",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 790,
        "y": 340,
        "wires": [
            [
                "fc4bfabf690b84ea"
            ]
        ]
    },
    {
        "id": "016b10b19d8d950f",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "Modelo de funcionamiento con ordenes de lectura Individuales o General",
        "info": "",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "b8cfc99312cfffb1",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "set  TIPO O.L.",
        "func": "\nflow.set(\"ORDEN_LECTURA_tipo\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a9b3c727a4be20d9",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 910,
        "y": 120,
        "wires": [
            [
                "b8cfc99312cfffb1"
            ]
        ]
    },
    {
        "id": "16326958bb35130e",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "OVERRIDE DE O.L General Sensores",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "5645d0e34a00383a",
        "type": "split",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2190,
        "y": 1400,
        "wires": [
            [
                "43bcca09a3f8df8c"
            ]
        ]
    },
    {
        "id": "d93bbb99d5464f65",
        "type": "s7 in",
        "z": "15dbec24b3a42a2e",
        "endpoint": "09e88552561654c6",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 210,
        "y": 1080,
        "wires": [
            [
                "2e089f7ccda6df74"
            ]
        ]
    },
    {
        "id": "609c213b586ae92a",
        "type": "s7 in",
        "z": "15dbec24b3a42a2e",
        "endpoint": "8f104a4c67c84aaf",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 230,
        "y": 1380,
        "wires": [
            [
                "a3bd61ec761e1ada",
                "d0fb1c34a4de68c9"
            ]
        ]
    },
    {
        "id": "3f42884701ee5486",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "SELECT LAST ROW",
        "func": "var controlemail= flow.get(\"CONTROL_EMAIL\");\nif (controlemail===1){\nmsg.topic= \"SELECT * FROM INT_\"+flow.get (\"Maquina\")+\".General ORDER BY 'FechaHora' DESC LIMIT 1;\";\nreturn msg;}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 980,
        "wires": [
            [
                "96db31e8602ffa2a"
            ]
        ]
    },
    {
        "id": "96db31e8602ffa2a",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2480,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "ddde485450107ced",
        "type": "json",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 4070,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6609c7a2dd1c7e95",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "DEFINIR ADICIONALES",
        "props": [
            {
                "p": "Adicional1",
                "v": "MATRICULA",
                "vt": "str"
            },
            {
                "p": "Adicional2",
                "v": "ORIGEN",
                "vt": "str"
            },
            {
                "p": "Adicional3",
                "v": "CONDUCTOR",
                "vt": "str"
            },
            {
                "p": "Adicional4",
                "v": "CLIENTE",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 870,
        "y": 940,
        "wires": [
            [
                "6a5220eaf5d23759"
            ]
        ]
    },
    {
        "id": "6a5220eaf5d23759",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"Adicional1\", msg.Adicional1);\nflow.set(\"Adicional2\", msg.Adicional2);\nflow.set(\"Adicional3\", msg.Adicional3);\nflow.set(\"Adicional4\", msg.Adicional4);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "6a0d77b28455d7f2",
        "type": "s7 out",
        "z": "15dbec24b3a42a2e",
        "endpoint": "8f104a4c67c84aaf",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 3660,
        "y": 1180,
        "wires": []
    },
    {
        "id": "ac527d15ff3717cc",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "ORDEN DE LECTURA GENERAL BLOCK",
        "func": "// Obtener los valores de las variables de flujo\nconst ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nconst latenciaOrdenLectura = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 1\nif (ordenLectura === 1) {\n    // Si ORDEN_LECTURA_general es 1, verificar la latencia\n    if (latenciaOrdenLectura === 1) {\n        // Si la latencia es 1, bloquear la ejecución\n        node.error(\"LATENCIA_ORDEN_LECTURA_general es 1, bloqueo de flujo\", msg);\n        return null; // Detener el flujo\n    } else {\n        // Si la latencia no es 1, continuar el flujo\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n        return msg;\n    }\n} else {\n    // Si ORDEN_LECTURA_general no es 1, bloquear la ejecución\n    node.error(\"ORDEN_LECTURA_general no es 1, bloqueo de flujo\", msg);\n    return null; // Detener el flujo\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 860,
        "wires": [
            [
                "45592a2589b18d5b"
            ]
        ]
    },
    {
        "id": "2f718bf407ef96fd",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Check Latencia",
        "func": "// Obtener el valor de ORDEN_LECTURA_general\nvar ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 0 o 2\nif (ordenLectura === 0 || ordenLectura === 2) {\n    // Si es 0 o 2, establecer la latencia en el valor actual de ORDEN_LECTURA_general\n    flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 0);\n    return msg;\n}else{\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 860,
        "wires": [
            [
                "ac527d15ff3717cc"
            ]
        ]
    },
    {
        "id": "e3bc6f96b1346255",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "ORDEN_LECTURA_G(OK)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=2;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 1200,
        "wires": [
            [
                "6a0d77b28455d7f2",
                "5833b5d18a0342c8"
            ]
        ]
    },
    {
        "id": "b81bac9694fdd8f7",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "ORDEN_LECTURA_G(KO)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=3;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 1160,
        "wires": [
            [
                "6a0d77b28455d7f2"
            ]
        ]
    },
    {
        "id": "3b21e7191a99b8ca",
        "type": "e-mail",
        "z": "15dbec24b3a42a2e",
        "server": "grupointegra-com-es.correoseguro.dinaserver.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Envio Email",
        "x": 5150,
        "y": 160,
        "wires": []
    },
    {
        "id": "3fa6c2796aa98aec",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 4380,
        "y": 160,
        "wires": [
            [
                "2cd40b07d1e6eccf"
            ]
        ]
    },
    {
        "id": "befcf201e657d80b",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "SELECT",
        "func": "var Lote = flow.get(\"1LOTE\");\nvar Maquina = flow.get(\"DBname\");\n\n// Asegurarse de que Lote se concatene como string con comillas simples\nvar query = \"SELECT 4FASE, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM \" + Maquina + \".General WHERE 1LOTE = '\" + Lote + \"';\";\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4200,
        "y": 160,
        "wires": [
            [
                "3fa6c2796aa98aec"
            ]
        ]
    },
    {
        "id": "2444e08f4a7d29e0",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Template Correo E ",
        "func": "// Recupera el contenido del payload\nlet content = flow.get(\"CONTENIDO_EMAIL\");\nlet RECETA = flow.get(\"RECETA\") || \"No disponible\";\nvar LOTE = flow.get(\"1LOTE\") || \"No disponible\";\nvar FASE = flow.get(\"4FASE\") || \"No disponible\";\nvar OPERARIO = flow.get(\"5OPERARIO\") || \"No disponible\";\nvar PROCESO = flow.get(\"3PROCESO\") || \"No disponible\";\nvar PROVEEDOR = flow.get(\"PROVEEDOR\") || \"No disponible\";\nvar MATRICULA = flow.get(\"MATRICULA\") || \"No disponible\";\nvar CONDUCTOR = flow.get(\"CONDUCTOR\") || \"No disponible\";\nvar DESTINO = flow.get(\"DESTINO\") || \"No disponible\";\nvar Registro = msg.payload;  // El payload ya debe contener el JSON parseado.\n\n// Verifica que el contenido de Registro sea un array y construye una tabla\nlet registroTable = \"\";\n\nif (Array.isArray(Registro)) {\n    registroTable = `\n        <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse: collapse;\">\n            <thead>\n                <tr>\n                    <th>FASE</th>\n                    <th>LITROS</th>\n                    <th>Fecha y Hora</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${Registro.map(reg => `\n                    <tr>\n                        <td>${reg['4FASE'] || \"No disponible\"}</td>\n                        <td>${reg.LITROS}</td>\n                        <td>${reg.Fechahora}</td>\n                    </tr>`).join('')}\n            </tbody>\n        </table>\n    `;\n} else {\n    registroTable = `<p>No se encontraron registros válidos.</p>`;\n}\n\n// Crea la lista HTML a partir de las partes de content\nlet items = content.split(';').map(item => `<li>${item.trim()}</li>`).join('\\n');\n\n// Arma el contenido HTML completo con la tabla\nmsg.payload = `\n    <html>\n        <body>\n            <h1>Alerta de Trazabilidad:</h1>\n            <p>En este documento puede encontrar los datos de la línea: ${flow.get(\"Maquina\")}</p>\n            <ul>\n                <li>Lote: ${LOTE}</li>\n                <li>Proceso: ${PROCESO}</li>\n                <li>Proveedor: ${PROVEEDOR}</li>\n                <li>Matricula: ${MATRICULA}</li>\n                <li>Conductor: ${CONDUCTOR}</li>\n                <li>Operario: ${OPERARIO}</li>\n                <li>Destino: ${DESTINO}</li>\n            </ul>\n            <h2>Registros:</h2>\n            ${registroTable}\n            <img src=\"cid:miImagen\" alt=\"Imagen Incrustada\" />\n        </body>\n    </html>\n`;\n\n// Especifica que se trata de contenido HTML\nmsg.html = msg.payload;\n\n// Configura el mensaje\nmsg.to = \"breixoherrera1@gmail.com\";\nmsg.topic = \"Datos de la línea Recepción. Lote:\" +flow.get(\"1LOTE\");\nmsg.attachments = [\n    {\n        filename: \"Logo.jpg\", // Cambia esto por el nombre de tu imagen\n        path: \"/home/intboxes/Documents/Logo.jpg\", // Cambia esto por la ruta a tu imagen\n        cid: \"miImagen\"  // cid debe coincidir con el del HTML\n    }\n];\n\n// Envía el mensaje\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4830,
        "y": 160,
        "wires": [
            [
                "3b21e7191a99b8ca",
                "9a6209bb6b5553e5"
            ]
        ]
    },
    {
        "id": "2cd40b07d1e6eccf",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "Conversion a JSON String",
        "func": "// Verifica si el payload es un string y lo convierte a JSON\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (error) {\n        node.error(\"El payload no es un JSON válido: \" + error);\n        return;\n    }\n}\n\n// Retorna el mensaje con el payload convertido\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4600,
        "y": 160,
        "wires": [
            [
                "2444e08f4a7d29e0"
            ]
        ]
    },
    {
        "id": "434291c065109e08",
        "type": "s7 out",
        "z": "15dbec24b3a42a2e",
        "endpoint": "f3ca9ac4bcf4b2a8",
        "variable": "CONTROL_EMAIL",
        "name": "",
        "x": 5170,
        "y": 200,
        "wires": []
    },
    {
        "id": "9a6209bb6b5553e5",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "CONFIRMACION AL PLC",
        "func": "msg.payload = 2;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4850,
        "y": 200,
        "wires": [
            [
                "434291c065109e08"
            ]
        ]
    },
    {
        "id": "5833b5d18a0342c8",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "¿O.L EMAIL?",
        "func": "if (flow.get(\"CONTROL_EMAIL\") === 1) {\n   \n    // Continuar el flujo si el valor es 1\n    msg.payload =1 \n return msg;\n \n} else {\n    // Bloquear ejecución enviando un mensaje de error\n    node.error(\"EMAIL EN PROCESO\", msg);\n    return null; // Detener el flujo\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3760,
        "y": 800,
        "wires": [
            [
                "ddde485450107ced"
            ]
        ]
    },
    {
        "id": "2cdac47bba9de363",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "------------------------------------------------------------------------*GESTION DE TABLA DE LOTES*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2080,
        "y": 2840,
        "wires": []
    },
    {
        "id": "4482b0b52d9efb05",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "------------------------------------------------------------------------RESPUESTA ERROR DE CICLO--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2070,
        "y": 2620,
        "wires": []
    },
    {
        "id": "d0fb1c34a4de68c9",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "COMPROBACIÓN DE ERROR DE CICLO",
        "func": "// Aqui se revisa si el error de ciclo e encuentra activo cuando no se está leyendo y se pone a 0 en el PLC.\nvar errorciclo = flow.get(\"zerror_ciclo\");\nvar OL = flow.get(\"ORDEN_LECTURA_general\");\nif(errorciclo === true && OL === 0 ){\nmsg.payload = 2\n}else{\nreturn null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 2700,
        "wires": [
            [
                "e3cf06204e00022a"
            ]
        ]
    },
    {
        "id": "e3cf06204e00022a",
        "type": "s7 out",
        "z": "15dbec24b3a42a2e",
        "endpoint": "8f104a4c67c84aaf",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 2180,
        "y": 2700,
        "wires": []
    },
    {
        "id": "b18863763fabbff4",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 240,
        "y": 1000,
        "wires": []
    },
    {
        "id": "0db119643b8c72dc",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 240,
        "y": 1120,
        "wires": []
    },
    {
        "id": "2be7c873fb873b64",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 230,
        "y": 1300,
        "wires": []
    },
    {
        "id": "44629eb2e6fb18a8",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 230,
        "y": 1440,
        "wires": []
    },
    {
        "id": "47854be40e0a4173",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 230,
        "y": 1880,
        "wires": []
    },
    {
        "id": "ce1de7b688e8600c",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 230,
        "y": 2000,
        "wires": []
    },
    {
        "id": "2346b3eec215b029",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "-------------------------DECLARACIÓN DE ADICIONALES GENERALES---------------------------------",
        "info": "",
        "x": 1000,
        "y": 860,
        "wires": []
    },
    {
        "id": "ff474417727473e5",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1400,
        "y": 2720,
        "wires": [
            [
                "d0fb1c34a4de68c9"
            ]
        ]
    },
    {
        "id": "edb8118b90a92e88",
        "type": "inject",
        "z": "15dbec24b3a42a2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1400,
        "y": 3000,
        "wires": [
            [
                "172d09b477378c08"
            ]
        ]
    },
    {
        "id": "4d607cc38533537f",
        "type": "s7 out",
        "z": "15dbec24b3a42a2e",
        "endpoint": "",
        "variable": "",
        "name": "",
        "x": 1990,
        "y": 3060,
        "wires": []
    },
    {
        "id": "172d09b477378c08",
        "type": "function",
        "z": "15dbec24b3a42a2e",
        "name": "ORDEN_LECTURA_LOTE(ok)",
        "func": "// Obtener las variables necesarias de flujo\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_LOTE\");\nvar OPERARIO = flow.get(\"5OPERARIO\"); // Asegurarse de que \"5OPERARIO\" es una variable válida de flujo\nvar LOTEC = flow.get(\"LOTEC\");\nvar Lote = flow.get(\"1LOTE\");\n\n// Reset de latencia si LOTEC es 0, 2 o 4\nif (LOTEC === 0 || LOTEC === 2 || LOTEC === 4) {\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 0);\n  \n}\n\n// Orden para iniciar el lote (LOTEC = 1)\nif (LOTEC === 1 && latencia === 0) {\n    msg.payload = 2;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    \n  // Consulta SQL para insertar un nuevo lote e iniciar el lote con hora de inicio\n    msg.topic = `INSERT INTO INT_RECEPCION.LOTE (1LOTE, FechaInicioLote, FechaFinLote, 5OPERARIO)\n                 VALUES ('${Lote}', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '${OPERARIO}');`;\n\nreturn msg;\n}\n\n// Orden para finalizar el lote (LOTEC = 3)\nif (LOTEC === 3 && latencia === 0) {\n    msg.payload = 4;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de finalización del lote más reciente\n    msg.topic = `UPDATE INT_RECEPCION.LOTE \n                 SET FechaFinLote = CURRENT_TIMESTAMP \n                 WHERE 1LOTE = '${Lote}' \n                 ORDER BY FechaInicioLote DESC \n                 LIMIT 1;`;\nreturn msg;\n}else{\nreturn null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 3000,
        "wires": [
            [
                "4d607cc38533537f",
                "e424499f1012af8d"
            ]
        ]
    },
    {
        "id": "e424499f1012af8d",
        "type": "mysql",
        "z": "15dbec24b3a42a2e",
        "mydb": "884e4ae10df762d0",
        "name": "",
        "x": 1990,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "54dd467335aa8a44",
        "type": "comment",
        "z": "15dbec24b3a42a2e",
        "name": "NO HAY SENSORES DECLARADOS EN ESTA LÍNEA",
        "info": "",
        "x": 220,
        "y": 1940,
        "wires": []
    },
    {
        "id": "9062ad9634dad4eb",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "------------------------------------------------------------------------*ESCRITURA EN GENERAL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2020,
        "y": 700,
        "wires": []
    },
    {
        "id": "4537d4fbaa234cd2",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "2e130a78a330c796",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = 'RECEPCION'\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 340,
        "wires": [
            [
                "3edbc65752f13769"
            ]
        ]
    },
    {
        "id": "3edbc65752f13769",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 320,
        "wires": []
    },
    {
        "id": "b23ba22b106d30fd",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1220,
        "wires": [
            [
                "2aba92d22052b1e2"
            ]
        ]
    },
    {
        "id": "358258ec977710d8",
        "type": "switch",
        "z": "aef79f16fb0c6fb5",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1220,
        "wires": [
            [
                "f90d1b0ff672d097"
            ],
            [
                "b23ba22b106d30fd"
            ]
        ]
    },
    {
        "id": "2aba92d22052b1e2",
        "type": "switch",
        "z": "aef79f16fb0c6fb5",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1220,
        "wires": [
            [
                "90b65a0ea2ca7705"
            ],
            [
                "4fc6cc2219672273"
            ]
        ]
    },
    {
        "id": "be1bdf1a4d2355c9",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LOOP DEVOLUCION O ERROR",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1160,
        "wires": [
            [
                "ab3ffc3e9943daeb"
            ]
        ]
    },
    {
        "id": "ab3ffc3e9943daeb",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<12){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "358258ec977710d8"
            ]
        ]
    },
    {
        "id": "4fc6cc2219672273",
        "type": "delay",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2600,
        "y": 1260,
        "wires": [
            [
                "ab3ffc3e9943daeb"
            ]
        ]
    },
    {
        "id": "f90d1b0ff672d097",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1160,
        "wires": [
            [
                "401a10862c5bf833"
            ]
        ]
    },
    {
        "id": "8cd0c5dfd436a2a2",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Definir_MaxSensor",
        "func": "/*Este nodo declara la variable de flow MaxSensores para conocer\ncuantos sensores hay definidos en la máquina\n*/\nvar valor = Object.values(msg.payload);\nflow.set('MaxSensor',valor['0']);\nmsg.payload = flow.get('MaxSensor');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 460,
        "wires": [
            [
                "1b19767f9efa3e05",
                "37c6cce48b803840"
            ]
        ]
    },
    {
        "id": "1b19767f9efa3e05",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "Numero de sensores1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 460,
        "wires": []
    },
    {
        "id": "c4ee10115efac806",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Buscar Numero de sensores",
        "func": "/*Este nodo consulta la tabla Sensores para saber cuántas\nentradas existen en la tabla, siendo cada una de ellas\nun sensor\n*/\n\nmsg.topic = \"SELECT COUNT(*) FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 440,
        "wires": [
            [
                "d079e250f5379190"
            ]
        ]
    },
    {
        "id": "2076f1fe5ea4025b",
        "type": "split",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2070,
        "y": 460,
        "wires": [
            [
                "8cd0c5dfd436a2a2"
            ]
        ]
    },
    {
        "id": "c879d67d96f80341",
        "type": "trigger",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1420,
        "y": 340,
        "wires": [
            [
                "2e130a78a330c796",
                "c4ee10115efac806"
            ]
        ]
    },
    {
        "id": "00ba134f15d541f9",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "FechaHora",
        "func": "/*Declara la valiable FechaHora que contiene la fecha y hora \nque será utilizada en el flow\n*/\nvar now = new Date(); \nvar año = now.getFullYear();\nvar mes = now.getMonth()+1; \nvar dia = now.getDate();\nvar hora = now.getHours();\nvar minuto = now.getMinutes();\nvar segundo = now.getSeconds(); \n\n\nif(mes.toString().length == 1) {\n    mes = '0'+mes;\n}\n\nif(dia.toString().length == 1) {\n    dia = '0'+dia;\n} \n\nif(hora.toString().length == 1) {\n    hora = '0'+hora;\n}\n\nif(minuto.toString().length == 1) {\n    minuto = '0'+minuto;\n    \n}\n\nif(segundo.toString().length == 1) {\n    segundo = '0'+segundo;\n} \n\n\nvar FechaHoralocal = año+'-'+mes+'-'+dia+' '+hora+':'+minuto+':'+segundo;\nflow.set('FechaHora',FechaHoralocal);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "42d143a9b1c6c0ed",
        "type": "rbe",
        "z": "aef79f16fb0c6fb5",
        "name": "Block unless value changes",
        "func": "deadband",
        "gap": "0",
        "start": "1",
        "inout": "out",
        "septopics": true,
        "property": "payload['ORDEN_LECTURA_general']",
        "topi": "topic",
        "x": 2460,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "19a0c1aa15239dcc",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "EscrituraErrorCiclo",
        "func": "/*Este nodo se encarga de notificar que ha habido un error\ndurante el proceso de escritura, resultando en que el PLC\nno recibió la orden de setear la variable OrdenLectura a 0 y\ntuvo que avanzar de manera automática tras esperar la orden\ndurante 60 segundos sin resultado\n*/\nflow.set('ERROR_CICLO', msg.payload['ERROR_CICLO']);\n\nif (flow.get('ERROR_CICLO') == 1) {\n    msg.topic = \"INSERT INTO \" + flow.get('DBname') + \".General (error_ciclo) VALUES ('\";\n    msg.topic += flow.get('ERROR_CICLO') + \"');\";\n\n    msg.topic = msg.topic;\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1280,
        "wires": [
            [
                "1fb5152459e1b717"
            ]
        ]
    },
    {
        "id": "24945cea67cd9a37",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Cantidad de producciones?",
        "func": "flow.set('CantidadProducciones',msg.payload['CantidadProducciones']);\nmsg.payload = flow.get('CantidadProducciones');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "b74d24583fef35c0",
                "21cbf8049c5d5e13"
            ]
        ]
    },
    {
        "id": "b74d24583fef35c0",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "CONSULTA3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 560,
        "wires": []
    },
    {
        "id": "8e5b88bc3c9fa4c9",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Buscar info los sensores",
        "func": "/*Este nodo realiza un Query para obtener la informacion\ndel nombre de cada sensor para declararlos como variables de\nflow y que puedan ser utilizados en el apartado de *Escritura en Sensores*\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "457b7b83dce8dc6b"
            ]
        ]
    },
    {
        "id": "4bf1362472c7bbcd",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Declaracion de sensores",
        "func": "// Este nodo guarda el nombre de cada sensor en una variable de flujo para ser utilizada en este flujo\n\n// Obtener el valor actual de 'i' de la variable de flujo (si 'i' no está definida, se asumirá inicialmente como 0)\nvar i = flow.get('i') || 0;\n\n// Obtener el array de sensores del mensaje de entrada\nvar array = Object.values(msg.payload);\n\n// Iterar a través de cada sensor hasta el número máximo de sensores definido en 'MaxSensor'\nfor (; i < flow.get('MaxSensor') && i < array.length; i++) {\n    // Guardar el objeto sensor actual en una variable de flujo con un nombre único\n    flow.set('Sensor' + (i + 1), array[i].Sensor);\n}\n\n// Guardar el valor actual de 'i' en la variable de flujo\nflow.set('i', i);\n\n// Devolver el mensaje de entrada sin cambios\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 520,
        "wires": [
            [
                "4cbe4f72a0713bfd",
                "a352a3bce3d632e9"
            ]
        ]
    },
    {
        "id": "4cbe4f72a0713bfd",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "CONSULTA2(ARRAY) SENSORES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 520,
        "wires": []
    },
    {
        "id": "9e4684b3ee4a1da9",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "------------------------------------------------------------------------*DATOS DE MAQUINA*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de cada máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 830,
        "y": 440,
        "wires": []
    },
    {
        "id": "8a2b26ab9792a4f1",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "Consultas de informacion necesaria para el programa",
        "info": "",
        "x": 1740,
        "y": 380,
        "wires": []
    },
    {
        "id": "f5e0f78f434f1033",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "INSTRUCCIONES ------ POR FAVOR LEER PARA CORRECTA CONFIGURACIÓN DEL FLOW",
        "info": "INFORMACION PARA CONFIGURAR EL FLOW DE MAQUINA:\n\nCuando se quiera configurar este flow por primera vez el usuario debe editar 3 nodos:\n\n-`Definir_Maquina`: Se debe asignar a la variable Nombre el nombre que tenga nuestra máquina. (var Nombre = 'Nombre de la máquina')\n\n-`Definir_SQL`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo Connection. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro servidor de base de datos los campos Server, Port, Username y Password.\n\n-`Definir_PLC`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo PLC. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro PLC los campos Adress y Port bajo la pestaña Connection. Además, en la pestaña Variables debemos declarar la dirección y nombre de cada una de nuestras variables.\n\n`IMPORTANTE`: Recordar que el nombre que demos a las variables de sensores deben ser iguales que los otorgados a estos mismos sensores en las variables de sensor del flow `Añadir máquinas y sensores`",
        "x": 850,
        "y": 380,
        "wires": []
    },
    {
        "id": "7e34f554298e0c4c",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "DEFINIR",
        "info": "",
        "x": 1960,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "4099217d0f5cdfc7",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "DEFINIR",
        "info": "",
        "x": 1620,
        "y": 300,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "f2ee11f93a8bc2e4",
        "type": "delay",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "pauseType": "delay",
        "timeout": "700",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "19a0c1aa15239dcc"
            ]
        ]
    },
    {
        "id": "b2930ed7eeae9138",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Update Fin",
        "func": "msg.topic = \"UPDATE \" + flow.get('DBname') + \".General \";\nmsg.topic += \"SET Fin = '\" + flow.get('FechaHora') + \"';\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 920,
        "wires": [
            [
                "e2062a44cc56df0c"
            ]
        ]
    },
    {
        "id": "79c61221a969e723",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "REVISAR DELAY",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 900,
        "wires": []
    },
    {
        "id": "1a78c06a24abbb1d",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "2aa878ba6eb94046",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "2728d665050269f7",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "3197166479741243",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "77e266278e5ba51c",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "COMPROBACION ULTIMA FILA",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".General ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "8b164eb66331788f",
                "3ef7e3f65763331d"
            ]
        ]
    },
    {
        "id": "0ff5918eb2229bea",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "COMPARACION DE ARRAYS",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocal = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducido',arrayIntroducidolocal);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1100,
        "wires": [
            [
                "be1bdf1a4d2355c9"
            ]
        ]
    },
    {
        "id": "3ef7e3f65763331d",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e0d14fd4cbeea0f4",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "func": "\nvar signals = flow.get(\"Signals\");\n\nfor(var j =0;j <flow.get(\"NumSignals\");j++){\n    \n    flow.set(String(signals[j]),msg.payload[String(signals[j])]);\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 640,
        "wires": [
            [
                "fec3322742d4fb35"
            ]
        ]
    },
    {
        "id": "fec3322742d4fb35",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 640,
        "wires": []
    },
    {
        "id": "377c546656e0c280",
        "type": "split",
        "z": "aef79f16fb0c6fb5",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1940,
        "y": 760,
        "wires": [
            [
                "dcc2767a87fddf83"
            ]
        ]
    },
    {
        "id": "dcc2767a87fddf83",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 760,
        "wires": [
            [
                "76817bee36f0bc3c"
            ]
        ]
    },
    {
        "id": "407b41b0cf1f1434",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "set variables auxiliares",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"Objeto\",msg.payload);\nflow.set(\"NumSignals\",Object.keys(flow.get(\"Objeto\")).length);\nflow.set(`j`,0);\nflow.set(\"PredefinedSignalsArray\",new Array(flow.get(\"NumSignals\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 760,
        "wires": [
            [
                "377c546656e0c280"
            ]
        ]
    },
    {
        "id": "76817bee36f0bc3c",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "9f703076fba9f10f",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "CONSULTA4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1280,
        "wires": []
    },
    {
        "id": "37c6cce48b803840",
        "type": "link out",
        "z": "aef79f16fb0c6fb5",
        "name": "Numero de Sensores",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 460,
        "wires": []
    },
    {
        "id": "a352a3bce3d632e9",
        "type": "link out",
        "z": "aef79f16fb0c6fb5",
        "name": "Info de los Sensores OBJECT",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 520,
        "wires": []
    },
    {
        "id": "21cbf8049c5d5e13",
        "type": "link out",
        "z": "aef79f16fb0c6fb5",
        "name": "Cantidad de Producciones Number",
        "mode": "link",
        "links": [],
        "x": 2595,
        "y": 560,
        "wires": []
    },
    {
        "id": "f25e6d27815a78be",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "REVISAR",
        "info": "UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1; : msg.topic : string[93]\n\"UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1;\"",
        "x": 1500,
        "y": 920,
        "wires": []
    },
    {
        "id": "bdcb25d9d0a6e09c",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "INSERT EN GENERAL",
        "func": "var signals = flow.get(\"Signals\");\nvar objeto = flow.get(\"Objeto\");\nvar dbName = flow.get(\"DBname\");\nvar fechaHora = flow.get(\"FechaHora\");\n\n// Construir la consulta SQL de inserción\nvar topic = \"INSERT INTO `\" + dbName + \"`.`General` VALUES (\";\n\n// Agregar la fecha y hora\ntopic += \"'\" + fechaHora + \"', \";\n\n// Agregar la primera señal\nvar firstSignal = signals[0];\nvar firstValor = objeto[firstSignal];\nif (typeof firstValor === 'string') {\n    topic += \"'\" + firstValor + \"'\";\n} else {\n    topic += firstValor;\n}\n\n// Agregar coma\ntopic += \", \";\n\n// Iterar a través del resto de las señales y construir los valores de la inserción\nfor (var k = 1; k < signals.length; k++) {\n    var signal = signals[k];\n\n    // Obtener el valor correspondiente del objeto\n    var valor = objeto[signal];\n\n    // Agregar el valor a la consulta SQL\n    if (typeof valor === 'string') {\n        // Si es una cadena, agregar comillas simples alrededor del valor\n        topic += \"'\" + valor + \"'\";\n    } else {\n        // De lo contrario, agregar el valor directamente\n        topic += valor;\n    }\n\n    // Agregar coma si no es el último valor\n    if (k < signals.length - 1) {\n        topic += \", \";\n    }\n}\n\n// Cerrar paréntesis de la consulta SQL de inserción\ntopic += \")\";\n\n// return the SQL query\nreturn {\n    topic: topic\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 980,
        "wires": [
            [
                "79c61221a969e723",
                "095d3c6dbd63ccb3"
            ]
        ]
    },
    {
        "id": "d079e250f5379190",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 460,
        "wires": [
            [
                "2076f1fe5ea4025b",
                "8e5b88bc3c9fa4c9"
            ]
        ]
    },
    {
        "id": "457b7b83dce8dc6b",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 520,
        "wires": [
            [
                "4bf1362472c7bbcd"
            ]
        ]
    },
    {
        "id": "e2062a44cc56df0c",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 920,
        "wires": [
            [
                "bdcb25d9d0a6e09c"
            ]
        ]
    },
    {
        "id": "8b164eb66331788f",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 1040,
        "wires": [
            [
                "0ff5918eb2229bea"
            ]
        ]
    },
    {
        "id": "401a10862c5bf833",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1160,
        "wires": [
            [
                "e18aa825c4bf0638"
            ]
        ]
    },
    {
        "id": "1fb5152459e1b717",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1280,
        "wires": [
            [
                "9f703076fba9f10f"
            ]
        ]
    },
    {
        "id": "79276c67027c15dd",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "OVERRIDE DE O.L POR SENSOR",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "6c59d6f02e17054f",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "info": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "x": 2490,
        "y": 1060,
        "wires": []
    },
    {
        "id": "90b65a0ea2ca7705",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "ORDEN_LECTURA_G(OK)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=2;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1220,
        "wires": [
            [
                "0661d5d8bfc7094c",
                "212a5725f57ac2ed"
            ]
        ]
    },
    {
        "id": "4acae41308d96c1b",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "REVISAR",
        "info": "",
        "x": 2360,
        "y": 380,
        "wires": []
    },
    {
        "id": "2c9449a3c4aed8ed",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3440,
        "y": 1060,
        "wires": []
    },
    {
        "id": "92b860b5dd6e633f",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "d91021f3385a40c7",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1720,
        "wires": [
            [
                "f69db24612736a53"
            ]
        ]
    },
    {
        "id": "696f39bc08233e72",
        "type": "switch",
        "z": "aef79f16fb0c6fb5",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1720,
        "wires": [
            [
                "e6ac20b08401ee32"
            ],
            [
                "d91021f3385a40c7"
            ]
        ]
    },
    {
        "id": "f69db24612736a53",
        "type": "switch",
        "z": "aef79f16fb0c6fb5",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1720,
        "wires": [
            [],
            [
                "c02daee74e35d3f0"
            ]
        ]
    },
    {
        "id": "e06d2bb4fc41cf16",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "i for loop",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1660,
        "wires": [
            [
                "4089777d3fbead21"
            ]
        ]
    },
    {
        "id": "4089777d3fbead21",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<4){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1720,
        "wires": [
            [
                "696f39bc08233e72"
            ]
        ]
    },
    {
        "id": "c02daee74e35d3f0",
        "type": "delay",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2590,
        "y": 1720,
        "wires": [
            [
                "4089777d3fbead21"
            ]
        ]
    },
    {
        "id": "e6ac20b08401ee32",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1660,
        "wires": [
            [
                "6f40306d6d4880c8"
            ]
        ]
    },
    {
        "id": "110c4bdd3113354c",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "820d9c3e1706ecf4",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "7874b6d23d8c3560",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "aa2029e7ca016b7d",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "e8f2f15931792d3d",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Control ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            [
                "b99575995cce9b2a"
            ]
        ]
    },
    {
        "id": "7f09f88cc73e68f0",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "ArraysParaComparar",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocalcontrol = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducidocontrol',arrayIntroducidolocalcontrol);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1600,
        "wires": [
            [
                "e06d2bb4fc41cf16"
            ]
        ]
    },
    {
        "id": "b99575995cce9b2a",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1900,
        "y": 1540,
        "wires": [
            [
                "7f09f88cc73e68f0"
            ]
        ]
    },
    {
        "id": "6f40306d6d4880c8",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "22acb37907d13963",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1910,
        "y": 1640,
        "wires": [
            [
                "696f39bc08233e72"
            ]
        ]
    },
    {
        "id": "b92678286b90c03e",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "------------------------------------------------------------------------*ESCRITURA EN CONTROL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2040,
        "y": 1340,
        "wires": []
    },
    {
        "id": "1b2afed8b8b63d75",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "ESCRITURA EN LA TABLA DE CONTROL",
        "func": "// Obtener el payload del mensaje\nlet data = msg.payload;\n\n// Verificar si el payload es un string y convertirlo a objeto JSON\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\n// Inicializar un array para almacenar las consultas SQL\nlet sqlQueries = [];\n\n// Iterar sobre cada clave en el objeto de datos\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        // Construir la consulta SQL con una tabla estática y claves como columnas\n        let query = `INSERT INTO INT_maquina1.control (${key}) VALUES (\"${value}\")`;\n        sqlQueries.push(query);\n    }\n}\n\n// Devolver las consultas generadas en el payload del mensaje\nmsg.topic = sqlQueries.join(';');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1480,
        "wires": [
            [
                "d433432efaea18ea"
            ]
        ]
    },
    {
        "id": "f1a48a5e6d3b3174",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1500,
        "wires": [
            [
                "e8f2f15931792d3d"
            ]
        ]
    },
    {
        "id": "35d195ae11366597",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "-----------------ORDEN------------",
        "func": "// Función para reordenar las variables dentro del paquete\nfunction reordenarPaquete(paquete) {\n    // Define el orden deseado de las variables\n    const ordenDeseado = [\"1LOTE\", \"2RECETA\", \"3PROCESO\", \"4FASE\",  \"5OPERARIO\", \"zAVANCE_MANUAL\", \"zABORTAR\", flow.get(\"Adicional1\"), flow.get(\"Adicional2\"), flow.get(\"Adicional3\"), flow.get(\"Adicional4\"), flow.get(\"Adicional5\"), flow.get(\"Adicional5\"), flow.get(\"Adicional6\"), flow.get(\"Adicional7\"), flow.get(\"Adicional8\"), flow.get(\"Adicional9\"), flow.get(\"Adicional10\"), flow.get(\"Adicional11\"), flow.get(\"Adicional12\"), flow.get(\"Adicional13\"), flow.get(\"Adicional14\"), flow.get(\"Adicional15\"), \"zerror_ciclo\"];\n\n    // Crea un nuevo objeto para almacenar las variables reordenadas\n    let paqueteOrdenado = {};\n\n    // Itera sobre el orden deseado\n    ordenDeseado.forEach(variable => {\n        // Verifica si la variable está presente en el paquete recibido\n        if (paquete.hasOwnProperty(variable)) {\n            // Agrega la variable al paquete ordenado\n            paqueteOrdenado[variable] = paquete[variable];\n        }\n    });\n\n    // Devuelve el paquete ordenado\n    return paqueteOrdenado;\n}\n\n// Llama a la función de reordenamiento con el paquete recibido como argumento\nmsg.payload= reordenarPaquete(msg.payload);\n\n// Devuelve el mensaje con el paquete ordenado\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1080,
        "wires": [
            [
                "407b41b0cf1f1434",
                "c879d67d96f80341",
                "8e5b88bc3c9fa4c9",
                "24945cea67cd9a37",
                "00ba134f15d541f9",
                "f2ee11f93a8bc2e4",
                "e0d14fd4cbeea0f4",
                "7f5310c7c6f03235",
                "b3c9fa0e09148189"
            ]
        ]
    },
    {
        "id": "90cf15d3dbc50ed9",
        "type": "json",
        "z": "aef79f16fb0c6fb5",
        "name": "Envio del señales de control a la BDD",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1250,
        "y": 1480,
        "wires": [
            [
                "1b2afed8b8b63d75"
            ]
        ]
    },
    {
        "id": "d433432efaea18ea",
        "type": "split",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2050,
        "y": 1440,
        "wires": [
            [
                "30e8cd1795e25b80"
            ]
        ]
    },
    {
        "id": "5684718b7bafd475",
        "type": "json",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2230,
        "y": 1440,
        "wires": [
            [
                "f1a48a5e6d3b3174",
                "f1b48b54f7c24010"
            ]
        ]
    },
    {
        "id": "f1b48b54f7c24010",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "REV",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 1440,
        "wires": []
    },
    {
        "id": "e18aa825c4bf0638",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "ORDEN_LECTURA_G(KO)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=3;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1160,
        "wires": [
            [
                "0661d5d8bfc7094c"
            ]
        ]
    },
    {
        "id": "095d3c6dbd63ccb3",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1940,
        "y": 980,
        "wires": [
            [
                "77e266278e5ba51c",
                "3240434054d06a53"
            ]
        ]
    },
    {
        "id": "22879e46603640b6",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2160,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "a971568eaf58aa51",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "------------------------------------------------------------------ENTRADAS SIEMENS PLC------------------------------------------------------------------",
        "info": "\nEMAIL: \"~+TIEMPO,102.00;LITROS,204.00;HORAS:,1580.00\"",
        "x": 420,
        "y": 900,
        "wires": []
    },
    {
        "id": "cf5ea116b0036944",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "Inserciones de sensores con O.L Independiente",
        "info": "",
        "x": 1840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "b47df2dd81ca8f2a",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "Inserciones de sensores con O.L General de Sensores",
        "info": "",
        "x": 2500,
        "y": 1800,
        "wires": []
    },
    {
        "id": "69c3112d4e5e016f",
        "type": "switch",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1610,
        "y": 2060,
        "wires": [
            [
                "597b9b03d5459d21"
            ]
        ]
    },
    {
        "id": "597b9b03d5459d21",
        "type": "json",
        "z": "aef79f16fb0c6fb5",
        "name": "ORDEN_LECTURA_tipo = \"2\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2470,
        "y": 2060,
        "wires": [
            [
                "1030b774ae462ee0",
                "200059e8e2d79c7f"
            ]
        ]
    },
    {
        "id": "1030b774ae462ee0",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO int_maquina1.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1980,
        "wires": [
            [
                "cc0a50d6babe708a"
            ]
        ]
    },
    {
        "id": "cc0a50d6babe708a",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1920,
        "wires": [
            [
                "36972373a81baa07"
            ]
        ]
    },
    {
        "id": "36972373a81baa07",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "CHECK O.L.",
        "func": "\nif (flow.get(\"ORDEN_LECTURA_sensores\") !== 1) {\n    node.warn('La orden de Lectura General de Sensores está apagada');\n} else {\n    \n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1860,
        "wires": [
            [
                "f4ed57d30398cad3"
            ]
        ]
    },
    {
        "id": "f4ed57d30398cad3",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2680,
        "y": 1860,
        "wires": [
            [
                "200059e8e2d79c7f"
            ]
        ]
    },
    {
        "id": "bfa1b671b344fd6a",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "debug sensores ind",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 2000,
        "wires": []
    },
    {
        "id": "200059e8e2d79c7f",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "debug sensores gnral",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 1960,
        "wires": []
    },
    {
        "id": "418307541b74673f",
        "type": "switch",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "property": "TIPO_LECTURA_Sensores",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1350,
        "y": 1960,
        "wires": [
            [
                "1a25185535f84a04"
            ],
            [
                "69c3112d4e5e016f"
            ],
            [
                "50b189c624a91b04"
            ]
        ]
    },
    {
        "id": "f060d299c50b3401",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "set O.L. EMAIL S1C",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "27c9e9b178770baa",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "f060d299c50b3401"
            ]
        ]
    },
    {
        "id": "f7b79cf9e60d5a2a",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "set O.L. EMAIL D1C",
        "func": "\nflow.set(\"D1C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "f3fc59d2909765f4",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "f7b79cf9e60d5a2a"
            ]
        ]
    },
    {
        "id": "fd6a06bc33d969cb",
        "type": "template",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "2f864368e1305acc"
            ]
        ]
    },
    {
        "id": "2f864368e1305acc",
        "type": "rbe",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "f060d299c50b3401"
            ]
        ]
    },
    {
        "id": "4eaf8612b9ea7808",
        "type": "websocket in",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "fd6a06bc33d969cb"
            ]
        ]
    },
    {
        "id": "4b30246172c9f41a",
        "type": "template",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "47e9e2bce9e168a5"
            ]
        ]
    },
    {
        "id": "47e9e2bce9e168a5",
        "type": "rbe",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "f7b79cf9e60d5a2a"
            ]
        ]
    },
    {
        "id": "3f8164afd890f02b",
        "type": "websocket in",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "4b30246172c9f41a"
            ]
        ]
    },
    {
        "id": "212a5725f57ac2ed",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "¿O.L EMAIL?",
        "func": "if (flow.get(\"CONTROL_EMAIL\") === 1) {\n   \n    // Continuar el flujo si el valor es 1\n    msg.payload =1 \n return msg;\n \n} else {\n    // Bloquear ejecución enviando un mensaje de error\n    node.error(\"EMAIL EN PROCESO\", msg);\n    return null; // Detener el flujo\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3660,
        "y": 520,
        "wires": [
            [
                "09fc61ad1b37ea20"
            ]
        ]
    },
    {
        "id": "cdede259ba1c81d3",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "f7b79cf9e60d5a2a"
            ]
        ]
    },
    {
        "id": "ae1ded6478f9bc70",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "f060d299c50b3401"
            ]
        ]
    },
    {
        "id": "50b189c624a91b04",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "BLOCK \"0\"",
        "func": "msg.payload=node.warn(\"Lectura de Sensores Apagada\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "30b37c73e2d01725",
        "type": "split",
        "z": "aef79f16fb0c6fb5",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1660,
        "y": 1380,
        "wires": [
            [
                "36c24f9fafced4e7"
            ]
        ]
    },
    {
        "id": "36c24f9fafced4e7",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Declaracion Señales DE CONTROL",
        "func": "var CSignals = msg.signals;\n\nvar CSignalsLocal = flow.get(\"ControlSignalsArray\");\n\nCSignalsLocal[flow.get('j1')]=CSignals;\n\nflow.set('j1',flow.get('j1')+1);\n\nif(flow.get(\"j1\")==flow.get(\"NumSignalsControl\")){\n    flow.set(\"CSignals\",CSignalsLocal);\n}\n\nmsg.payload = msg.CSignals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1380,
        "wires": [
            [
                "3747a2529df71b11"
            ]
        ]
    },
    {
        "id": "3b6f1504d9a25607",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "set variables de control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j1`,0);\nflow.set(\"ControlSignalsArray\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1380,
        "wires": [
            [
                "30b37c73e2d01725"
            ]
        ]
    },
    {
        "id": "3747a2529df71b11",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j1\") == flow.get(\"NumSignalsControl\")) {\n    msg.payload = flow.get(\"ObjetoControl\");\n\n    var signals = flow.get(\"CSignals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignalsControl\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "f92b7390864a0151",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "set  TIPO O.L. SENSORES (GENERAL) ",
        "func": "\nflow.set(\"ORDEN_LECTURA_Sensores\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f5df776b6be197fa",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 80,
        "wires": [
            [
                "f92b7390864a0151"
            ]
        ]
    },
    {
        "id": "56953712ce91ef43",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "set O.L. GENERAL",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a248f00ac49708c2",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "56953712ce91ef43"
            ]
        ]
    },
    {
        "id": "c1462a82ec02e948",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "set  TIPO O.L. SENSORES (INDIVIDUAL)",
        "func": "\nflow.set(\"ORDEN_LECTURA_Sensores\",msg.payload);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "89dacac97f73c401",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 590,
        "y": 120,
        "wires": [
            [
                "c1462a82ec02e948"
            ]
        ]
    },
    {
        "id": "30e8cd1795e25b80",
        "type": "split",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2190,
        "y": 1400,
        "wires": [
            [
                "5684718b7bafd475"
            ]
        ]
    },
    {
        "id": "35303568163bba51",
        "type": "s7 in",
        "z": "aef79f16fb0c6fb5",
        "endpoint": "",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "35d195ae11366597",
                "54b69a17cbaa58a2"
            ]
        ]
    },
    {
        "id": "8c8c6a7f67a0fe83",
        "type": "s7 in",
        "z": "aef79f16fb0c6fb5",
        "endpoint": "",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 170,
        "y": 1380,
        "wires": [
            [
                "3b6f1504d9a25607"
            ]
        ]
    },
    {
        "id": "3240434054d06a53",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "SELECT LAST ROW",
        "func": "var controlemail= flow.get(\"CONTROL_EMAIL\");\nif (controlemail===1){\nmsg.topic= \"SELECT * FROM INT_\"+flow.get (\"Maquina\")+\".General ORDER BY 'FechaHora' DESC LIMIT 1;\";\nreturn msg;}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 980,
        "wires": [
            [
                "49514ca61c4c4d5e"
            ]
        ]
    },
    {
        "id": "49514ca61c4c4d5e",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2500,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "1eda4839cf8f5228",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "DEFINIR ADICIONALES",
        "props": [
            {
                "p": "Adicional1",
                "v": "MATRICULA",
                "vt": "str"
            },
            {
                "p": "Adicional3",
                "v": "CONDUCTOR",
                "vt": "str"
            },
            {
                "p": "Adicional4",
                "v": "PROVEEDOR",
                "vt": "str"
            },
            {
                "p": "Adicional5",
                "v": "LITROS",
                "vt": "str"
            },
            {
                "p": "Adicional6",
                "v": "DESTINO",
                "vt": "str"
            },
            {
                "p": "Adicional7",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional8",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional9",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional10",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional11",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional12",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional13",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional14",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional15",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 670,
        "y": 640,
        "wires": [
            [
                "9bed162d8b54d7d2"
            ]
        ]
    },
    {
        "id": "9bed162d8b54d7d2",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"Adicional1\", msg.Adicional1);\nflow.set(\"Adicional2\", msg.Adicional2);\nflow.set(\"Adicional3\", msg.Adicional3);\nflow.set(\"Adicional4\", msg.Adicional4);\nflow.set(\"Adicional5\", msg.Adicional5);\nflow.set(\"Adicional6\", msg.Adicional6);\nflow.set(\"Adicional7\", msg.Adicional7);\nflow.set(\"Adicional8\", msg.Adicional8);\nflow.set(\"Adicional9\", msg.Adicional9);\nflow.set(\"Adicional10\", msg.Adicional10);\nflow.set(\"Adicional11\", msg.Adicional11);\nflow.set(\"Adicional12\", msg.Adicional12);\nflow.set(\"Adicional13\", msg.Adicional13);\nflow.set(\"Adicional14\", msg.Adicional14);\nflow.set(\"Adicional15\", msg.Adicional15);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "0661d5d8bfc7094c",
        "type": "s7 out",
        "z": "aef79f16fb0c6fb5",
        "endpoint": "f3ca9ac4bcf4b2a8",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 3820,
        "y": 1200,
        "wires": []
    },
    {
        "id": "ad5e902312aa88ae",
        "type": "s7 in",
        "z": "aef79f16fb0c6fb5",
        "endpoint": "",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 190,
        "y": 1960,
        "wires": [
            [
                "418307541b74673f"
            ]
        ]
    },
    {
        "id": "1a25185535f84a04",
        "type": "json",
        "z": "aef79f16fb0c6fb5",
        "name": "ORDEN_LECTURA_tipo = \"1\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1650,
        "y": 1840,
        "wires": [
            [
                "6663af4b2ea360de"
            ]
        ]
    },
    {
        "id": "6663af4b2ea360de",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO INT_RECEPCION.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1728.183349609375,
        "y": 1915.88330078125,
        "wires": [
            [
                "842fac6a21293cf3"
            ]
        ]
    },
    {
        "id": "d50b382b8e56ad2a",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1948.183349609375,
        "y": 1915.88330078125,
        "wires": [
            [
                "4b8dfa3aa154d3f9"
            ]
        ]
    },
    {
        "id": "74b80d479fc57aa3",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "CHECK O.L.",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n            break; // Salir del bucle si encontramos una consulta permitida\n        } else if (controlValue === 0) {\n            // Si encontramos un control que es 0, simplemente continuar con el siguiente\n            node.warn(`El control para la tabla ${tableName} es 0. La consulta será descartada.`);\n            // Aquí no se hace nada porque el mensaje será descartado si no se encuentra ninguna consulta permitida\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, simplemente descartar el mensaje\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null; // Esto efectivamente descarta el mensaje sin detener el flujo\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1948.183349609375,
        "y": 1875.88330078125,
        "wires": [
            [
                "d50b382b8e56ad2a"
            ]
        ]
    },
    {
        "id": "842fac6a21293cf3",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1868.183349609375,
        "y": 2015.88330078125,
        "wires": [
            [
                "74b80d479fc57aa3"
            ]
        ]
    },
    {
        "id": "933b269322875767",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2400,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "eca6ef0852312df1",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1720,
        "y": 2880,
        "wires": [
            [
                "1f3cfa10eabb2306"
            ]
        ]
    },
    {
        "id": "4b8dfa3aa154d3f9",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1960,
        "wires": [
            [
                "22879e46603640b6"
            ]
        ]
    },
    {
        "id": "2fc8ce4e144108b5",
        "type": "e-mail",
        "z": "aef79f16fb0c6fb5",
        "server": "grupointegra-com-es.correoseguro.dinaserver.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Envio Email",
        "x": 5390,
        "y": 200,
        "wires": []
    },
    {
        "id": "09fc61ad1b37ea20",
        "type": "json",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 4310,
        "y": 200,
        "wires": [
            [
                "0ba621d2bf3971a0"
            ]
        ]
    },
    {
        "id": "c637ea0dc69647cc",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 4620,
        "y": 200,
        "wires": [
            [
                "86d844bbbc870d04"
            ]
        ]
    },
    {
        "id": "0ba621d2bf3971a0",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "SELECT",
        "func": "var Lote = flow.get(\"1LOTE\");\nvar Maquina = flow.get(\"DBname\");\n\n// Asegurarse de que Lote se concatene como string con comillas simples\nvar query = \"SELECT 4FASE, LITROS, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM \" + Maquina + \".General WHERE 1LOTE = '\" + Lote + \"';\";\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4440,
        "y": 200,
        "wires": [
            [
                "c637ea0dc69647cc"
            ]
        ]
    },
    {
        "id": "66ca91f0a5c50921",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Template Correo E ",
        "func": "// Recupera el contenido del payload\nlet content = flow.get(\"CONTENIDO_EMAIL\");\nlet RECETA = flow.get(\"RECETA\") || \"No disponible\";\nvar LOTE = flow.get(\"1LOTE\") || \"No disponible\";\nvar FASE = flow.get(\"4FASE\") || \"No disponible\";\nvar OPERARIO = flow.get(\"5OPERARIO\") || \"No disponible\";\nvar PROCESO = flow.get(\"3PROCESO\") || \"No disponible\";\nvar PROVEEDOR = flow.get(\"PROVEEDOR\") || \"No disponible\";\nvar MATRICULA = flow.get(\"MATRICULA\") || \"No disponible\";\nvar CONDUCTOR = flow.get(\"CONDUCTOR\") || \"No disponible\";\nvar DESTINO = flow.get(\"DESTINO\") || \"No disponible\";\nvar Registro = msg.payload;  // El payload ya debe contener el JSON parseado.\n\n// Verifica que el contenido de Registro sea un array y construye una tabla\nlet registroTable = \"\";\n\nif (Array.isArray(Registro)) {\n    registroTable = `\n        <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse: collapse;\">\n            <thead>\n                <tr>\n                    <th>FASE</th>\n                    <th>LITROS</th>\n                    <th>Fecha y Hora</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${Registro.map(reg => `\n                    <tr>\n                        <td>${reg['4FASE'] || \"No disponible\"}</td>\n                        <td>${reg.LITROS}</td>\n                        <td>${reg.Fechahora}</td>\n                    </tr>`).join('')}\n            </tbody>\n        </table>\n    `;\n} else {\n    registroTable = `<p>No se encontraron registros válidos.</p>`;\n}\n\n// Crea la lista HTML a partir de las partes de content\nlet items = content.split(';').map(item => `<li>${item.trim()}</li>`).join('\\n');\n\n// Arma el contenido HTML completo con la tabla\nmsg.payload = `\n    <html>\n        <body>\n            <h1>Alerta de Trazabilidad:</h1>\n            <p>En este documento puede encontrar los datos de la línea: ${flow.get(\"Maquina\")}</p>\n            <ul>\n                <li>Lote: ${LOTE}</li>\n                <li>Proceso: ${PROCESO}</li>\n                <li>Proveedor: ${PROVEEDOR}</li>\n                <li>Matricula: ${MATRICULA}</li>\n                <li>Conductor: ${CONDUCTOR}</li>\n                <li>Operario: ${OPERARIO}</li>\n                <li>Destino: ${DESTINO}</li>\n            </ul>\n            <h2>Registros:</h2>\n            ${registroTable}\n            <img src=\"cid:miImagen\" alt=\"Imagen Incrustada\" />\n        </body>\n    </html>\n`;\n\n// Especifica que se trata de contenido HTML\nmsg.html = msg.payload;\n\n// Configura el mensaje\nmsg.to = \"breixoherrera1@gmail.com, jadeudero@grupointegra.com.es\";\nmsg.topic = \"Datos de la línea Recepción. Lote:\" +flow.get(\"1LOTE\");\nmsg.attachments = [\n    {\n        filename: \"Logo.jpg\", // Cambia esto por el nombre de tu imagen\n        path: \"/home/intboxes/Documents/Logo.jpg\", // Cambia esto por la ruta a tu imagen\n        cid: \"miImagen\"  // cid debe coincidir con el del HTML\n    }\n];\n\n// Envía el mensaje\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5070,
        "y": 200,
        "wires": [
            [
                "2fc8ce4e144108b5",
                "c0b10ba50fdb50af"
            ]
        ]
    },
    {
        "id": "86d844bbbc870d04",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Conversion a JSON String",
        "func": "// Verifica si el payload es un string y lo convierte a JSON\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (error) {\n        node.error(\"El payload no es un JSON válido: \" + error);\n        return;\n    }\n}\n\n// Retorna el mensaje con el payload convertido\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4840,
        "y": 200,
        "wires": [
            [
                "66ca91f0a5c50921"
            ]
        ]
    },
    {
        "id": "df96b9d234a5d5e3",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "ad10b9e0b5c2dec2"
            ]
        ]
    },
    {
        "id": "ad10b9e0b5c2dec2",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "ENVIO DE EMAIL",
        "func": "\nflow.set(\"CONTROL_EMAIL\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "adea21318171dba9",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "----------------------------------------NOTIFICACIONES----------------------------------------",
        "info": "",
        "x": 4720,
        "y": 40,
        "wires": []
    },
    {
        "id": "a844d5a8cc70c9d1",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "NOTIFICACIONES DE TRAZABILIDAD POR EMAIL.",
        "info": "",
        "x": 4680,
        "y": 120,
        "wires": []
    },
    {
        "id": "e06ac319597b54c6",
        "type": "s7 out",
        "z": "aef79f16fb0c6fb5",
        "endpoint": "f3ca9ac4bcf4b2a8",
        "variable": "CONTROL_EMAIL",
        "name": "",
        "x": 5410,
        "y": 240,
        "wires": []
    },
    {
        "id": "c0b10ba50fdb50af",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "CONFIRMACION AL PLC",
        "func": "msg.payload = 2;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5090,
        "y": 240,
        "wires": [
            [
                "e06ac319597b54c6"
            ]
        ]
    },
    {
        "id": "991f95610a5725c0",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "ORDEN DE LECTURA GENERAL BLOCK",
        "func": "// Obtener los valores de las variables de flujo\nconst ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nconst latenciaOrdenLectura = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 1\nif (ordenLectura === 1) {\n    // Si ORDEN_LECTURA_general es 1, verificar la latencia\n    if (latenciaOrdenLectura === 1) {\n        // Si la latencia es 1, bloquear la ejecución\n        node.error(\"LATENCIA_ORDEN_LECTURA_general es 1, bloqueo de flujo\", msg);\n        return null; // Detener el flujo\n    } else {\n        // Si la latencia no es 1 (Es = 0), continuar el flujo\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n        return msg;\n    }\n} else {\n    // Si ORDEN_LECTURA_general no es 1, bloquear la ejecución\n    node.error(\"ORDEN_LECTURA_general no es 1, bloqueo de flujo\", msg);\n    return null; // Detener el flujo\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 860,
        "wires": [
            [
                "bdcb25d9d0a6e09c"
            ]
        ]
    },
    {
        "id": "7f5310c7c6f03235",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Check Latencia",
        "func": "// Obtener el valor de ORDEN_LECTURA_general\nvar ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 0 o 2\nif (ordenLectura === 0 || ordenLectura === 2) {\n    // Si es 0 o 2, establecer la latencia en el valor actual de ORDEN_LECTURA_general\n    flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 0);\n    return msg;\n}else{\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 860,
        "wires": [
            [
                "991f95610a5725c0"
            ]
        ]
    },
    {
        "id": "4c8ab9615e57ee5f",
        "type": "s7 out",
        "z": "aef79f16fb0c6fb5",
        "endpoint": "f3ca9ac4bcf4b2a8",
        "variable": "LOTEC",
        "name": "",
        "x": 2380,
        "y": 2940,
        "wires": []
    },
    {
        "id": "97790391dcc46d66",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "------------------------------------------------------------------------*GESTION DE TABLA DE LOTES*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2080,
        "y": 2800,
        "wires": []
    },
    {
        "id": "164697b66bca8b0b",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "--------------------------------------------------------------------OVERRIDES------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 40,
        "wires": []
    },
    {
        "id": "5b90579e64520ad1",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "ENVÍO Y CONFIRMACIÓN",
        "info": "",
        "x": 5390,
        "y": 120,
        "wires": []
    },
    {
        "id": "e1e3e1fdb4ef8737",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "ACTIVACIÓN DE ENVÍO DE NOTIFICACIONES",
        "info": "",
        "x": 3680,
        "y": 420,
        "wires": []
    },
    {
        "id": "d66d49d01d70c5ef",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "-------------------------DECLARACIÓN DE ADICIONALES GENERALES---------------------------------",
        "info": "",
        "x": 840,
        "y": 580,
        "wires": []
    },
    {
        "id": "52c75f8378fa069f",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 260,
        "y": 1020,
        "wires": []
    },
    {
        "id": "52e90f4aadfa617c",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 260,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9d42e4595969dd36",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1320,
        "wires": []
    },
    {
        "id": "041035608c4e12de",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1460,
        "wires": []
    },
    {
        "id": "a2ef70129402644e",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1900,
        "wires": []
    },
    {
        "id": "014e14156c361ebf",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 2020,
        "wires": []
    },
    {
        "id": "07741f22e03285db",
        "type": "switch",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 2280,
        "wires": [
            [
                "649ad68310677fe7"
            ],
            [
                "1f4bd288bd1b8bb3"
            ]
        ]
    },
    {
        "id": "649ad68310677fe7",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2970,
        "y": 2380,
        "wires": [
            [
                "1f4bd288bd1b8bb3"
            ]
        ]
    },
    {
        "id": "f1f9be0d877904b6",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Escritura en Tabla de Sensor",
        "func": "/*Este nodo prepara el Query para almacenar la información\ndel sensor proveniente del PLC en su lugar correspondiente.\nEsto solo se procesa si la orden de lectura de este sensor\nse encuentra activa\n*/\nmsg.payload = flow.get('Objeto');\n\nif (flow.get('NumSensor') <= flow.get('MaxSensor') && msg.payload[ + flow.get('Sensor' + flow.get('NumSensor'))] == true) {\n    var tableName = flow.get('Sensor' + flow.get('NumSensor'));\n    var datetime = flow.get('FechaHora');\n    var value = msg.payload[flow.get('NumSensor')];\n    var dbName = flow.get('DBname');\n      \n   var topic = \"INSERT INTO \" + dbName + \".\" + tableName + \" (FechaHora, Unidad) VALUES ('\" + datetime + \"', '\" + value + \"');\";\n   \n\n    msg.queryCompresion = \"SELECT Valor FROM \" + flow.get('DBname') + \".\" + tableName + \" ORDER BY FechaHora DESC LIMIT 1;\";\n\n    msg.topic = topic;\n    flow.set(\"queryValor\", msg.topic);\n    msg.payload = 0;\n    return msg;\n} else {\n    msg.payload = 1;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 2240,
        "wires": [
            [
                "bd02978981a0019a",
                "0a9ce5799a2dd6fa",
                "eac73aba93d2f0af"
            ]
        ]
    },
    {
        "id": "0a9ce5799a2dd6fa",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2220,
        "wires": []
    },
    {
        "id": "aafa4dd4ad0bc8af",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Inicializacion del loop",
        "func": "/*Este nodo inicializa las variables necesarias para ciclar\nla información de cada uno de los sensores y escribirla en \nla tabla correspondiente en la BD de la máquina\n*/\n\nflow.set('NumSensor',1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 2200,
        "wires": [
            [
                "f1f9be0d877904b6",
                "4deefeccc7db1646"
            ]
        ]
    },
    {
        "id": "bd02978981a0019a",
        "type": "switch",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 2380,
        "wires": [
            [
                "1d22c40dd92f1238"
            ],
            [
                "1f4bd288bd1b8bb3"
            ]
        ]
    },
    {
        "id": "1f4bd288bd1b8bb3",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "loop",
        "func": "if(flow.get('NumSensor')<flow.get('MaxSensor')){\n    flow.set('NumSensor',flow.get('NumSensor')+1);\n    msg.payload = flow.get('NumSensor');\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 2380,
        "wires": [
            [
                "f1f9be0d877904b6"
            ]
        ]
    },
    {
        "id": "02c268d62f443148",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "------------------------------------------------------------------------*ESCRITURA EN LAS TABLAS DE SENSOR Y ASIGNACIÓN DE ID*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2170,
        "y": 2140,
        "wires": []
    },
    {
        "id": "b3c9fa0e09148189",
        "type": "delay",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 2200,
        "wires": [
            [
                "aafa4dd4ad0bc8af"
            ]
        ]
    },
    {
        "id": "eac73aba93d2f0af",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "eb8131303978e43c",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Check Valores iguales",
        "func": "//recuperamos el valor de la ultima medida del sensor y lo comparamos con el que estamos a punto de introducir\n//si estos valores coinciden, en lugar de seguir con la escritura saltamos una iteracion en el loop\nmsg.payload = msg.payload[0];\nmsg.payload = msg.payload[\"Valor\"];\nflow.set(\"ValorPrevio\", msg.payload);\n\nmsg.payload = flow.get(\"Objeto\");\nvar sensorKey = 'Sensor' + flow.get('NumSensor');\nmsg.payload = msg.payload[sensorKey];\nflow.set(\"ValorActual\", msg.payload);\n\nif (flow.get(\"ValorPrevio\") !== flow.get(\"ValorActual\")) {\n    msg.topic = \"INSERT INTO \" + flow.get(\"DBname\") + \".Tabla (Valor) VALUES ('\" + flow.get(\"ValorActual\") + \"');\";\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 2220,
        "wires": [
            [
                "07741f22e03285db",
                "1c9bb9dda8361f71"
            ]
        ]
    },
    {
        "id": "1d22c40dd92f1238",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Bypass compresion",
        "func": "if (flow.get(\"ModoCompresion\") == 1) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 2380,
        "wires": [
            [
                "b53224a2a7799897"
            ]
        ]
    },
    {
        "id": "b53224a2a7799897",
        "type": "switch",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2430,
        "y": 2380,
        "wires": [
            [
                "5c18950f3b5b04c7"
            ],
            [
                "649ad68310677fe7"
            ]
        ]
    },
    {
        "id": "1c9bb9dda8361f71",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "COMPRESSION",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 2220,
        "wires": []
    },
    {
        "id": "4deefeccc7db1646",
        "type": "link out",
        "z": "aef79f16fb0c6fb5",
        "name": "INFO SENSOR TEXT",
        "mode": "link",
        "links": [],
        "x": 2215,
        "y": 2200,
        "wires": []
    },
    {
        "id": "5c18950f3b5b04c7",
        "type": "mysql",
        "z": "aef79f16fb0c6fb5",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2570,
        "y": 2260,
        "wires": [
            [
                "eb8131303978e43c"
            ]
        ]
    },
    {
        "id": "f7243449596ec9b3",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 730,
        "y": 1240,
        "wires": [
            [
                "b2f72ab42a4ea701"
            ]
        ]
    },
    {
        "id": "b2f72ab42a4ea701",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"ORDEN_LECTURA_general\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "aaf30c10b7286505",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1030,
        "y": 1320,
        "wires": [
            [
                "7a2bb7678d0a7ed5"
            ]
        ]
    },
    {
        "id": "7a2bb7678d0a7ed5",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"CONTROL_EMAIL\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "1e162c92ced5dd21",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "POR FASE",
        "func": "// Obtener el estado de la variable '4FASE' del flow\nvar estado = flow.get(\"4FASE\");\n\n// Obtener el estado previo del bloqueo (si ya fue detectado)\nvar Latencia = flow.get(\"bloqueado\") || false;\n\nif (estado === \"Preparacion a reposo\" && !Latencia) {\n    // Si se encuentra \"Preparacion a reposo\" y no está bloqueado, enviar msg.payload\n    msg.payload = \"Estado detectado: Preparacion a reposo\";\n    \n    // Bloquear el envío de más mensajes\n    flow.set(\"bloqueado\", true);\n    \n    return msg;\n} else if (estado !== \"Preparacion a reposo\" && Latencia) {\n    // Si el estado ya no es \"Preparacion a reposo\", desbloquear el envío\n    flow.set(\"bloqueado\", false);\n}\n\nreturn null; // No se envía ningún mensaje si no cumple las condiciones\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3650,
        "y": 620,
        "wires": [
            [
                "09fc61ad1b37ea20"
            ]
        ]
    },
    {
        "id": "8aa68d1ba351f1b7",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3400,
        "y": 480,
        "wires": [
            [
                "1e162c92ced5dd21",
                "de57a8b126d2d4ca"
            ]
        ]
    },
    {
        "id": "de57a8b126d2d4ca",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "function 99",
        "func": "flow.set(\"bloqueado\", false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3390,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "edbe16eb8eed8c85",
        "type": "comment",
        "z": "aef79f16fb0c6fb5",
        "name": "------------------------------------------------------------------------RESPUESTA ERROR DE CICLO--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2070,
        "y": 2580,
        "wires": []
    },
    {
        "id": "54b69a17cbaa58a2",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "COMPROBACIÓN DE ERROR DE CICLO",
        "func": "// Aqui se revisa si el error de ciclo e encuentra activo cuando no se está leyendo y se pone a 0 en el PLC.\nvar errorciclo = flow.get(\"zerror_ciclo\");\nvar OL = flow.get(\"ORDEN_LECTURA_general\");\nif(errorciclo === 1 && OL === 0 ){\nmsg.payload = 1\n}else{\nreturn msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 2660,
        "wires": [
            [
                "49f491821ada6137"
            ]
        ]
    },
    {
        "id": "49f491821ada6137",
        "type": "s7 out",
        "z": "aef79f16fb0c6fb5",
        "endpoint": "f3ca9ac4bcf4b2a8",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 2180,
        "y": 2660,
        "wires": []
    },
    {
        "id": "db4cb426b8ecf69f",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "Modo Compresion",
        "func": "flow.set(\"ModoCompresion\",msg.payload);\nmsg.payload = \"Modo Compresion Status=\"+flow.get(\"ModoCompresion\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2480,
        "wires": [
            [
                "37e829b43ec770fa"
            ]
        ]
    },
    {
        "id": "ce2f4a5cbd6f2dd1",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1670,
        "y": 2460,
        "wires": [
            [
                "db4cb426b8ecf69f"
            ]
        ]
    },
    {
        "id": "ee95b7d81001a387",
        "type": "inject",
        "z": "aef79f16fb0c6fb5",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1670,
        "y": 2500,
        "wires": [
            [
                "db4cb426b8ecf69f"
            ]
        ]
    },
    {
        "id": "37e829b43ec770fa",
        "type": "debug",
        "z": "aef79f16fb0c6fb5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 2480,
        "wires": []
    },
    {
        "id": "1f3cfa10eabb2306",
        "type": "function",
        "z": "aef79f16fb0c6fb5",
        "name": "ORDEN_LECTURA_LOTE(ok)",
        "func": "// Obtener las variables necesarias de flujo\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\nvar OPERARIO = flow.get(\"5OPERARIO\"); // Asegurarse de que \"5OPERARIO\" es una variable válida de flujo\nvar LOTEC = flow.get(\"LOTEC\");\n\n// Reset de latencia si LOTEC es 0, 2 o 4\nif (LOTEC === 0 || LOTEC === 2 || LOTEC === 4) {  \n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 0);\n    latencia = 0;  // Actualizamos la latencia para asegurarnos de que el cambio se refleje\n}\n\n// Orden para iniciar el lote (LOTEC = 1)\nif (LOTEC === 0 && latencia === 0) {\n    msg.payload = 2;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de inicio del lote y el operario\n    msg.topic = `UPDATE INT_RECEPCION.LOTE \n                 SET FechaInicioLote = CURRENT_TIMESTAMP, \n                     5OPERARIO = '${OPERARIO}' \n                 ORDER BY FechaInicioLote DESC \n                 LIMIT 1;`;\n}\n\n// Orden para finalizar el lote (LOTEC = 3)\nif (LOTEC === 3 && latencia === 0) {\n    msg.payload = 4;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de finalización del lote\n    msg.topic = `UPDATE INT_RECEPCION.LOTE \n                 SET FechaFinLote = CURRENT_TIMESTAMP \n                 ORDER BY FechaInicioLote DESC \n                 LIMIT 1;`;\n}\n\n// Devolver el mensaje con el payload y el topic\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 2880,
        "wires": [
            [
                "933b269322875767"
            ]
        ]
    },
    {
        "id": "ec3809970bd73e26",
        "type": "inject",
        "z": "fe456245c351e442",
        "name": "DEFINIR NUEVA MAQUINA",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "LC01",
        "payloadType": "str",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "655a488ab9285c10"
            ]
        ]
    },
    {
        "id": "655a488ab9285c10",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Crear_Maquina",
        "func": "/*Este nodo se encarga de crear las variables de flow que\ncontienen el nombre de la máquina y el de la base de datos \n*/\nflow.set('Maquina', msg.payload)\n\nflow.set('DBname', \"INT_\" + flow.get('Maquina'));\n\nmsg.payload = flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "08b9ee8737d0a35a",
                "dda8771534748abb",
                "c68c8670ea712aaf"
            ]
        ]
    },
    {
        "id": "08b9ee8737d0a35a",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "Máquina OK",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 180,
        "wires": []
    },
    {
        "id": "dda8771534748abb",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Crear_DB_Maquina",
        "func": "msg.topic = \"CREATE DATABASE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"USE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"CREATE TABLE example_table (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50) NOT NULL); \";\nmsg.topic += \"ALTER DATABASE `\" + flow.get('DBname') + \"` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; \";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 240,
        "wires": [
            [
                "500e1a16ae81ac7b"
            ]
        ]
    },
    {
        "id": "e738f14807540d47",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "BDD OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 240,
        "wires": []
    },
    {
        "id": "6eba8c87c47ae28a",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 300,
        "wires": []
    },
    {
        "id": "725e897e33205ba9",
        "type": "inject",
        "z": "fe456245c351e442",
        "name": "DEFINIR NUEVO SENSOR DIGITAL",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "sensor",
                "v": "LOTEDIGITAL",
                "vt": "str"
            },
            {
                "p": "unidad",
                "v": "REGISTRO",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "2",
        "x": 180,
        "y": 1060,
        "wires": [
            [
                "27819f21813778b3",
                "e1fe3618add50975"
            ]
        ]
    },
    {
        "id": "27819f21813778b3",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1060,
        "wires": [
            [
                "6d76432f4af47195",
                "c0b45adafd15abdf"
            ]
        ]
    },
    {
        "id": "6d76432f4af47195",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1060,
        "wires": []
    },
    {
        "id": "cec9728db4de3879",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1120,
        "wires": []
    },
    {
        "id": "f8d415a5cf1bb0cc",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Crear_TablaSensores",
        "func": "/*Este nodo crea en la BD la tabla Sensores, que contendrá \nun listado de los sensores declarados en la máquina\n*/\nmsg.topic=\"USE \"+flow.get('DBname')+\" ;\";\nmsg.topic = msg.topic + \"CREATE TABLE Sensores (ID INT AUTO_INCREMENT PRIMARY KEY,Sensor VARCHAR(50) NULL,Unidad VARCHAR(50) NULL);\";\nmsg.topic += \"SELECT 'OK' AS ConfirmationMessage;\"; // Agrega una consulta para obtener el mensaje de confirmación\n\nmsg.topic=msg.topic;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "115384ecace6e485"
            ]
        ]
    },
    {
        "id": "7ad2c383b864864a",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "NOW 1 D",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 1180,
        "wires": []
    },
    {
        "id": "dae7ee5c21a07a40",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "Instrucciones para crear una nueva máquina",
        "info": "# Esta porción del programa se encarga de:\n    -Crear en el servidor de BBDD una nueva base de datos para la máquina definida.\n    \n    -Crear dentro de esta BD de máquina las tablas General y Sensores.\n\n# -------PROCEDIMIENTO---------\n1.-Abrir el cuadro de propiedades del nodo `Definir Máquina nueva` haciendo doble click sobre él.\n2.-Introducir a la derecha del campo msg.payload el *Nombre de la máquina* que queremos crear.\n3.-Hacer click en `Done` en la esquina superior derecha del cuadro de propiedades para guardar los cambios en el nodo.\n4.-Hacer click en `Deploy` en la esquina superior derecha de la pantalla para aplicar los cambios.\n5.-Hacer click en el `botón` del nodo `Definir Máquina Nueva`.\n\nSi hemos creado la máquina correctamente observaremos en la ventana de debug en la zona derecha de la pantalla el mensaje: \n\n    \"Máquina *Nombre de la máquina* registrada con éxito\"\n\n5.-Seguidamente nos dirigimos al menú de opciones de node-red en la esquina superior derecha de la pantalla y hacemos clic en Import...\n\n6.-Dentro de la carpeta Local seleccionamos el archivo FlowMaquinaDefinitivo y elegimos la opcion New Flow. A continuación hacemos clic en importar y después add copy en la ventana emergente. Esto nos creará un nuevo flow para nuestra recién creada máquina, donde tendremos que entrar a configurar los nodos de Definir_. Este proceso se explica con detalle en los comentarios presentes dentro del propio flow.",
        "x": 190,
        "y": 140,
        "wires": []
    },
    {
        "id": "7d91809cc2e3e55f",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Mensaje de confirmación",
        "func": "/*Este nodo envía a la consola de debug cualquier mensaje \nde error del nodo MSSQL si se produjera. En caso de que la \nescritura fuese correcta, envía un mensaje de confirmación.\n*/\nif(msg.error){\n    msg.payload = msg.error\n}else{\n    msg.payload = \"Máquina \" + flow.get('Maquina')+\" registrada con éxito\"\n    msg.topic= \"Notificación: \"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "e738f14807540d47",
                "1acd7eca01b2afd7"
            ]
        ]
    },
    {
        "id": "6aa0eab3a2318d50",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "INSTRUCCIONES PARA CREAR UN NUEVO SENSOR",
        "info": "# Esta porción del programa se encarga de:\n    -Crear en la BD de una máquina una tabla para almacenar la información de un sensor.\n    \n    -Registrar en la tabla Sensores ya existente en la máquina una nueva entrada donde quedan registrados los datos del sensor.\n\nIMPORTANTE: El Nombre del sensor debe coincidir con el nombre de la variable de sensor declarado en el nodo de entrada del datos del PLC\n\n# -------PROCEDIMIENTO---------\n1.-Abrir el cuadro de propiedades del nodo `Definir Sensor Nuevo` haciendo doble click sobre él.\n2.-Introducir a la derecha del campo msg.topic el *Nombre de la máquina* a la que el sensor pertenece.\n3.-Introducir a la derecha del campo msg.sensor el *Nombre del sensor* que queremos crear.\n4.-Introducir a la derecha del campo msg.unidad la *unidad de ingenieria* que corresponde a este sensor.\n5.-Hacer click en `Done` en la esquina superior derecha del cuadro de propiedades para guardar los cambios en el nodo.\n6.-Hacer click en `Deploy` en la esquina superior derecha de la pantalla para aplicar los cambios.\n7.-Hacer click en el `botón` del nodo `Definir Sensor Nuevo`.\n\nSi hemos creado el sensor correctamente observaremos en la ventana de debug en la zona derecha de la pantalla el mensaje:\n    \n    `Sensor *Nombre del sensor* registrado con éxito en la máquina *Nombre de la máquina*`",
        "x": 220,
        "y": 1020,
        "wires": []
    },
    {
        "id": "09ce8ac4961d09a9",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Mensaje de confirmación",
        "func": "\n/*Este nodo envía a la consola de debug cualquier mensaje \nde error del nodo MSSQL si se produjera. En caso de que la \nescritura fuese correcta, envía un mensaje de confirmación.\n*/\nif(msg.error){\n    msg.payload = msg.error\n}else{\n    msg.payload = \"Sensor \" + flow.get('Sensor') + \" registrado con éxito en la máquina Máquina \" + flow.get('Maquina');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1120,
        "wires": [
            [
                "cec9728db4de3879"
            ]
        ]
    },
    {
        "id": "583adc758af8a6df",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "INFORMACION SOBRE MODIFICACIONES",
        "info": "Si desea reestructurar la tabla General de la base de datos debe modificar el nodo `Crear_TablaGeneral`. El formato de los comandos e SQL.",
        "x": 550,
        "y": 20,
        "wires": []
    },
    {
        "id": "517e4a4fe46af2e8",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \"+flow.get('DBname')+\".sensores ORDER BY ID DESC LIMIT 1;\";\n\n\nmsg.topic = msg.topic;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1880,
        "wires": [
            [
                "aea80e8576512f9f"
            ]
        ]
    },
    {
        "id": "e326d771d58bf942",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "SELECT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1880,
        "wires": []
    },
    {
        "id": "6da00ed46de3d71c",
        "type": "inject",
        "z": "fe456245c351e442",
        "name": "CONFIRMAR ESCRITURA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1880,
        "wires": [
            [
                "517e4a4fe46af2e8"
            ]
        ]
    },
    {
        "id": "581ce4c1879363ec",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "DEFINIR",
        "info": "",
        "x": 160,
        "y": 20,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "c0b45adafd15abdf",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "CrearTablaDeSensor",
        "func": "/*Este nodo /*Este nodo envía a el nodo MSSQL el Query necesario para \nla creación de la Tabla de Sensor\n*/\nmsg.topic = \"USE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"SHOW VARIABLES LIKE 'sql_mode'; \";\nmsg.topic += \"CREATE TABLE `\" + flow.get('Sensor') + \"` (\";\nmsg.topic += \"`FechaHora` datetime DEFAULT CURRENT_TIMESTAMP, \";\nmsg.topic += \"`Proceso` varchar(50) NULL, \";\nmsg.topic += \"`Fase` varchar(50) NULL, \";\nmsg.topic += \"`Valor` varchar(50)) ENGINE = InnoDB;\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "2c5131dc46018072"
            ]
        ]
    },
    {
        "id": "500e1a16ae81ac7b",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "7d91809cc2e3e55f",
                "df1bd1a93705fe10"
            ]
        ]
    },
    {
        "id": "1b537d59dd1f7a14",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 300,
        "wires": [
            [
                "6eba8c87c47ae28a",
                "f8d415a5cf1bb0cc",
                "3a8504e8ef2d9a80"
            ]
        ]
    },
    {
        "id": "2c5131dc46018072",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1120,
        "wires": [
            [
                "09ce8ac4961d09a9",
                "8b0da81f61200540"
            ]
        ]
    },
    {
        "id": "165ce4aeb2f635fe",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1180,
        "wires": [
            [
                "7ad2c383b864864a",
                "c66934db9712bd8e"
            ]
        ]
    },
    {
        "id": "aea80e8576512f9f",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1880,
        "wires": [
            [
                "e326d771d58bf942"
            ]
        ]
    },
    {
        "id": "0e0d90c914a0e84f",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 360,
        "wires": []
    },
    {
        "id": "115384ecace6e485",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 360,
        "wires": [
            [
                "0e0d90c914a0e84f",
                "202579f79f9a8e12",
                "df58550db1dac513"
            ]
        ]
    },
    {
        "id": "8b0da81f61200540",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "EscrituraEnSensores",
        "func": "/*Este nodo envia al nodo MSSQL el Query necesario para\nregistrar en la tabla Sensores el nuevo sensor creado\n*/\nmsg.topic = \"INSERT INTO \"+flow.get('DBname')+\".Sensores(Sensor,Unidad) VALUES ('\";\nmsg.topic = msg.topic + flow.get('Sensor') + \"','\";\nmsg.topic = msg.topic + flow.get('Unidad') + \"');\";\n    \nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1180,
        "wires": [
            [
                "165ce4aeb2f635fe"
            ]
        ]
    },
    {
        "id": "6e4422fe2f771a2a",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "INSTRUCCIONES PARA CONFIRMAR LA ESCRITURA",
        "info": "",
        "x": 260,
        "y": 1840,
        "wires": []
    },
    {
        "id": "8b23129f02a48ecf",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "FUNCIONES",
        "info": "",
        "x": 510,
        "y": 140,
        "wires": []
    },
    {
        "id": "61973a55c36edc39",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "BASES DE DATOS",
        "info": "",
        "x": 790,
        "y": 140,
        "wires": []
    },
    {
        "id": "fc274467ec271715",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "CONFIRMACIONES",
        "info": "",
        "x": 1050,
        "y": 140,
        "wires": []
    },
    {
        "id": "9d4599067ba72c3f",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "DEBUG",
        "info": "",
        "x": 1310,
        "y": 140,
        "wires": []
    },
    {
        "id": "a5afd8f090a8e6c5",
        "type": "template",
        "z": "fe456245c351e442",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "e37f29b3a734fa56"
            ]
        ]
    },
    {
        "id": "6b3c45ac343430d7",
        "type": "template",
        "z": "fe456245c351e442",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 140,
        "y": 1140,
        "wires": [
            [
                "491052ef34f193e5"
            ]
        ]
    },
    {
        "id": "491052ef34f193e5",
        "type": "rbe",
        "z": "fe456245c351e442",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "27819f21813778b3"
            ]
        ]
    },
    {
        "id": "e37f29b3a734fa56",
        "type": "rbe",
        "z": "fe456245c351e442",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 300,
        "wires": [
            [
                "655a488ab9285c10"
            ]
        ]
    },
    {
        "id": "c68c8670ea712aaf",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "Maquina OK",
        "mode": "link",
        "links": [],
        "x": 1485,
        "y": 180,
        "wires": []
    },
    {
        "id": "1acd7eca01b2afd7",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "BDD OK",
        "mode": "link",
        "links": [],
        "x": 1495,
        "y": 240,
        "wires": []
    },
    {
        "id": "3a8504e8ef2d9a80",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "Tabla General",
        "mode": "link",
        "links": [],
        "x": 1485,
        "y": 300,
        "wires": []
    },
    {
        "id": "202579f79f9a8e12",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "Tabla Sensores",
        "mode": "link",
        "links": [],
        "x": 1485,
        "y": 360,
        "wires": []
    },
    {
        "id": "69b2081723ea60f3",
        "type": "link in",
        "z": "fe456245c351e442",
        "name": "link in 16",
        "links": [],
        "x": 45,
        "y": 260,
        "wires": [
            [
                "655a488ab9285c10",
                "9c36ded64963cef9"
            ]
        ]
    },
    {
        "id": "e6ecda85de2269b2",
        "type": "link in",
        "z": "fe456245c351e442",
        "name": "link in 18",
        "links": [],
        "x": 385,
        "y": 1900,
        "wires": [
            [
                "517e4a4fe46af2e8"
            ]
        ]
    },
    {
        "id": "8dbf8cf98ca57348",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Crear _tablaError_logs_http",
        "func": "msg.topic = \"USE \" + flow.get('DBname') + \";\";\nmsg.topic += \" SET @@SQL_MODE='ANSI';\";\n\nmsg.topic += \"CREATE TABLE http_error_logs (\";\nmsg.topic += \"FechaHora DATETIME,\";\nmsg.topic += \"Error VARCHAR(50)\";\nmsg.topic += \");\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 480,
        "wires": [
            [
                "1d67839bfda76054",
                "6ea897dff2b7691e"
            ]
        ]
    },
    {
        "id": "1d67839bfda76054",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "9c36ded64963cef9",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "link out 1",
        "mode": "link",
        "links": [],
        "x": 35,
        "y": 300,
        "wires": []
    },
    {
        "id": "ac1847d6c60a1d31",
        "type": "inject",
        "z": "fe456245c351e442",
        "name": "CAMBIAR DE MÁQUINA",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "DHUL",
        "payloadType": "str",
        "x": 190,
        "y": 2140,
        "wires": [
            [
                "41a1cda626f9b24c",
                "0dc723b10f009bdc"
            ]
        ]
    },
    {
        "id": "41a1cda626f9b24c",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "function 28",
        "func": "flow.set('Maquina', msg.payload)\n\nflow.set('DBname', \"INT_\" + flow.get('Maquina'));\n\nmsg.payload = flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2140,
        "wires": [
            [
                "57e751de4ca885da"
            ]
        ]
    },
    {
        "id": "57e751de4ca885da",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 2140,
        "wires": []
    },
    {
        "id": "db5810f07997abce",
        "type": "link in",
        "z": "fe456245c351e442",
        "name": "Cambiar de Maquina",
        "links": [],
        "x": 325,
        "y": 2180,
        "wires": [
            [
                "e2608d569a6d7799"
            ]
        ]
    },
    {
        "id": "e2608d569a6d7799",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "JSON PARSE",
        "func": "// Parsear el JSON y extraer el valor de \"velocidad\"\nvar payload = JSON.parse(msg.payload);\nvar topicValue = payload.topic;\n\n// Crear un nuevo mensaje solo con el valor de \"velocidad\"\nmsg.payload = topicValue;\n\n// Enviar el mensaje al nodo Switch\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2180,
        "wires": [
            [
                "41a1cda626f9b24c",
                "8159c4597e9ff605"
            ]
        ]
    },
    {
        "id": "29be0355e0cbb1b9",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "INSTRUCCIONES PARA CAMBIAR DE MÁQUINA",
        "info": "",
        "x": 270,
        "y": 2100,
        "wires": []
    },
    {
        "id": "2a27ac8ccbb5a029",
        "type": "websocket in",
        "z": "fe456245c351e442",
        "name": "",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "a5afd8f090a8e6c5"
            ]
        ]
    },
    {
        "id": "ea6ce0f9100e1cf5",
        "type": "websocket in",
        "z": "fe456245c351e442",
        "name": "",
        "x": 100,
        "y": 1100,
        "wires": [
            [
                "6b3c45ac343430d7"
            ]
        ]
    },
    {
        "id": "72e8f7980ba4f38b",
        "type": "websocket in",
        "z": "fe456245c351e442",
        "name": "",
        "x": 140,
        "y": 1920,
        "wires": [
            [
                "7089633ad89f664c"
            ]
        ]
    },
    {
        "id": "7089633ad89f664c",
        "type": "template",
        "z": "fe456245c351e442",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 1960,
        "wires": [
            [
                "06666da284a42cab"
            ]
        ]
    },
    {
        "id": "06666da284a42cab",
        "type": "rbe",
        "z": "fe456245c351e442",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 2000,
        "wires": [
            [
                "517e4a4fe46af2e8"
            ]
        ]
    },
    {
        "id": "a1a5332df372dcf6",
        "type": "websocket in",
        "z": "fe456245c351e442",
        "name": "",
        "x": 140,
        "y": 2180,
        "wires": [
            [
                "0616a73e0688c81c"
            ]
        ]
    },
    {
        "id": "0616a73e0688c81c",
        "type": "template",
        "z": "fe456245c351e442",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 2220,
        "wires": [
            [
                "d7ac60e2743f2a36"
            ]
        ]
    },
    {
        "id": "d7ac60e2743f2a36",
        "type": "rbe",
        "z": "fe456245c351e442",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 2260,
        "wires": [
            [
                "e2608d569a6d7799"
            ]
        ]
    },
    {
        "id": "e1fe3618add50975",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "DEFINIR SENSOR ",
        "mode": "link",
        "links": [],
        "x": 55,
        "y": 1160,
        "wires": []
    },
    {
        "id": "0dc723b10f009bdc",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "Cambiar de Maquina Dashboard Autoclave",
        "mode": "link",
        "links": [],
        "x": 565,
        "y": 2100,
        "wires": []
    },
    {
        "id": "8159c4597e9ff605",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "Cambiar de Maquina Dashboard Autoclave",
        "mode": "link",
        "links": [],
        "x": 705,
        "y": 2220,
        "wires": []
    },
    {
        "id": "ba95bb4f886de547",
        "type": "inject",
        "z": "fe456245c351e442",
        "name": "DEFINIR NUEVO SENSOR ANALOGICA",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "sensor",
                "v": "FASE",
                "vt": "str"
            },
            {
                "p": "unidad",
                "v": "REGISTRO",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 1300,
        "wires": [
            [
                "96a201baf6f10fd6",
                "1c7463053cfcfe3f"
            ]
        ]
    },
    {
        "id": "96a201baf6f10fd6",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1320,
        "wires": [
            [
                "57f76f325fc9a087",
                "86cb60a81f6b2bed"
            ]
        ]
    },
    {
        "id": "57f76f325fc9a087",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1320,
        "wires": []
    },
    {
        "id": "497d5878a4caadd3",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1380,
        "wires": []
    },
    {
        "id": "7fc8a83afcc10a85",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1440,
        "wires": []
    },
    {
        "id": "b007e0da5a470a37",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "INSTRUCCIONES PARA CREAR UN NUEVO SENSOR",
        "info": "# Esta porción del programa se encarga de:\n    -Crear en la BD de una máquina una tabla para almacenar la información de un sensor.\n    \n    -Registrar en la tabla Sensores ya existente en la máquina una nueva entrada donde quedan registrados los datos del sensor.\n\nIMPORTANTE: El Nombre del sensor debe coincidir con el nombre de la variable de sensor declarado en el nodo de entrada del datos del PLC\n\n# -------PROCEDIMIENTO---------\n1.-Abrir el cuadro de propiedades del nodo `Definir Sensor Nuevo` haciendo doble click sobre él.\n2.-Introducir a la derecha del campo msg.topic el *Nombre de la máquina* a la que el sensor pertenece.\n3.-Introducir a la derecha del campo msg.sensor el *Nombre del sensor* que queremos crear.\n4.-Introducir a la derecha del campo msg.unidad la *unidad de ingenieria* que corresponde a este sensor.\n5.-Hacer click en `Done` en la esquina superior derecha del cuadro de propiedades para guardar los cambios en el nodo.\n6.-Hacer click en `Deploy` en la esquina superior derecha de la pantalla para aplicar los cambios.\n7.-Hacer click en el `botón` del nodo `Definir Sensor Nuevo`.\n\nSi hemos creado el sensor correctamente observaremos en la ventana de debug en la zona derecha de la pantalla el mensaje:\n    \n    `Sensor *Nombre del sensor* registrado con éxito en la máquina *Nombre de la máquina*`",
        "x": 240,
        "y": 1260,
        "wires": []
    },
    {
        "id": "d887a1f5ecf61372",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Mensaje de confirmación",
        "func": "\n/*Este nodo envía a la consola de debug cualquier mensaje \nde error del nodo MSSQL si se produjera. En caso de que la \nescritura fuese correcta, envía un mensaje de confirmación.\n*/\nif(msg.error){\n    msg.payload = msg.error\n}else{\n    msg.payload = \"Sensor \" + flow.get('Sensor') + \" registrado con éxito en la máquina Máquina \" + flow.get('Maquina');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1380,
        "wires": [
            [
                "497d5878a4caadd3"
            ]
        ]
    },
    {
        "id": "86cb60a81f6b2bed",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "CrearTablaDeSensor",
        "func": "/*Este nodo envía a el nodo MSSQL el Query necesario para \nla creación de la Tabla de Sensor\n*/\nmsg.topic = \"USE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"SHOW VARIABLES LIKE 'sql_mode'; \";\nmsg.topic += \"CREATE TABLE `\" + flow.get('Sensor') + \"` (\";\nmsg.topic += \"`FechaHora` datetime DEFAULT CURRENT_TIMESTAMP, \";\nmsg.topic += \"`Proceso` varchar(50) NULL, \";\nmsg.topic += \"`Fase` varchar(50) NULL, \";\nmsg.topic += \"`\" + flow.get('Sensor') + \"` varchar(50), \";\nmsg.topic += \"`SP\" + flow.get('Sensor') + \"` varchar(50)) ENGINE = InnoDB;\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1380,
        "wires": [
            [
                "3f3d12b3973aad33"
            ]
        ]
    },
    {
        "id": "3f3d12b3973aad33",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1380,
        "wires": [
            [
                "d887a1f5ecf61372",
                "5b10ae88e67469ba"
            ]
        ]
    },
    {
        "id": "3e3438c6190886de",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1440,
        "wires": [
            [
                "7fc8a83afcc10a85",
                "aae73db31c3e356b"
            ]
        ]
    },
    {
        "id": "5b10ae88e67469ba",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "EscrituraEnSensores",
        "func": "/*Este nodo envia al nodo MSSQL el Query necesario para\nregistrar en la tabla Sensores el nuevo sensor creado\n*/\nmsg.topic = \"INSERT INTO \"+flow.get('DBname')+\".Sensores(Sensor,Unidad) VALUES ('\";\nmsg.topic = msg.topic + flow.get('Sensor') + \"','\";\nmsg.topic = msg.topic + flow.get('Unidad') + \"');\";\n    \nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1440,
        "wires": [
            [
                "3e3438c6190886de"
            ]
        ]
    },
    {
        "id": "992a2aad5a698e4b",
        "type": "template",
        "z": "fe456245c351e442",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 160,
        "y": 1400,
        "wires": [
            [
                "1b93f29685f5dd2d"
            ]
        ]
    },
    {
        "id": "1b93f29685f5dd2d",
        "type": "rbe",
        "z": "fe456245c351e442",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 1440,
        "wires": [
            [
                "96a201baf6f10fd6"
            ]
        ]
    },
    {
        "id": "9c583774190a376f",
        "type": "websocket in",
        "z": "fe456245c351e442",
        "name": "",
        "x": 120,
        "y": 1360,
        "wires": [
            [
                "992a2aad5a698e4b"
            ]
        ]
    },
    {
        "id": "1c7463053cfcfe3f",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "DEFINIR SENSOR ",
        "mode": "link",
        "links": [],
        "x": 75,
        "y": 1420,
        "wires": []
    },
    {
        "id": "7a5f22bea218e0ae",
        "type": "inject",
        "z": "fe456245c351e442",
        "name": "DEFINIR NUEVO EVENTO",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "sensor",
                "v": "E1",
                "vt": "str"
            },
            {
                "p": "unidad",
                "v": "M3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "3",
        "x": 180,
        "y": 1580,
        "wires": [
            [
                "bcd8d633cd8aa6f2",
                "ae9b6cfc72cb758b"
            ]
        ]
    },
    {
        "id": "bcd8d633cd8aa6f2",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1580,
        "wires": [
            [
                "a2dfa758d8405a13",
                "6197a67be9d8c398"
            ]
        ]
    },
    {
        "id": "a2dfa758d8405a13",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1580,
        "wires": []
    },
    {
        "id": "a6556c6665527526",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1640,
        "wires": []
    },
    {
        "id": "aa9e9e18b8a752e9",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1700,
        "wires": []
    },
    {
        "id": "ba7a6d09eab848ac",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "INSTRUCCIONES PARA CREAR UN NUEVO SENSOR",
        "info": "# Esta porción del programa se encarga de:\n    -Crear en la BD de una máquina una tabla para almacenar la información de un sensor.\n    \n    -Registrar en la tabla Sensores ya existente en la máquina una nueva entrada donde quedan registrados los datos del sensor.\n\nIMPORTANTE: El Nombre del sensor debe coincidir con el nombre de la variable de sensor declarado en el nodo de entrada del datos del PLC\n\n# -------PROCEDIMIENTO---------\n1.-Abrir el cuadro de propiedades del nodo `Definir Sensor Nuevo` haciendo doble click sobre él.\n2.-Introducir a la derecha del campo msg.topic el *Nombre de la máquina* a la que el sensor pertenece.\n3.-Introducir a la derecha del campo msg.sensor el *Nombre del sensor* que queremos crear.\n4.-Introducir a la derecha del campo msg.unidad la *unidad de ingenieria* que corresponde a este sensor.\n5.-Hacer click en `Done` en la esquina superior derecha del cuadro de propiedades para guardar los cambios en el nodo.\n6.-Hacer click en `Deploy` en la esquina superior derecha de la pantalla para aplicar los cambios.\n7.-Hacer click en el `botón` del nodo `Definir Sensor Nuevo`.\n\nSi hemos creado el sensor correctamente observaremos en la ventana de debug en la zona derecha de la pantalla el mensaje:\n    \n    `Sensor *Nombre del sensor* registrado con éxito en la máquina *Nombre de la máquina*`",
        "x": 240,
        "y": 1540,
        "wires": []
    },
    {
        "id": "12ba3209376a1ef2",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Mensaje de confirmación",
        "func": "\n/*Este nodo envía a la consola de debug cualquier mensaje \nde error del nodo MSSQL si se produjera. En caso de que la \nescritura fuese correcta, envía un mensaje de confirmación.\n*/\nif(msg.error){\n    msg.payload = msg.error\n}else{\n    msg.payload = \"Sensor \" + flow.get('Sensor') + \" registrado con éxito en la máquina Máquina \" + flow.get('Maquina');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1640,
        "wires": [
            [
                "a6556c6665527526"
            ]
        ]
    },
    {
        "id": "6197a67be9d8c398",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "CrearTablaDeSensor",
        "func": "/*Este nodo envía a el nodo MSSQL el Query necesario para \nla creación de la Tabla de Sensor\n*/\nmsg.topic = \"USE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"SHOW VARIABLES LIKE 'sql_mode'; \";\nmsg.topic += \"CREATE TABLE `\" + flow.get('Sensor') + \"` (\";\nmsg.topic += \"`FechaHora` datetime DEFAULT CURRENT_TIMESTAMP, \";\nmsg.topic += \"`Proceso` varchar(50) NULL, \";\nmsg.topic += \"`Fase` varchar(50) NULL, \";\nmsg.topic += \"`Evento` varchar(50)) ENGINE = InnoDB;\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1640,
        "wires": [
            [
                "4272f7a9ad1a27c6"
            ]
        ]
    },
    {
        "id": "4272f7a9ad1a27c6",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1640,
        "wires": [
            [
                "12ba3209376a1ef2",
                "9fd73666c9d5945b"
            ]
        ]
    },
    {
        "id": "e229e12aa4d0befd",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1700,
        "wires": [
            [
                "aa9e9e18b8a752e9",
                "2fba9ca40976ed13"
            ]
        ]
    },
    {
        "id": "9fd73666c9d5945b",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "EscrituraEnSensores",
        "func": "/*Este nodo envia al nodo MSSQL el Query necesario para\nregistrar en la tabla Sensores el nuevo sensor creado\n*/\nmsg.topic = \"INSERT INTO \"+flow.get('DBname')+\".Sensores(Sensor,Unidad) VALUES ('\";\nmsg.topic = msg.topic + flow.get('Sensor') + \"','\";\nmsg.topic = msg.topic + flow.get('Unidad') + \"');\";\n    \nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1700,
        "wires": [
            [
                "e229e12aa4d0befd"
            ]
        ]
    },
    {
        "id": "ae3221d50514c14a",
        "type": "template",
        "z": "fe456245c351e442",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 160,
        "y": 1660,
        "wires": [
            [
                "67e00ef7615616cb"
            ]
        ]
    },
    {
        "id": "67e00ef7615616cb",
        "type": "rbe",
        "z": "fe456245c351e442",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 1700,
        "wires": [
            [
                "bcd8d633cd8aa6f2"
            ]
        ]
    },
    {
        "id": "46a5c6475879a604",
        "type": "websocket in",
        "z": "fe456245c351e442",
        "name": "",
        "x": 120,
        "y": 1620,
        "wires": [
            [
                "ae3221d50514c14a"
            ]
        ]
    },
    {
        "id": "ae9b6cfc72cb758b",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "DEFINIR SENSOR ",
        "mode": "link",
        "links": [],
        "x": 75,
        "y": 1680,
        "wires": []
    },
    {
        "id": "92838050aff3fc80",
        "type": "inject",
        "z": "fe456245c351e442",
        "name": "DEFINIR NUEVO SENSOR STRING",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "sensor",
                "v": "LOTE",
                "vt": "str"
            },
            {
                "p": "unidad",
                "v": "REGISTRO",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "1",
        "x": 180,
        "y": 800,
        "wires": [
            [
                "4100641f2236e241",
                "70da9f0fc3987b21",
                "bafdb06dea621808"
            ]
        ]
    },
    {
        "id": "4100641f2236e241",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 800,
        "wires": [
            [
                "3f50906a50631a48",
                "b91ebee55fb6285d"
            ]
        ]
    },
    {
        "id": "3f50906a50631a48",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 800,
        "wires": []
    },
    {
        "id": "3893f25906798077",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "OK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 860,
        "wires": []
    },
    {
        "id": "daa90c3fb9658b1e",
        "type": "debug",
        "z": "fe456245c351e442",
        "name": "ESTO NO VIENE DE LA MISMA ENTRADA \"DEFINIR SENSOR\" ES LINEA DE ESCRITURA DESDE EL PLC",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 920,
        "wires": []
    },
    {
        "id": "f43ee7f29efa37cc",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "INSTRUCCIONES PARA CREAR UN NUEVO SENSOR",
        "info": "# Esta porción del programa se encarga de:\n    -Crear en la BD de una máquina una tabla para almacenar la información de un sensor.\n    \n    -Registrar en la tabla Sensores ya existente en la máquina una nueva entrada donde quedan registrados los datos del sensor.\n\nIMPORTANTE: El Nombre del sensor debe coincidir con el nombre de la variable de sensor declarado en el nodo de entrada del datos del PLC\n\n# -------PROCEDIMIENTO---------\n1.-Abrir el cuadro de propiedades del nodo `Definir Sensor Nuevo` haciendo doble click sobre él.\n2.-Introducir a la derecha del campo msg.topic el *Nombre de la máquina* a la que el sensor pertenece.\n3.-Introducir a la derecha del campo msg.sensor el *Nombre del sensor* que queremos crear.\n4.-Introducir a la derecha del campo msg.unidad la *unidad de ingenieria* que corresponde a este sensor.\n5.-Hacer click en `Done` en la esquina superior derecha del cuadro de propiedades para guardar los cambios en el nodo.\n6.-Hacer click en `Deploy` en la esquina superior derecha de la pantalla para aplicar los cambios.\n7.-Hacer click en el `botón` del nodo `Definir Sensor Nuevo`.\n\nSi hemos creado el sensor correctamente observaremos en la ventana de debug en la zona derecha de la pantalla el mensaje:\n    \n    `Sensor *Nombre del sensor* registrado con éxito en la máquina *Nombre de la máquina*`",
        "x": 220,
        "y": 760,
        "wires": []
    },
    {
        "id": "0e69894096fc9655",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Mensaje de confirmación",
        "func": "\n/*Este nodo envía a la consola de debug cualquier mensaje \nde error del nodo MSSQL si se produjera. En caso de que la \nescritura fuese correcta, envía un mensaje de confirmación.\n*/\nif(msg.error){\n    msg.payload = msg.error\n}else{\n    msg.payload = \"Sensor \" + flow.get('Sensor') + \" registrado con éxito en la máquina Máquina \" + flow.get('Maquina');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 860,
        "wires": [
            [
                "3893f25906798077"
            ]
        ]
    },
    {
        "id": "b91ebee55fb6285d",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "CrearTablaDeSensor",
        "func": "/*Este nodo envía a el nodo MSSQL el Query necesario para \nla creación de la Tabla de Sensor\n*/\nmsg.topic = \"USE `\" + flow.get('DBname') + \"`; \";\nmsg.topic += \"SHOW VARIABLES LIKE 'sql_mode'; \";\nmsg.topic += \"CREATE TABLE `\" + flow.get('Sensor') + \"` (\";\nmsg.topic += \"`FechaInicioLote` datetime DEFAULT CURRENT_TIMESTAMP, \";\nmsg.topic += \"`FechaFinLote` datetime DEFAULT CURRENT_TIMESTAMP, \";\nmsg.topic += \"`Proceso` varchar(50)) ENGINE = InnoDB;\";\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 860,
        "wires": [
            [
                "61bea67275ce32fa"
            ]
        ]
    },
    {
        "id": "61bea67275ce32fa",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 860,
        "wires": [
            [
                "0e69894096fc9655",
                "2a3a797e1f39f3b9"
            ]
        ]
    },
    {
        "id": "0666b562eaf09211",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 920,
        "wires": [
            [
                "daa90c3fb9658b1e",
                "bafdb06dea621808"
            ]
        ]
    },
    {
        "id": "2a3a797e1f39f3b9",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "EscrituraEnSensores",
        "func": "/*Este nodo envia al nodo MSSQL el Query necesario para\nregistrar en la tabla Sensores el nuevo sensor creado\n*/\nmsg.topic = \"INSERT INTO \"+flow.get('DBname')+\".Sensores(Sensor,Unidad) VALUES ('\";\nmsg.topic = msg.topic + flow.get('Sensor') + \"','\";\nmsg.topic = msg.topic + flow.get('Unidad') + \"');\";\n    \nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 920,
        "wires": [
            [
                "0666b562eaf09211"
            ]
        ]
    },
    {
        "id": "09deae4938c5c194",
        "type": "template",
        "z": "fe456245c351e442",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "a7ed6384db8be737"
            ]
        ]
    },
    {
        "id": "a7ed6384db8be737",
        "type": "rbe",
        "z": "fe456245c351e442",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 210,
        "y": 920,
        "wires": [
            [
                "4100641f2236e241"
            ]
        ]
    },
    {
        "id": "285d4a8263e982ea",
        "type": "websocket in",
        "z": "fe456245c351e442",
        "name": "",
        "x": 100,
        "y": 840,
        "wires": [
            [
                "09deae4938c5c194"
            ]
        ]
    },
    {
        "id": "70da9f0fc3987b21",
        "type": "link out",
        "z": "fe456245c351e442",
        "name": "DEFINIR SENSOR ",
        "mode": "link",
        "links": [],
        "x": 55,
        "y": 900,
        "wires": []
    },
    {
        "id": "5ccf2641bf768874",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 540,
        "wires": [
            [
                "4b8396de53e356d3"
            ]
        ]
    },
    {
        "id": "f45412b8050dc71c",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "-----------------------------------------------------AÑADIR PROCEDIMIENTOS INDIVIDUALES---------------------------------------",
        "info": "",
        "x": 690,
        "y": 720,
        "wires": []
    },
    {
        "id": "df58550db1dac513",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Crear _tabla ERROR LOG",
        "func": "msg.topic = \"USE \" + flow.get('DBname') + \";\";\nmsg.topic += \" SET @@SQL_MODE='ANSI';\";\n\nmsg.topic += \"CREATE TABLE Errorlog (\";\nmsg.topic += \"FechaHora DATETIME,\";\nmsg.topic += \"Error VARCHAR(50)\";\nmsg.topic += \");\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 420,
        "wires": [
            [
                "a910e0cc0683b7cb"
            ]
        ]
    },
    {
        "id": "a910e0cc0683b7cb",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 420,
        "wires": [
            [
                "8dbf8cf98ca57348"
            ]
        ]
    },
    {
        "id": "df1bd1a93705fe10",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Crear_TablaGeneral",
        "func": "let dbName = flow.get('DBname');\nlet adicional1 = flow.get('Adicional1');\nlet adicional2 = flow.get('Adicional2');\nlet adicional3 = flow.get('Adicional3');\nlet adicional4 = flow.get('Adicional4');\nlet adicional5 = flow.get('Adicional5');\nlet adicional6 = flow.get('Adicional6');\nlet adicional7 = flow.get('Adicional7');\nlet adicional8 = flow.get('Adicional8');\nlet adicional9 = flow.get('Adicional9');\nlet adicional10 = flow.get('Adiciona110');\nlet adicional11 = flow.get('Adicional11');\nlet adicional12 = flow.get('Adicional12');\nlet adicional13 = flow.get('Adicional3');\nlet adicional14 = flow.get('Adicional4');\nlet adicional15 = flow.get('Adicional5');\n\nmsg.topic = \"USE \" + dbName + \";\";\nmsg.topic += \" SET @@SQL_MODE='ANSI';\";\nmsg.topic += \"CREATE TABLE General (\";\nmsg.topic += \"9FechaHora DATETIME,\";\nmsg.topic += \"1LOTE VARCHAR(50),\";\nmsg.topic += \"2RECETA VARCHAR(50),\";\nmsg.topic += \"3PROCESO VARCHAR(50),\";\nmsg.topic += \"4FASE VARCHAR(50),\";\nmsg.topic += \"5OPERARIO VARCHAR(50),\";\nmsg.topic += \"zAVANCE_MANUAL VARCHAR(50),\";\nmsg.topic += \"zABORTAR VARCHAR(50),\";\nmsg.topic += \"zerror_ciclo VARCHAR(50),\"\n\nif (adicional1) {\n    msg.topic += adicional1 + \" VARCHAR(50),\";\n}\n\nif (adicional2) {\n    msg.topic += adicional2 + \" VARCHAR(50),\";\n}\n\nif (adicional3) {\n    msg.topic += adicional3 + \" VARCHAR(50),\";\n}\n\nif (adicional4) {\n    msg.topic += adicional4 + \" VARCHAR(50),\";\n}\n\nif (adicional5) {\n    msg.topic += adicional5 + \" VARCHAR(50),\";\n}\n\nif (adicional6) {\n    msg.topic += adicional6 + \" VARCHAR(50),\";\n}\n\nif (adicional7) {\n    msg.topic += adicional7 + \" VARCHAR(50),\";\n}\n\nif (adicional8) {\n    msg.topic += adicional8 + \" VARCHAR(50),\";\n}\n\nif (adicional9) {\n    msg.topic += adicional9 + \" VARCHAR(50),\";\n}\n\nif (adicional10) {\n    msg.topic += adicional10 + \" VARCHAR(50),\";\n}\n\nif (adicional11) {\n    msg.topic += adicional11 + \" VARCHAR(50),\";\n}\n\nif (adicional12) {\n    msg.topic += adicional12 + \" VARCHAR(50),\";\n}\n\n\nif (adicional13) {\n    msg.topic += adicional13 + \" VARCHAR(50),\";\n}\n\n\nif (adicional14) {\n    msg.topic += adicional14 + \" VARCHAR(50),\";\n}\n\n\nif (adicional15) {\n    msg.topic += adicional15 + \" VARCHAR(50),\";\n}\n\n\n\nmsg.topic += \"ERROR_CICLO VARCHAR(50)\";\nmsg.topic += \");\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 300,
        "wires": [
            [
                "1b537d59dd1f7a14"
            ]
        ]
    },
    {
        "id": "c66934db9712bd8e",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Agregar a la tabla de Control ",
        "func": "\n\n/*Este nodo /*Este nodo envía a el nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n/* Este nodo envía al nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n*/\n\nmsg.topic = \"ALTER TABLE `\" + flow.get('DBname') + \"`.control \";\nmsg.topic += \"ADD COLUMN `\" + flow.get('Sensor') + \"C` varchar(50);\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "3b6c08fe09faac1f"
            ]
        ]
    },
    {
        "id": "3b6c08fe09faac1f",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "bafdb06dea621808",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Agregar a la tabla de Control ",
        "func": "\n\n/*Este nodo /*Este nodo envía a el nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n/* Este nodo envía al nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n*/\n\nmsg.topic = \"ALTER TABLE `\" + flow.get('DBname') + \"`.control \";\nmsg.topic += \"ADD COLUMN `\" + flow.get('Sensor') + \"C` varchar(50);\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 980,
        "wires": [
            [
                "eec1691b5d00eecf"
            ]
        ]
    },
    {
        "id": "eec1691b5d00eecf",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "aae73db31c3e356b",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Agregar a la tabla de Control ",
        "func": "\n\n/*Este nodo /*Este nodo envía a el nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n/* Este nodo envía al nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n*/\n\nmsg.topic = \"ALTER TABLE `\" + flow.get('DBname') + \"`.control \";\nmsg.topic += \"ADD COLUMN `\" + flow.get('Sensor') + \"C` varchar(50),\";\nmsg.topic += \"ADD COLUMN `\" + flow.get('Sensor') + \"CA` varchar(50);\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1500,
        "wires": [
            [
                "278a45438571c1fc"
            ]
        ]
    },
    {
        "id": "278a45438571c1fc",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "2fba9ca40976ed13",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Agregar a la tabla de Control",
        "func": "\n\n/*Este nodo /*Este nodo envía a el nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n/* Este nodo envía al nodo SQL el Query necesario para \nla creación de la columna del sensor en la tabla de Control.\n*/\n\nmsg.topic = \"ALTER TABLE `\" + flow.get('DBname') + \"`.control \";\nmsg.topic += \"ADD COLUMN `\" + flow.get('Sensor') + \"C` varchar(50);\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1760,
        "wires": [
            [
                "07410c91c4f5d647"
            ]
        ]
    },
    {
        "id": "07410c91c4f5d647",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "4b8396de53e356d3",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Crear_Tabla_BITVIDA",
        "func": "msg.topic = \"USE \" + flow.get('DBname') + \";\";\nmsg.topic += \" SET @@SQL_MODE='ANSI';\";\n\nmsg.topic += \"CREATE TABLE BITVIDA (\";\nmsg.topic += \"ID VARCHAR(50),\";\nmsg.topic += \"BIT VARCHAR(50)\"; \nmsg.topic += \");\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 600,
        "wires": [
            [
                "557eb0fd5ceccc85"
            ]
        ]
    },
    {
        "id": "557eb0fd5ceccc85",
        "type": "mysql",
        "z": "fe456245c351e442",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 780,
        "y": 600,
        "wires": [
            [
                "18789547bcd78fe5"
            ]
        ]
    },
    {
        "id": "18789547bcd78fe5",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "PROC MAQUINAS",
        "func": "msg.topic = \"DELIMITER $$ CREATE DEFINER=`root`@`localhost` PROCEDURE `actualizar_nombres_basedatos_int`() BEGIN DECLARE done BOOLEAN DEFAULT FALSE; DECLARE db_name VARCHAR(255); DECLARE cur CURSOR FOR SELECT SCHEMA_NAME FROM information_schema.SCHEMATA WHERE SCHEMA_NAME LIKE 'int_%'; DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; OPEN cur; read_loop: LOOP FETCH cur INTO db_name; IF done THEN LEAVE read_loop; END IF; IF NOT EXISTS (SELECT 1 FROM maquinas WHERE nombre = db_name) THEN INSERT INTO maquinas (nombre) VALUES (db_name); END IF; END LOOP; CLOSE cur; END$$ DELIMITER ; \"\nmsg.topic += \");\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 660,
        "wires": [
            [
                "557eb0fd5ceccc85"
            ]
        ]
    },
    {
        "id": "3792e4b7b8bef758",
        "type": "comment",
        "z": "fe456245c351e442",
        "name": "LISTADO DE MAQUINAS",
        "info": "LC01\nLC02\nRECEPCION\n",
        "x": 590,
        "y": 2260,
        "wires": []
    },
    {
        "id": "6ea897dff2b7691e",
        "type": "function",
        "z": "fe456245c351e442",
        "name": "Crear_Tabla_FASE",
        "func": "msg.topic = \"USE \" + flow.get('DBname') + \";\";\nmsg.topic += \" SET @@SQL_MODE='ANSI';\";\n\nmsg.topic += \"CREATE TABLE CODFASE (\";\nmsg.topic += \"FASE VARCHAR(50),\";\nmsg.topic += \"CODIGO VARCHAR(50)\";\nmsg.topic += \");\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 540,
        "wires": [
            [
                "5ccf2641bf768874"
            ]
        ]
    },
    {
        "id": "d78ca7a9adcffefb",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "Salidas Http CON TOKEN",
        "info": "",
        "x": 2590,
        "y": 1400,
        "wires": []
    },
    {
        "id": "ffc6df94fbf48634",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "Escritura de errores de Envío en la base de Datos de la Máquina.",
        "info": "// Este nodo reconoce automaticamente el nombre de la máquina cuando se inserta en el flow \"Añadir máquinas y equipos\".\n//Después crea una nueva tabla en la base de datos de la máquina bajo el nombre \"http_error_logs\".\n//En esta tabla se registran todos los errores de envío del nodo http request.",
        "x": 3210,
        "y": 1260,
        "wires": []
    },
    {
        "id": "3d76adac8269e8d7",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = (msg.payload)\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 1520,
        "wires": [
            [
                "8723b71ee8f52cf6"
            ]
        ]
    },
    {
        "id": "f5300ba31ae9430c",
        "type": "link in",
        "z": "6abff7f95fadc4e4",
        "name": "Definir_Máquina",
        "links": [],
        "x": 3595,
        "y": 1520,
        "wires": [
            [
                "3d76adac8269e8d7"
            ]
        ]
    },
    {
        "id": "076388702ad8ebb8",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAYLOAD TO SQL",
        "func": "flow.get('Maquina') \nflow.get('DBname')\n\n\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".http_error_logs VALUES(\" +(msg.payload)+ \");\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1560,
        "wires": [
            [
                "8723b71ee8f52cf6",
                "e9dc5ff9d86e0750"
            ]
        ]
    },
    {
        "id": "8723b71ee8f52cf6",
        "type": "debug",
        "z": "6abff7f95fadc4e4",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3960,
        "y": 1560,
        "wires": []
    },
    {
        "id": "c7a817a07a713e41",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FILTRADO DE ERROR",
        "func": "// Verificar si el payload contiene \"Requesterror\"\nif (msg.payload && typeof msg.payload === 'string' && msg.payload.includes('RequestError:')) {\n    // Si el payload contiene \"Requesterror\", mantener el payload sin cambios\n    return msg;\n} else {\n    // Si no contiene \"Requesterror\", no enviar ningún payload\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 1600,
        "wires": [
            [
                "076388702ad8ebb8"
            ]
        ]
    },
    {
        "id": "eebc840297186fd4",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "OJO, ESTE FLOW YA SABE TAMBIÉN CON QUE MAQUINA ESTA TRABAJANDO",
        "info": "",
        "x": 330,
        "y": 580,
        "wires": []
    },
    {
        "id": "8430afba343bbd55",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Prepare TOKEN",
        "func": "var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://192.168.9.163/post_handler.php';\nmsg.headers = {\n    'content-type': 'application/json',\n    'TOKEN': TOKEN\n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = {\n    'TOKEN': TOKEN\n};\n\nmsg.payload = dataToSend;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 1520,
        "wires": [
            [
                "9f83c9ba579ce7b4"
            ]
        ]
    },
    {
        "id": "cfda19b2f3097c87",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "HTTP Request to External App",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2610,
        "y": 1600,
        "wires": [
            [
                "73035b6d970fce5a",
                "c7a817a07a713e41",
                "a12d03fa63a8e0b6",
                "ceac420fcffb23ae"
            ]
        ]
    },
    {
        "id": "73035b6d970fce5a",
        "type": "debug",
        "z": "6abff7f95fadc4e4",
        "name": "Debug Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2650,
        "y": 1640,
        "wires": []
    },
    {
        "id": "9f83c9ba579ce7b4",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2530,
        "y": 1560,
        "wires": [
            [
                "cfda19b2f3097c87"
            ]
        ]
    },
    {
        "id": "e2642c6cda95f250",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2540,
        "y": 1480,
        "wires": [
            [
                "8430afba343bbd55"
            ]
        ]
    },
    {
        "id": "79ac1a1f371c927d",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "LOCAL",
        "info": "",
        "x": 2810,
        "y": 1420,
        "wires": []
    },
    {
        "id": "fa640130512e8e85",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "info": "http://192.168.9.163/post_handler.php\n+ flow.get('token')",
        "x": 2840,
        "y": 1540,
        "wires": []
    },
    {
        "id": "ceac420fcffb23ae",
        "type": "debug",
        "z": "6abff7f95fadc4e4",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3700,
        "y": 1660,
        "wires": []
    },
    {
        "id": "a12d03fa63a8e0b6",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "ENVIA DATOS SI COINCIDE EL TOKEN",
        "func": "// Obtener el valor del token desde el contexto de flow\nvar token = flow.get('TOKEN');\nvar data = flow.get(\"ALUCOATJSON\");\n// Verificar si el token está presente en el payload y reemplazar si es necesario\nif (msg.payload !== undefined && token !== undefined && msg.payload === token) {\n    // Obtener el valor almacenado en el contexto flow (ALUCOATJSON)\n    var dataToSend = data;\n\n    // Verificar si ALUCOATJSON está definido y no es nulo\n    if (dataToSend !== undefined && dataToSend !== null) {\n        // Configurar los detalles del mensaje para enviar una solicitud POST\n        msg.method = 'POST';\n        msg.url = 'http://192.168.9.163/post_handler.php';\n        msg.headers = {\n            'content-type': 'application/json'\n        };\n        // Configurar el payload con los datos a enviar\n        msg.payload = {\n         \"Hola\": 12\n        };;\n\n        // Enviar el mensaje con los detalles configurados\n        return msg; // Devolver el mensaje para continuar con el flujo\n    } else {\n        node.error(\"ALUCOATJSON no está definido o es nulo\");\n    }\n} else {\n    node.warn(\"El token no está presente en el payload o no coincide con el token almacenado\");\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2640,
        "y": 1680,
        "wires": [
            [
                "674f5971e2721356",
                "fab4fb783519854b"
            ]
        ]
    },
    {
        "id": "fab4fb783519854b",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "HTTP Request to External App",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2610,
        "y": 1780,
        "wires": [
            [
                "c7a817a07a713e41"
            ]
        ]
    },
    {
        "id": "e698c1d45536f08c",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "¿QUIÉN ACTIVA LA DECLARACIÓN?",
        "info": "",
        "x": 3670,
        "y": 1440,
        "wires": []
    },
    {
        "id": "e0f8f68fe5d33730",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 1480,
        "wires": [
            [
                "586711a49e33c97b"
            ]
        ]
    },
    {
        "id": "586711a49e33c97b",
        "type": "debug",
        "z": "6abff7f95fadc4e4",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4000,
        "y": 1460,
        "wires": []
    },
    {
        "id": "c78c7034d2b37bfc",
        "type": "link in",
        "z": "6abff7f95fadc4e4",
        "name": "Definir Sensor 2",
        "links": [],
        "x": 3595,
        "y": 1480,
        "wires": [
            [
                "e0f8f68fe5d33730"
            ]
        ]
    },
    {
        "id": "70cffb7d1c34aa14",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "PENDIENTE DE DECLARAR VARIABLE PARA EL ENVIO",
        "info": "",
        "x": 2670,
        "y": 1820,
        "wires": []
    },
    {
        "id": "1f411e2131562a0e",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "LLEGA",
        "info": "",
        "x": 110,
        "y": 660,
        "wires": []
    },
    {
        "id": "18603896b34044f3",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "RECEPCION DE SOLICITUDES",
        "info": "",
        "x": 310,
        "y": 660,
        "wires": []
    },
    {
        "id": "b72f348a2839791d",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "DEVOLUCIÓN DE SOLICITUDES",
        "info": "",
        "x": 940,
        "y": 580,
        "wires": []
    },
    {
        "id": "6ee416137518f8a3",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "PENDIENTE",
        "info": "Agregar Token variable",
        "x": 350,
        "y": 1700,
        "wires": []
    },
    {
        "id": "674f5971e2721356",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2610,
        "y": 1740,
        "wires": [
            [
                "fab4fb783519854b"
            ]
        ]
    },
    {
        "id": "68d4ef3be7e055b2",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "info": "",
        "x": 2740,
        "y": 1500,
        "wires": []
    },
    {
        "id": "63d0994f4dabde64",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = (msg.payload)\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4500,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "bea8a89adb873e95",
        "type": "link in",
        "z": "6abff7f95fadc4e4",
        "name": "Definir_Máquina",
        "links": [],
        "x": 4375,
        "y": 2060,
        "wires": [
            [
                "63d0994f4dabde64"
            ]
        ]
    },
    {
        "id": "6842b8db26dd3972",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAYLOAD TO SQL",
        "func": "flow.get('Maquina') \nflow.get('DBname')\n\n\nmsg.topic = \"INSERT INTO INT_\" + flow.get('Maquina') + \".http_error_logs (Error) VALUES('\" +(msg.payload)+ \"');\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4510,
        "y": 2100,
        "wires": [
            [
                "c6feaf0a0121345f"
            ]
        ]
    },
    {
        "id": "4d7cb43c19a26b36",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "function 52",
        "func": "// Verificar si el payload contiene \"Requesterror\"\nif (msg.payload && typeof msg.payload === 'string' && msg.payload.includes('RequestError:')) {\n    // Si el payload contiene \"Requesterror\", mantener el payload sin cambios\n    return msg;\n} else {\n    // Si no contiene \"Requesterror\", no enviar ningún payload\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4490,
        "y": 2140,
        "wires": [
            [
                "6842b8db26dd3972"
            ]
        ]
    },
    {
        "id": "2e76644879215be5",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "HTTP Request to External App",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 4050,
        "y": 2140,
        "wires": [
            [
                "4d7cb43c19a26b36"
            ]
        ]
    },
    {
        "id": "873a98e54568bd93",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 3790,
        "y": 2140,
        "wires": [
            [
                "2e76644879215be5"
            ]
        ]
    },
    {
        "id": "f91f4a4066b0853d",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2370,
        "y": 2180,
        "wires": [
            [
                "ed9f769a22026446",
                "80aad68589882ded",
                "bda86d6755bb53f4"
            ]
        ]
    },
    {
        "id": "9d5ac5be7433332f",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "URL ANGEL",
        "info": "http://192.168.9.163/post_handler.php'",
        "x": 2710,
        "y": 2080,
        "wires": []
    },
    {
        "id": "963cdaa76c5165d8",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "URL ALUCOAT",
        "info": "'https://sigafactorydes.aliberico.com/apisignals/parameter/hist/testing'",
        "x": 2520,
        "y": 2080,
        "wires": []
    },
    {
        "id": "b52266114817e5c9",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "TOKEN",
        "info": " 'Authorization': 'Bearer ' + flow.get('token')",
        "x": 2350,
        "y": 2080,
        "wires": []
    },
    {
        "id": "ed9f769a22026446",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "MAQUINAS ACTIVAS",
        "func": "\n   msg.topic = \"SELECT * FROM alucoat.maquinas\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2640,
        "y": 2160,
        "wires": [
            [
                "61fc5b30de60791e"
            ]
        ]
    },
    {
        "id": "f905a3fd83f03862",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3110,
        "y": 2140,
        "wires": [
            [
                "d552d1680dd94578"
            ]
        ]
    },
    {
        "id": "80aad68589882ded",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SENSORES TIEMPO REAL",
        "func": "var Maquina=flow.get (\"Maquina\")\n  var query = \"SELECT Sensor FROM INT_\"+Maquina+\".Sensores \";\n\nmsg.payload=query\nmsg.topic=query\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2660,
        "y": 2200,
        "wires": [
            [
                "9540104aef7a38cd"
            ]
        ]
    },
    {
        "id": "b8f4a4b69d4d93ff",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "EMPAQUETADO HTTP",
        "func": "var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/maquinas_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 2140,
        "wires": [
            [
                "873a98e54568bd93"
            ]
        ]
    },
    {
        "id": "7f729479f383aceb",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "HTTP Request to External App",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3810,
        "y": 2200,
        "wires": [
            [
                "36407277837d1b57"
            ]
        ]
    },
    {
        "id": "96edea7a757f74f4",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 3530,
        "y": 2200,
        "wires": [
            [
                "7f729479f383aceb"
            ]
        ]
    },
    {
        "id": "10a4852eb279d5f7",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "EMPAQUETADO HTTP",
        "func": "var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/sensores_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 2200,
        "wires": [
            [
                "96edea7a757f74f4"
            ]
        ]
    },
    {
        "id": "79e42eea81b36269",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3110,
        "y": 2200,
        "wires": [
            [
                "10a4852eb279d5f7"
            ]
        ]
    },
    {
        "id": "ab87ee7c84fe569d",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "INSERCION EN FLOW",
        "func": "// Función para convertir una fecha en formato ISO 8601 a 'YYYY-MM-DD HH:MM:SS'\nfunction convertDateToMariaDBFormat(isoDate) {\n    var date = new Date(isoDate);\n    var year = date.getFullYear();\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var day = String(date.getDate()).padStart(2, '0');\n    var hours = String(date.getHours()).padStart(2, '0');\n    var minutes = String(date.getMinutes()).padStart(2, '0');\n    var seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\nvar Sensor = msg.payload.Sensor;\nvar FechaFin = msg.payload.FF;\nvar FechaInicio = msg.payload.FI;\n\n// Convertir las fechas al formato 'YYYY-MM-DD HH:MM:SS'\nvar FechaFinFormatted = convertDateToMariaDBFormat(FechaFin);\nvar FechaInicioFormatted = convertDateToMariaDBFormat(FechaInicio);\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\nflow.set(\"Sensor\", Sensor);\nflow.set(\"FechaFin\", FechaFinFormatted);\nflow.set(\"FechaInicio\", FechaInicioFormatted);\n\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 840,
        "wires": [
            [
                "e8eddb7951d7aebf"
            ]
        ]
    },
    {
        "id": "1038e1d70152f774",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1930,
        "y": 1020,
        "wires": [
            [
                "ead51490954a1898"
            ]
        ]
    },
    {
        "id": "642f4bdf5ac272e7",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "CUSTOM",
        "url": "/Proceso",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 100,
        "y": 760,
        "wires": [
            [
                "fa2ab83633d3b781",
                "49e767b963310f83"
            ]
        ]
    },
    {
        "id": "fa2ab83633d3b781",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 100,
        "y": 800,
        "wires": []
    },
    {
        "id": "f8a896fea51c5d4b",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAQUET",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/post_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "1038e1d70152f774"
            ]
        ]
    },
    {
        "id": "f8efb76a388d2383",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 290,
        "y": 1040,
        "wires": [
            [
                "9b12fefcad4adea5",
                "f8a896fea51c5d4b",
                "cbbc620f91a29444"
            ]
        ]
    },
    {
        "id": "6286e6626f21d4f7",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "DEFINIR PROCESO del Sensor",
        "func": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicio = flow.get(\"FechaInicio\");\nvar FechaFin = flow.get(\"FechaFin\");\n\nif (Maquina && Sensor && FechaInicio && FechaFin) {\n    var query = \"SELECT \" + Sensor + \", DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM INT_\" + Maquina + \".\" + Sensor + \" WHERE FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\";\n    msg.payload = query;\n    msg.topic = query;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 980,
        "wires": [
            [
                "f5d039354e887668"
            ]
        ]
    },
    {
        "id": "f6609aacdb61e5f3",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "sg41",
        "payloadType": "str",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "871e7035f9737770"
            ]
        ]
    },
    {
        "id": "7f497e58182b372d",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SET SENSOR ",
        "func": "flow.set(\"sensor\", msg.payload);\nvar Sensor= flow.get(\"sensor\");\nmsg.payload=Sensor\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "83809d77c93eebec",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "DECLARACION DE VARIABLE DE PAQUETE DE ENVÍO AUTOMÁTICO 1 ",
        "func": "flow.set(\"ALUCOATJSON\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "871e7035f9737770",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FLOW SET MAQUINA Y BDD",
        "func": "flow.set('Maquina', msg.payload)\n\nflow.set('DBname', \"INT_\" + flow.get('Maquina'));\n\nmsg.payload = flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "bbee89ec962ecc10",
        "type": "link in",
        "z": "6abff7f95fadc4e4",
        "name": "Cambiar de Maquina ",
        "links": [],
        "x": 125,
        "y": 80,
        "wires": [
            [
                "871e7035f9737770"
            ]
        ]
    },
    {
        "id": "b20abb8661c9ef56",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "DECLARACIÓN DE VARIABLES EN EL FLOW",
        "info": "",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "adbcac81da8e0841",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "DECLARACION DE VARIABLE DE PAQUETE DE ENVÍO AUTOMÁTICO 2",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3d6454cfbd86c0ca",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "DECLARACION DE VARIABLE DE PAQUETE DE ENVÍO AUTOMÁTICO 3",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "0e7f705291e586ad",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 280,
        "wires": [
            [
                "8a1e36cdb2aea4a4"
            ]
        ]
    },
    {
        "id": "8a1e36cdb2aea4a4",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "DEFINICION DE RANDOM",
        "func": "msg.payload = Math.floor(Math.random() * 12) + 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 280,
        "wires": [
            [
                "635dc27169d88f29"
            ]
        ]
    },
    {
        "id": "635dc27169d88f29",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "TOKEN",
        "func": "var TOKEN= msg.payload\nflow.set(\"TOKEN\",TOKEN);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "25b0ae928b48c7c3",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4.6743217",
        "payloadType": "num",
        "x": 360,
        "y": 340,
        "wires": [
            [
                "635dc27169d88f29"
            ]
        ]
    },
    {
        "id": "4bf6b30a97a08e5e",
        "type": "link in",
        "z": "6abff7f95fadc4e4",
        "name": "link in 20",
        "links": [],
        "x": 125,
        "y": 120,
        "wires": [
            [
                "7f497e58182b372d"
            ]
        ]
    },
    {
        "id": "593eb409fe9b3b42",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "ENTRADA PENDIENTE",
        "info": "",
        "x": 140,
        "y": 120,
        "wires": []
    },
    {
        "id": "bf3f9c644ca0ed1f",
        "type": "file in",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 340,
        "y": 380,
        "wires": [
            [
                "635dc27169d88f29"
            ]
        ]
    },
    {
        "id": "d6b50b60faae3e2d",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = (msg.payload)\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 660,
        "wires": [
            [
                "f879d4db2e101a84"
            ]
        ]
    },
    {
        "id": "0d8eab0c52c58fda",
        "type": "link in",
        "z": "6abff7f95fadc4e4",
        "name": "Definir_Máquina",
        "links": [],
        "x": 1975,
        "y": 660,
        "wires": [
            [
                "d6b50b60faae3e2d"
            ]
        ]
    },
    {
        "id": "5751017754b4750e",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAYLOAD TO SQL",
        "func": "flow.get('Maquina') \nflow.get('DBname')\n\n\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".http_error_logs VALUES(\" +(msg.payload)+ \");\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 700,
        "wires": [
            [
                "f879d4db2e101a84",
                "0fb8d539820b5539"
            ]
        ]
    },
    {
        "id": "f879d4db2e101a84",
        "type": "debug",
        "z": "6abff7f95fadc4e4",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 660,
        "wires": []
    },
    {
        "id": "ead51490954a1898",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FILTRADO DE ERROR",
        "func": "// Verificar si el payload contiene \"Requesterror\"\nif (msg.payload && typeof msg.payload === 'string' && msg.payload.includes('RequestError:')) {\n    // Si el payload contiene \"Requesterror\", mantener el payload sin cambios\n    return msg;\n} else {\n    // Si no contiene \"Requesterror\", no enviar ningún payload\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 740,
        "wires": [
            [
                "5751017754b4750e"
            ]
        ]
    },
    {
        "id": "c86df9cae4bfdb0d",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Definir_Sensor",
        "func": "/*Este nodo declara las variables de maquina, BD, sensor \ny unidad neccesarias para la creacion de la Tabla de Sensor \ny el registro del sensor en la tabla Sensores\n*/\n\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\nflow.set('Sensor',msg.sensor);\n\nflow.set('Unidad',msg.unidad);\n\nmsg.payload = flow.get('Sensor') + \" \" + flow.get('Unidad');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 620,
        "wires": [
            [
                "1f1f965d6fc60c0b"
            ]
        ]
    },
    {
        "id": "1f1f965d6fc60c0b",
        "type": "debug",
        "z": "6abff7f95fadc4e4",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 620,
        "wires": []
    },
    {
        "id": "7e2dcc62c5226f6f",
        "type": "link in",
        "z": "6abff7f95fadc4e4",
        "name": "Definir Sensor 2",
        "links": [],
        "x": 1975,
        "y": 620,
        "wires": [
            [
                "c86df9cae4bfdb0d"
            ]
        ]
    },
    {
        "id": "81b892e54eb92d72",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = (msg.payload)\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4500,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "23495c5293fe231f",
        "type": "link in",
        "z": "6abff7f95fadc4e4",
        "name": "Definir_Máquina",
        "links": [],
        "x": 4375,
        "y": 2220,
        "wires": [
            [
                "81b892e54eb92d72"
            ]
        ]
    },
    {
        "id": "714f11802ee1c373",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAYLOAD TO SQL",
        "func": "flow.get('Maquina') \nflow.get('DBname')\n\n\nmsg.topic = \"INSERT INTO INT_\" + flow.get('Maquina') + \".http_error_logs VALUES('\" +(msg.payload)+ \"');\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4510,
        "y": 2260,
        "wires": [
            [
                "89be9502bba91485"
            ]
        ]
    },
    {
        "id": "36407277837d1b57",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "function 81",
        "func": "// Verificar si el payload contiene \"Requesterror\"\nif (msg.payload && typeof msg.payload === 'string' && msg.payload.includes('RequestError:')) {\n    // Si el payload contiene \"Requesterror\", mantener el payload sin cambios\n    return msg;\n} else {\n    // Si no contiene \"Requesterror\", no enviar ningún payload\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4490,
        "y": 2300,
        "wires": [
            [
                "714f11802ee1c373"
            ]
        ]
    },
    {
        "id": "1624e12fb4edc929",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "-------------HANDLING----------",
        "info": "",
        "x": 2740,
        "y": 2340,
        "wires": []
    },
    {
        "id": "0ad01fe13fd93597",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "-----------------EXCEL----------",
        "info": "",
        "x": 2760,
        "y": 2380,
        "wires": []
    },
    {
        "id": "72404909850a746c",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT * FROM VISTA",
        "func": "msg.topic= \"SELECT *, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora  FROM int_sg41.DynamicView\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2560,
        "wires": [
            [
                "7187ba6656dc9473"
            ]
        ]
    },
    {
        "id": "5e5fc730b83e2842",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1070,
        "y": 2440,
        "wires": [
            [
                "a8c55854c554856e"
            ]
        ]
    },
    {
        "id": "cbef913f449490e9",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1010,
        "y": 2500,
        "wires": [
            [
                "a8c55854c554856e"
            ]
        ]
    },
    {
        "id": "7a99b633ac1ddd8d",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "ACTUALIZA HANDLING",
        "func": "msg.topic = \"UPDATE INT_SG41.HANDLING SET Valor = '1', FechaHora = CURRENT_TIMESTAMP ORDER BY FechaHora DESC LIMIT 1;\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2340,
        "wires": [
            [
                "48b01975d7c8d675"
            ]
        ]
    },
    {
        "id": "7f3fcc7823fe33cf",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "CALL PROCEDIMIENTO",
        "func": "msg.topic = \"CALL CreateDynamicView;\";\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 2740,
        "wires": [
            [
                "68f3b8ea97f67d96"
            ]
        ]
    },
    {
        "id": "b49ae3de8add8734",
        "type": "switch",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 2460,
        "wires": [
            [
                "7a99b633ac1ddd8d"
            ],
            [
                "6867c2b82fd1f7f5"
            ]
        ]
    },
    {
        "id": "9e0f80f06b1320f0",
        "type": "rbe",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 330,
        "y": 2560,
        "wires": [
            [
                "b49ae3de8add8734"
            ]
        ]
    },
    {
        "id": "ba534f124835298c",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Escritura de exel",
        "func": "\nmsg.payload = 0\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 2360,
        "wires": [
            [
                "9b5a91dba61cb689"
            ]
        ]
    },
    {
        "id": "9b5a91dba61cb689",
        "type": "switch",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 2480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5162be1fb2580707",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 70,
        "y": 2580,
        "wires": [
            [
                "9e0f80f06b1320f0"
            ]
        ]
    },
    {
        "id": "a8c55854c554856e",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Añade fecha al nombre",
        "func": "// Obtener la fecha desde el contexto del flujo\nvar fechaExcel = flow.get(\"fechaExcel\");\n\n// Verificar si se obtuvo la fecha correctamente del contexto de flujo\nif (!fechaExcel) {\n    node.error('No se encontró la variable \"fechaExcel\" en el contexto de flujo');\n    return null; // Devolver null o manejar el error según sea necesario\n}\n\n// Construir la ruta del archivo\nvar ruta = \"C:\\\\iberfoil\\\\\" + fechaExcel + \".csv\";\n\n// Asignar la ruta al mensaje\nmsg.filepath = ruta;\n\n// Retornar el mensaje\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 2640,
        "wires": [
            [
                "e846f0be3593bc09",
                "2197f93e2da61e7b"
            ]
        ]
    },
    {
        "id": "f48fe96fc488eb6c",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "¿INICIO DE INFORME?",
        "func": "msg.topic = \"SELECT REPLACE(DATE_FORMAT(FechaHora, '%Y-%m-%d %H:%i:%s'), ':', '') AS fechaExcel FROM HANDLING WHERE FechaHora = (SELECT MAX(FechaHora) FROM HANDLING);\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2200,
        "wires": [
            [
                "0036b7bd279f6f2a"
            ]
        ]
    },
    {
        "id": "1d6a40a3aa19242c",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FLOW SET \"fechaExcel\"",
        "func": "// Verificar si msg.payload es un array y no está vacío\nif (Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // Iterar sobre los elementos del array\n    for (let i = 0; i < msg.payload.length; i++) {\n        // Verificar si el objeto actual tiene la propiedad \"fechaExcel\"\n        if (msg.payload[i].hasOwnProperty('fechaExcel')) {\n            // Almacenar el valor de \"fechaExcel\" en el contexto de flujo (flow context)\n            flow.set('fechaExcel', msg.payload[i].fechaExcel);\n            break; // Detener la búsqueda una vez que se encuentra la variable\n        }\n    }\n} else {\n    // Si msg.payload no es un array o está vacío, manejar el error o situación según sea necesario\n    node.error('msg.payload no es un array o está vacío');\n}\n\n// Devolver el mensaje original para mantener el flujo de Node-RED\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "8bcbdb2fe04102f4",
        "type": "debug",
        "z": "6abff7f95fadc4e4",
        "name": "¿HANDLING?",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 2220,
        "wires": []
    },
    {
        "id": "5ad9e625d13e1cce",
        "type": "delay",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 2240,
        "wires": [
            [
                "f48fe96fc488eb6c"
            ]
        ]
    },
    {
        "id": "0c9fd2141780dcda",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "UPDATE FIN ON HANDLING",
        "func": "msg.topic= \"UPDATE HANDLING SET FechaFin = '\" + flow.get('FechaFinE') + \"';\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2800,
        "wires": [
            [
                "2add1497512d6309",
                "8bcbdb2fe04102f4"
            ]
        ]
    },
    {
        "id": "6867c2b82fd1f7f5",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FECHAFIN",
        "func": "/*Declara la valiable FechaHora que contiene la fecha y hora \nque será utilizada en el flow\n*/\nvar now = new Date();\nvar año = now.getFullYear();\nvar mes = now.getMonth() + 1;\nvar dia = now.getDate();\nvar hora = now.getHours();\nvar minuto = now.getMinutes();\nvar segundo = now.getSeconds();\n\n\nif (mes.toString().length == 1) {\n    mes = '0' + mes;\n}\n\nif (dia.toString().length == 1) {\n    dia = '0' + dia;\n}\n\nif (hora.toString().length == 1) {\n    hora = '0' + hora;\n}\n\nif (minuto.toString().length == 1) {\n    minuto = '0' + minuto;\n\n}\n\nif (segundo.toString().length == 1) {\n    segundo = '0' + segundo;\n}\n\n\nvar FechaFin = año + '-' + mes + '-' + dia + ' ' + hora + ':' + minuto + ':' + segundo;\nflow.set('FechaFinE', FechaFin);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 2800,
        "wires": [
            [
                "0c9fd2141780dcda"
            ]
        ]
    },
    {
        "id": "ab0717f1b60ebd83",
        "type": "s7 in",
        "z": "6abff7f95fadc4e4",
        "endpoint": "b9bbb3cffb5679a3",
        "mode": "single",
        "variable": "REGISTROCSV",
        "diff": true,
        "name": "",
        "x": 250,
        "y": 2660,
        "wires": [
            [
                "9e0f80f06b1320f0"
            ]
        ]
    },
    {
        "id": "e9dc5ff9d86e0750",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 3960,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "c6feaf0a0121345f",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 4740,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "61fc5b30de60791e",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2930,
        "y": 2140,
        "wires": [
            [
                "f905a3fd83f03862"
            ]
        ]
    },
    {
        "id": "9540104aef7a38cd",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2940,
        "y": 2200,
        "wires": [
            [
                "79e42eea81b36269"
            ]
        ]
    },
    {
        "id": "f5d039354e887668",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "884e4ae10df762d0",
        "name": "",
        "x": 830,
        "y": 980,
        "wires": [
            [
                "f8efb76a388d2383"
            ]
        ]
    },
    {
        "id": "0fb8d539820b5539",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2360,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "89be9502bba91485",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 4740,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "7187ba6656dc9473",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 650,
        "y": 2440,
        "wires": [
            [
                "5e5fc730b83e2842",
                "cbef913f449490e9",
                "a8c55854c554856e"
            ]
        ]
    },
    {
        "id": "48b01975d7c8d675",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 430,
        "y": 2320,
        "wires": [
            [
                "f48fe96fc488eb6c"
            ]
        ]
    },
    {
        "id": "68f3b8ea97f67d96",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 430,
        "y": 2420,
        "wires": [
            [
                "72404909850a746c"
            ]
        ]
    },
    {
        "id": "0036b7bd279f6f2a",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 710,
        "y": 2220,
        "wires": [
            [
                "1d6a40a3aa19242c"
            ]
        ]
    },
    {
        "id": "2add1497512d6309",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 730,
        "y": 2840,
        "wires": [
            [
                "cac4c5f2d8dadc44"
            ]
        ]
    },
    {
        "id": "e846f0be3593bc09",
        "type": "excel",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "file": "",
        "x": 1330,
        "y": 2360,
        "wires": [
            [
                "ba534f124835298c"
            ]
        ]
    },
    {
        "id": "4e48ae0b5336a299",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "MODO Compression",
        "func": "msg.topic = \"TRUNCATE TABLE general;\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "098bace2773fb2f8",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Obtiene el valor de la variable del flujo \"Sensor\"",
        "func": "\n\n\n// Obtiene el valor de la variable del flujo \"Sensor\"\nvar sensorValue = flow.get(\"Sensor\");\n\n\n// Verifica el valor de \"Sensor\" y establece msg.payload\nif (sensorValue !== \"General\" && sensorValue !== \"datosgenerales\" ) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\n\n\n// Devuelve el mensaje modificado\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 840,
        "wires": [
            [
                "de45c1c4850c70f2"
            ]
        ]
    },
    {
        "id": "de45c1c4850c70f2",
        "type": "switch",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1530,
        "y": 880,
        "wires": [
            [
                "430eb7d29fd51b35"
            ],
            [
                "6286e6626f21d4f7"
            ]
        ]
    },
    {
        "id": "e4b41454c1c7cb8c",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "d": true,
        "name": "SELECT SIN CONVERSIÓN DE FASE",
        "func": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicio = flow.get(\"FechaInicio\");\nvar FechaFin = flow.get(\"FechaFin\");\n\nvar query = \"SELECT *, DATE_FORMAT(FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora FROM INT_\" + Maquina + \".General WHERE FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\";\n\n  \nmsg.topic = query;\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1160,
        "wires": [
            [
                "c02c99e6cc1b8012"
            ]
        ]
    },
    {
        "id": "c02c99e6cc1b8012",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "884e4ae10df762d0",
        "name": "",
        "x": 1450,
        "y": 1200,
        "wires": [
            [
                "26871622a88875ff"
            ]
        ]
    },
    {
        "id": "4dbc5b31a83c0d57",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "Recepción de orden General",
        "url": "/General",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 160,
        "y": 1180,
        "wires": [
            [
                "9b4f21aea07defbc",
                "c65f8aa95d831d12",
                "b0b545c1a197827b"
            ]
        ]
    },
    {
        "id": "9b4f21aea07defbc",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 140,
        "y": 1220,
        "wires": []
    },
    {
        "id": "4f25384a157051f2",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "d": true,
        "name": "INSERCION EN FLOW",
        "func": "// Función para convertir una fecha en formato ISO 8601 a 'YYYY-MM-DD HH:MM:SS'\nfunction convertDateToMariaDBFormat(isoDate) {\n    var date = new Date(isoDate);\n    var year = date.getFullYear();\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var day = String(date.getDate()).padStart(2, '0');\n    var hours = String(date.getHours()).padStart(2, '0');\n    var minutes = String(date.getMinutes()).padStart(2, '0');\n    var seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\nvar Sensor = msg.payload.Sensor;\nvar FechaFin = msg.payload.FF;\nvar FechaInicio = msg.payload.FI;\n\n// Convertir las fechas al formato 'YYYY-MM-DD HH:MM:SS'\nvar FechaFinFormatted = convertDateToMariaDBFormat(FechaFin);\nvar FechaInicioFormatted = convertDateToMariaDBFormat(FechaInicio);\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\nflow.set(\"Sensor\", Sensor);\nif (msg.payload.FF === true || msg.payload.FI=== true){  \nflow.set(\"FechaFin\", FechaFinFormatted);\nflow.set(\"FechaInicio\", FechaInicioFormatted);\n}\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1160,
        "wires": [
            [
                "e7df2f16cbdbbc8f"
            ]
        ]
    },
    {
        "id": "d662b4bfa49e304e",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAQUET",
        "func": "var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/sensorData_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// sensorData_handler.php   Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1120,
        "wires": [
            [
                "1038e1d70152f774"
            ]
        ]
    },
    {
        "id": "26871622a88875ff",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1450,
        "y": 1120,
        "wires": [
            [
                "d662b4bfa49e304e",
                "cbbc620f91a29444"
            ]
        ]
    },
    {
        "id": "bf947f406788487c",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "Recepción de orden Sensores",
        "url": "/Sensores",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 160,
        "y": 1380,
        "wires": [
            [
                "532aae1d8b764904",
                "86e27b77dc1611cb"
            ]
        ]
    },
    {
        "id": "532aae1d8b764904",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 140,
        "y": 1420,
        "wires": []
    },
    {
        "id": "86e27b77dc1611cb",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "INSERCION EN FLOW",
        "func": "// Función para convertir una fecha en formato ISO 8601 a 'YYYY-MM-DD HH:MM:SS'\nfunction convertDateToMariaDBFormat(isoDate) {\n    var date = new Date(isoDate);\n    var year = date.getFullYear();\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var day = String(date.getDate()).padStart(2, '0');\n    var hours = String(date.getHours()).padStart(2, '0');\n    var minutes = String(date.getMinutes()).padStart(2, '0');\n    var seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\nvar Sensor = msg.payload.Sensor;\nvar FechaFin = msg.payload.FF;\nvar FechaInicio = msg.payload.FI;\n\n// Convertir las fechas al formato 'YYYY-MM-DD HH:MM:SS'\nvar FechaFinFormatted = convertDateToMariaDBFormat(FechaFin);\nvar FechaInicioFormatted = convertDateToMariaDBFormat(FechaInicio);\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\nflow.set(\"Sensor\", Sensor);\nflow.set(\"FechaFin\", FechaFinFormatted);\nflow.set(\"FechaInicio\", FechaInicioFormatted);\n\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1440,
        "wires": [
            [
                "7484a4f5744c136e"
            ]
        ]
    },
    {
        "id": "859b0959ce5237eb",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "info": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicio = flow.get(\"FechaInicio\");\nvar FechaFin = flow.get(\"FechaFin\");\n\nif (Maquina && Sensor && FechaInicio && FechaFin) {\n    var query = \"SELECT * FROM datosgenerales WHERE FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\";\n    msg.payload = query;\n    msg.topic = query;\n}\n\nreturn msg;\n",
        "x": 100,
        "y": 960,
        "wires": []
    },
    {
        "id": "086064589bd4abf7",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "¿INICIO Y FIN DE INFORME?",
        "func": "msg.topic= \"UPDATE SINTRAZA SET FechaFin = '\" + flow.get('FechaFin') + \"';\"\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1380,
        "wires": [
            [
                "a4a48e2afb2eb432"
            ]
        ]
    },
    {
        "id": "b83da2adba60e135",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "¿INICIO Y FIN DE INFORME?",
        "func": "msg.topic= \"UPDATE SINTRAZA SET FechaHora = '\" + flow.get('FechaInicio') + \"';\"\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1440,
        "wires": [
            [
                "e59180c8370bc6a1"
            ]
        ]
    },
    {
        "id": "e59180c8370bc6a1",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1030,
        "y": 1380,
        "wires": [
            [
                "15df3fd860f1167a"
            ]
        ]
    },
    {
        "id": "15df3fd860f1167a",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "CALL PROCEDIMIENTO",
        "func": "msg.topic = \"CALL CreateDatosSensores;\";\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1440,
        "wires": [
            [
                "98117355ab6fac0e"
            ]
        ]
    },
    {
        "id": "98117355ab6fac0e",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1390,
        "y": 1380,
        "wires": [
            [
                "806d281e0832cf4a"
            ]
        ]
    },
    {
        "id": "a4a48e2afb2eb432",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 920,
        "y": 1300,
        "wires": [
            [
                "b83da2adba60e135"
            ]
        ]
    },
    {
        "id": "806d281e0832cf4a",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT * FROM VISTA",
        "func": "msg.topic= \"SELECT * FROM int_sg41.datosSensores\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1440,
        "wires": [
            [
                "5ea90dae58acbedb"
            ]
        ]
    },
    {
        "id": "5ea90dae58acbedb",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1680,
        "y": 1340,
        "wires": [
            [
                "03fa2d06b6bcf55d"
            ]
        ]
    },
    {
        "id": "59aa6426928b851f",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1930,
        "y": 1060,
        "wires": [
            [
                "ead51490954a1898"
            ]
        ]
    },
    {
        "id": "df44d1387fb84480",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAQUET",
        "func": "var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/sensorDashboard_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1240,
        "wires": [
            [
                "59aa6426928b851f"
            ]
        ]
    },
    {
        "id": "03fa2d06b6bcf55d",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1880,
        "y": 1340,
        "wires": [
            [
                "df44d1387fb84480"
            ]
        ]
    },
    {
        "id": "d552d1680dd94578",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Parsear Nombre",
        "func": "// Obtener el payload del mensaje\nvar payload = msg.payload;\n\nif (typeof payload === \"string\"){\n    try{\n        payload = JSON.parse(payload);\n    }catch (e) {\n        node.error(\"Error quitando INT_\", msg);\n        return null;\n    }\n\n}\nif (Array.isArray(payload)){\n    payload.forEach(function(item) {\n        if (item.nombre && item.nombre.startsWith(\"INT_\")){\n            item.nombre = item.nombre.slice(4);\n        }\n    });\n}else{\n    node.error(\"Payload is not an Array\", msg);\n    return null;\n}\n\nmsg.payload = payload;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 2140,
        "wires": [
            [
                "b8f4a4b69d4d93ff"
            ]
        ]
    },
    {
        "id": "2197f93e2da61e7b",
        "type": "delay",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1120,
        "y": 2700,
        "wires": [
            [
                "4e48ae0b5336a299"
            ]
        ]
    },
    {
        "id": "cac4c5f2d8dadc44",
        "type": "delay",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 2840,
        "wires": [
            [
                "7f3fcc7823fe33cf"
            ]
        ]
    },
    {
        "id": "fbd0d02073de354e",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Conversion Gráfico",
        "func": "// Obtén el mensaje (el array de objetos) que se encuentra en msg.payload\nlet datos = msg.payload;\n\n// Recorre cada objeto en el array\nfor (let i = 0; i < datos.length; i++) {\n    // Recorre las claves del objeto actual\n    for (let clave in datos[i]) {\n        // Si la clave no es \"Fechahora\", entonces es la clave que necesitamos cambiar a \"Valor\"\n        if (clave !== \"Fechahora\") {\n            datos[i][\"Valor\"] = datos[i][clave];  // Asigna el valor a la nueva clave \"Valor\"\n            delete datos[i][clave];  // Elimina la clave original\n        }\n    }\n}\n\n// Retorna los datos modificados\nmsg.payload = datos;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "7a931dc223adbf9f"
            ]
        ]
    },
    {
        "id": "9b12fefcad4adea5",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 510,
        "y": 1040,
        "wires": [
            [
                "fbd0d02073de354e"
            ]
        ]
    },
    {
        "id": "7a931dc223adbf9f",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 970,
        "y": 1040,
        "wires": [
            [
                "a8b74779356df471"
            ]
        ]
    },
    {
        "id": "a8b74779356df471",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAQUET",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/GD1.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n//post_handler\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 980,
        "wires": [
            [
                "79aba6bd31d03c62"
            ]
        ]
    },
    {
        "id": "79aba6bd31d03c62",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1930,
        "y": 980,
        "wires": [
            [
                "ead51490954a1898"
            ]
        ]
    },
    {
        "id": "215d340280ee151d",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "--------------------------------------TIEMPO REAL-------------------------------------------",
        "info": "--------------------------TIEMPO REAL-------------------------------------------",
        "x": 3090,
        "y": 540,
        "wires": []
    },
    {
        "id": "49e767b963310f83",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "CHECK COMMA",
        "func": "// Verificar si existe una variable llamada \"Sensor\" en msg.payload\nif (msg.payload.hasOwnProperty('Sensor')) {\n    let sensorValue = msg.payload.Sensor;\n\n    // Verificar si hay comas en el valor de \"Sensor\"\n    if (sensorValue.includes(',')) {\n        // Dividir el valor de \"Sensor\" por comas y almacenar cada trozo en el flow\n        let partes = sensorValue.split(',');\n\n        // Almacenar en el flow como \"Sensor1\", \"Sensor2\", y \"Sensor3\"\n        flow.set('Sensor1', partes[0] || null);\n        flow.set('Sensor2', partes[1] || null);\n        flow.set('Sensor3', partes[2] || null);\n\n        // Establecer msg.d = 2 ya que hay comas\n        msg.d = 2;\n    } else {\n        // Si no hay comas, dejar el valor de \"Sensor\" tal cual y establecer msg.d = 1\n        msg.d = 1;\n    }\n}else{\n    msg.d = 3;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 760,
        "wires": [
            [
                "622a5c461b050f16"
            ]
        ]
    },
    {
        "id": "622a5c461b050f16",
        "type": "switch",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "d",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 290,
        "y": 840,
        "wires": [
            [
                "585323c57daf7cba"
            ],
            [
                "1a0c52e2922306a0"
            ],
            [
                "a657a51783a6f9b5"
            ]
        ]
    },
    {
        "id": "5f04cfec6be5e207",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT SENSORES",
        "func": "var Sensor1 = flow.get(\"Sensor1\");\nvar Sensor2 = flow.get(\"Sensor2\");\nvar Sensor3 = flow.get(\"Sensor3\");\nvar FechaInicio = flow.get(\"FechaInicio\");\nvar FechaFin = flow.get(\"FechaFin\");\n\nvar query = \"SELECT $Sensor1, $Sensor2, $Sensor3, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM $Sensor1, $Sensor2, $Sensor3 WHERE FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\";\n\n\nmsg.topic= query\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "f8727a6364081544",
        "type": "switch",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "tipo",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1130,
        "y": 860,
        "wires": [
            [
                "098bace2773fb2f8"
            ],
            [
                "4e616d840f0eed56"
            ],
            [
                "4e616d840f0eed56"
            ]
        ]
    },
    {
        "id": "e8eddb7951d7aebf",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "BLOCKEO DE RANGO",
        "func": "var FechaInicio = flow.get(\"FechaInicio\");  // Obtener la fecha de inicio del flujo\nvar FechaFin = flow.get(\"FechaFin\");        // Obtener la fecha de fin del flujo\nvar Paramter = flow.get(\"Sensor\");\n// Validar que ambas fechas estén definidas\n          \nif (!FechaInicio || !FechaFin) {\n    // Si falta alguna de las fechas, simplemente devuelve el mensaje original\n    msg.payload = [{ \"ERROR\": \"Ha olvidado seleccionar una o ambas Fechas de selección\" }];\n    return msg;\n}\n\n// Convertir las fechas a objetos Date para realizar operaciones con ellas\nvar inicio = new Date(FechaInicio);\nvar fin = new Date(FechaFin);\n\n// Verificar si las fechas son válidas\nif (isNaN(inicio) || isNaN(fin)) {\n    // Si alguna de las fechas no es válida, devolver el mensaje original\n    msg.payload = [{ \"ERROR\":\"Ha olvidado seleccionar una o ambas Fechas de selección\"}];\n    msg.tipo = 2;\n    return msg;\n}\n\n// Calcular la diferencia en milisegundos entre las dos fechas\nvar diff = fin.getTime() - inicio.getTime();\n\n// Verificar si el rango entre las fechas es superior a 24 horas (86400000 ms)\nif (diff > 604800000) {\n    // Si el rango es mayor a 1 semana, configurar el msg.payload y msg.tipo\n    msg.payload = [{ \"ERROR\":\"El rango horario que ha seleccionado supera una semana de registros\" }];\n    msg.tipo = 1;\n    return msg;\n} else {\n    // Si el rango es menor o igual a 24 horas, devolver el mensaje tal cual\n    msg.tipo = 0;\n    msg.payload = msg.payload\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 860,
        "wires": [
            [
                "f8727a6364081544"
            ]
        ]
    },
    {
        "id": "4e616d840f0eed56",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "WARNINGS",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/post_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 940,
        "wires": [
            [
                "421b9560328ddc39"
            ]
        ]
    },
    {
        "id": "421b9560328ddc39",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1930,
        "y": 940,
        "wires": [
            [
                "ead51490954a1898"
            ]
        ]
    },
    {
        "id": "8f5c4378fdb8eb24",
        "type": "switch",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "tipo",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 930,
        "y": 1500,
        "wires": [
            [
                "086064589bd4abf7"
            ],
            [
                "e09e4685499fb7cf"
            ],
            [
                "e09e4685499fb7cf"
            ]
        ]
    },
    {
        "id": "7484a4f5744c136e",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "BLOCKEO DE RANGO",
        "func": "var FechaInicio = flow.get(\"FechaInicio\");  // Obtener la fecha de inicio del flujo\nvar FechaFin = flow.get(\"FechaFin\");        // Obtener la fecha de fin del flujo\n\n// Validar que ambas fechas estén definidas\nif (!FechaInicio || !FechaFin) {\n    // Si falta alguna de las fechas, simplemente devuelve el mensaje original\n    msg.payload = [{ \"ERROR\": \"Ha olvidado seleccionar una o ambas Fechas de selección\" }];\n    return msg;\n}\n\n// Convertir las fechas a objetos Date para realizar operaciones con ellas\nvar inicio = new Date(FechaInicio);\nvar fin = new Date(FechaFin);\n\n// Verificar si las fechas son válidas\nif (isNaN(inicio) || isNaN(fin)) {\n    // Si alguna de las fechas no es válida, devolver el mensaje original\n    msg.payload = [{ \"ERROR\":\"Ha olvidado seleccionar una o ambas Fechas de selección\"}];\n    msg.tipo = 2;\n    return msg;\n}\n\n// Calcular la diferencia en milisegundos entre las dos fechas\nvar diff = fin.getTime() - inicio.getTime();\n\n// Verificar si el rango entre las fechas es superior a 24 horas (86400000 ms)\nif (diff > 86400000) {\n    // Si el rango es mayor a 24 horas, configurar el msg.payload y msg.tipo\n    msg.payload = [{ \"ERROR\":\"El rango horario que ha seleccionado es demasiado grande para esta consulta\" }];\n    msg.tipo = 1;\n    return msg;\n} else {\n    // Si el rango es menor o igual a 24 horas, devolver el mensaje tal cual\n    msg.tipo = 0;\n    msg.payload = msg.payload\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1500,
        "wires": [
            [
                "8f5c4378fdb8eb24"
            ]
        ]
    },
    {
        "id": "e09e4685499fb7cf",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "WARNINGS",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/sensorDashboard_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1500,
        "wires": [
            [
                "8a5a5bcfd04bcff3"
            ]
        ]
    },
    {
        "id": "8a5a5bcfd04bcff3",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1430,
        "y": 1500,
        "wires": [
            [
                "ead51490954a1898"
            ]
        ]
    },
    {
        "id": "b0aad3a41fe3f74f",
        "type": "switch",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "tipo",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 910,
        "y": 1180,
        "wires": [
            [
                "e4b41454c1c7cb8c",
                "85bb31df6fbc89bb"
            ],
            [
                "4ced0d4a74f61cc8"
            ],
            []
        ]
    },
    {
        "id": "e7df2f16cbdbbc8f",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "BLOCKEO DE RANGO",
        "func": "var FechaInicio = flow.get(\"FechaInicio\");  // Obtener la fecha de inicio del flujo\nvar FechaFin = flow.get(\"FechaFin\");        // Obtener la fecha de fin del flujo\n\n\n\n// Convertir las fechas a objetos Date para realizar operaciones con ellas\nvar inicio = new Date(FechaInicio);\nvar fin = new Date(FechaFin);\n\n// Verificar si las fechas son válidas\nif (isNaN(inicio) || isNaN(fin)) {\n    // Si alguna de las fechas no es válida, devolver el mensaje original\n    msg.payload = [{ \"ERROR\":\"Ha olvidado seleccionar una o ambas Fechas de selección\"}];\n    msg.tipo = 2;\n    return msg;\n}\n\n// Calcular la diferencia en milisegundos entre las dos fechas\nvar diff = fin.getTime() - inicio.getTime();\n\n// Verificar si el rango entre las fechas es superior a 1 Semana (604800000 ms)\nif (diff > 604800000) {\n    // Si el rango es mayor a 1semana, configurar el msg.payload y msg.tipo\n    msg.payload = [{ \"ERROR\":\"Lo sentimos, su solicitud ha excedido el rango máximo de una semana.\" }];\n    msg.tipo = 1;\n    return msg;\n} else {\n    // Si el rango es menor o igual a 24 horas, devolver el mensaje tal cual\n    msg.tipo = 0;\n    msg.payload = msg.payload\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1180,
        "wires": [
            [
                "b0aad3a41fe3f74f"
            ]
        ]
    },
    {
        "id": "4ced0d4a74f61cc8",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "WARNINGS",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/sensorData_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1000,
        "wires": [
            [
                "1038e1d70152f774"
            ]
        ]
    },
    {
        "id": "4a3fec48ae79f1bd",
        "type": "switch",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "tipo",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1530,
        "y": 680,
        "wires": [
            [
                "f5d039354e887668"
            ],
            [
                "3ddc27d148caf9db"
            ],
            [
                "3ddc27d148caf9db"
            ]
        ]
    },
    {
        "id": "bbc49582392886d5",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "BLOCKEO DE RANGO",
        "func": "var FechaInicio = flow.get(\"FechaInicio\");  // Obtener la fecha de inicio del flujo\nvar FechaFin = flow.get(\"FechaFin\");        // Obtener la fecha de fin del flujo\n\n// Validar que ambas fechas estén definidas\nif (!FechaInicio || !FechaFin) {\n    // Si falta alguna de las fechas, simplemente devuelve el mensaje original\n    msg.payload = [{ \"ERROR\": \"Ha olvidado seleccionar una o ambas Fechas de selección\" }];\n    return msg;\n}\n\n// Convertir las fechas a objetos Date para realizar operaciones con ellas\nvar inicio = new Date(FechaInicio);\nvar fin = new Date(FechaFin);\n\n// Verificar si las fechas son válidas\nif (isNaN(inicio) || isNaN(fin)) {\n    // Si alguna de las fechas no es válida, devolver el mensaje original\n    msg.payload = [{ \"ERROR\":\"Ha olvidado seleccionar una o ambas Fechas de selección\"}];\n    msg.tipo = 2;\n    return msg;\n}\n\n// Calcular la diferencia en milisegundos entre las dos fechas\nvar diff = fin.getTime() - inicio.getTime();\n\n// Verificar si el rango entre las fechas es superior a 24 horas (86400000 ms)\nif (diff > 86400000) {\n    // Si el rango es mayor a 24 horas, configurar el msg.payload y msg.tipo\n    msg.payload = [{ \"ERROR\":\"El rango horario que ha seleccionado es demasiado grande para esta consulta\" }];\n    msg.tipo = 1;\n    return msg;\n} else {\n    // Si el rango es menor o igual a 24 horas, devolver el mensaje tal cual\n    msg.tipo = 0;\n    msg.payload = msg.payload\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 680,
        "wires": [
            [
                "4a3fec48ae79f1bd"
            ]
        ]
    },
    {
        "id": "3ddc27d148caf9db",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "WARNINGS",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/post_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 680,
        "wires": [
            [
                "421b9560328ddc39"
            ]
        ]
    },
    {
        "id": "b633d25718aab013",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT SENSORES (n)",
        "func": "// Variable para almacenar el ID del intervalo\nvar intervalo;\n\n// Función que genera y ejecuta la consulta\nfunction generarConsulta() {\n    // Obtener el valor de la variable RUN\n    var run = flow.get(\"RUN\");\n\n    // Si RUN no es 1, no ejecutar la consulta\n    if (run !== 1) {\n        return;\n    }\n\n    // Obtener los valores de los sensores (que corresponden a las tablas)\n    var SensorR1 = flow.get(\"SensorR1\");  // Tabla 1 y su columna\n    var SensorR2 = flow.get(\"SensorR2\");  // Tabla 2 y su columna\n    var SensorR3 = flow.get(\"SensorR3\");  // Tabla 3 y su columna\n    var database = flow.get(\"Maquina\"); \n\n    // Crear las partes del SELECT de manera dinámica\n    var selectClause = [];\n    var joinClause = [];\n\n    // Verificar si cada tabla y su respectiva columna están definidos, construir SELECT y JOIN dinámicamente\n    if (SensorR1) {\n        selectClause.push(\"(SELECT \" + SensorR1 + \".\" + SensorR1 + \" FROM \" + SensorR1 + \" ORDER BY \" + SensorR1 + \".FechaHora DESC LIMIT 1) AS \" + SensorR1);  // Seleccionar la última fila de Sensor1\n        joinClause.push(SensorR1);  // Añadir la tabla al FROM o JOIN\n    }\n\n    if (SensorR2) {\n        selectClause.push(\"(SELECT \" + SensorR2 + \".\" + SensorR2 + \" FROM \" + SensorR2 + \" ORDER BY \" + SensorR2 + \".FechaHora DESC LIMIT 1) AS \" + SensorR2);  // Seleccionar la última fila de Sensor2\n        joinClause.push(SensorR2);  // Añadir la tabla al FROM o JOIN\n    }\n\n    if (SensorR3) {\n        selectClause.push(\"(SELECT \" + SensorR3 + \".\" + SensorR3 + \" FROM \" + SensorR3 + \" ORDER BY \" + SensorR3 + \".FechaHora DESC LIMIT 1) AS \" + SensorR3);  // Seleccionar la última fila de Sensor3\n        joinClause.push(SensorR3);  // Añadir la tabla al FROM o JOIN\n    }\n\n    // Asegurarse de que haya al menos un sensor definido para hacer la consulta\n    if (selectClause.length > 0) {\n        // Agregar la columna FechaHora de la primera tabla\n        selectClause.push(\"(SELECT DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') FROM \" + SensorR1 + \" ORDER BY FechaHora DESC LIMIT 1) AS FechaHora\");\n\n        // Construir la consulta SELECT final\n        var query = \"SELECT \" + selectClause.join(\", \") + \";\";\n\n        // Asignar la consulta construida a msg.topic\n        msg.topic = query;\n\n        // Enviar la consulta (puedes enviar a otro nodo o procesar aquí)\n        node.send(msg);\n    } else {\n        // Si no hay sensores definidos, devolver un mensaje de error o manejar la situación\n        msg.topic = \"No sensors defined for the query.\";\n        node.send(msg);\n    }\n}\n\n// Función para manejar la ejecución periódica de la consulta\nfunction iniciarConsultaPeriodica() {\n    if (!intervalo) {  // Evitar múltiples intervalos\n        intervalo = setInterval(function() {\n            var run = flow.get(\"RUN\");\n\n            if (run === 1) {\n                generarConsulta();  // Ejecutar la consulta\n            } else {\n                clearInterval(intervalo);  // Detener la ejecución si RUN cambia a 0\n                intervalo = null;  // Reiniciar el valor de intervalo\n            }\n        }, 1000);  // Ejecutar cada 1000 milisegundos (1 segundo)\n    }\n}\n\n// Iniciar la ejecución periódica\niniciarConsultaPeriodica();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 800,
        "wires": [
            [
                "7f31b81caf5792a9"
            ]
        ]
    },
    {
        "id": "45f8892d5c4a03f3",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "Recepción de Treal",
        "url": "/Treal",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 2550,
        "y": 780,
        "wires": [
            [
                "06bb34d75829e680",
                "c6117ec5e25e41cf"
            ]
        ]
    },
    {
        "id": "c6117ec5e25e41cf",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2560,
        "y": 820,
        "wires": []
    },
    {
        "id": "06bb34d75829e680",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "CHECK COMMA (n)",
        "func": "// Verificar si existe una variable llamada \"Sensor\" en msg.payload\nif (msg.payload.hasOwnProperty('Sensor')) {\n    let sensorValue = msg.payload.Sensor;\n    if (msg.payload.hasOwnProperty('Maquina')) {\n        let MaquinaValue = \"INT_\"+msg.payload.Maquina;\n    // Verificar si hay comas en el valor de \"Sensor\"\n    if (sensorValue.includes(',')) {\n        // Dividir el valor de \"Sensor\" por comas y almacenar cada trozo en el flow\n        let partes = sensorValue.split(',');\n\n        // Establecer \"Sensor1\", \"Sensor2\", y \"Sensor3\" en el flujo, reiniciando si no hay valor\n        flow.set('SensorR1', partes[0] ? partes[0] : null);\n        flow.set('SensorR2', partes[1] ? partes[1] : null);\n        flow.set('SensorR3', partes[2] ? partes[2] : null);\n        flow.set('Maquina', MaquinaValue);\n    } else {\n        // Si no hay comas, dejar el valor de \"Sensor\" tal cual y establecerlo en \"SensorR1\"\n        flow.set('SensorR1', sensorValue);\n       \n        // Reiniciar los otros sensores a null\n        flow.set('SensorR2', null);\n        flow.set('SensorR3', null);\n    }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2860,
        "y": 780,
        "wires": [
            [
                "d3cb40b4250aa71f"
            ]
        ]
    },
    {
        "id": "7f31b81caf5792a9",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "884e4ae10df762d0",
        "name": "",
        "x": 3310,
        "y": 780,
        "wires": [
            [
                "bd6df8eb4304a587"
            ]
        ]
    },
    {
        "id": "e50733b37738f591",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "ALMACENAMIENTO TEMPORAL",
        "func": "// Obtener la variable de flujo 'PR' (si no existe, inicializar como un array vacío)\nvar prArray = flow.get(\"PR\") || [];\n\n// Obtener el paquete JSON recibido (se asume que está en msg.payload)\nvar paquete = msg.payload;\n\n// Si el paquete es un array, extraer sus elementos y añadirlos a prArray\nif (Array.isArray(paquete)) {\n    prArray.push(...paquete);\n} else {\n    prArray.push(paquete);\n}\n\n// Actualizar la variable de flujo con el nuevo array\nflow.set(\"PR\", prArray);\n\n// Verificar si ya se han recibido 200 paquetes\nif (prArray.length >= 100) {\n    // Hacer lo que sea necesario con los 200 paquetes (por ejemplo, enviarlos a otro nodo o procesarlos)\n    node.warn(\"Se alcanzaron los 200 paquetes, procesando...\");\n\n    // Enviar los 200 paquetes almacenados\n    msg.payload = prArray;\n    node.send(msg);\n\n    // Reiniciar el array (vaciar la variable de flujo)\n    flow.set(\"PR\", []);\n} else {\n    // Actualizar la variable de flujo con el nuevo array\n    flow.set(\"PR\", prArray);\n}\n\n// No enviar ningún mensaje hasta que se alcancen los 200 paquetes\nreturn null;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "45faa7d7b5ac9a89",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 2790,
        "y": 960,
        "wires": [
            [
                "ba4e06318741d1c0"
            ]
        ]
    },
    {
        "id": "ba4e06318741d1c0",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FLOW SET",
        "func": "flow.set(\"RUN\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "5a1ddae553866e97",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "Recepción de RUN",
        "url": "/RUN",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 2570,
        "y": 920,
        "wires": [
            [
                "d09fd99bb2180a83",
                "669442bd314af51d"
            ]
        ]
    },
    {
        "id": "d09fd99bb2180a83",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2580,
        "y": 960,
        "wires": []
    },
    {
        "id": "669442bd314af51d",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "¡RUN!",
        "func": "msg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2840,
        "y": 920,
        "wires": [
            [
                "ba4e06318741d1c0"
            ]
        ]
    },
    {
        "id": "8bd477386f661212",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 2830,
        "y": 1040,
        "wires": [
            [
                "8fcba09148220171"
            ]
        ]
    },
    {
        "id": "8fcba09148220171",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FLOW SET",
        "func": "flow.set(\"RUN\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "c85043d1c8b4d5a4",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "Recepción de OFF",
        "url": "/OFF",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 2610,
        "y": 1000,
        "wires": [
            [
                "37e2b0d633064651",
                "de51b4303086cf28"
            ]
        ]
    },
    {
        "id": "37e2b0d633064651",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2620,
        "y": 1040,
        "wires": []
    },
    {
        "id": "de51b4303086cf28",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "OFF :(",
        "func": "msg.payload = 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2880,
        "y": 1000,
        "wires": [
            [
                "8fcba09148220171"
            ]
        ]
    },
    {
        "id": "de2f050d0bcb76c8",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "BOTONES RUN/OFF",
        "info": "",
        "x": 2760,
        "y": 860,
        "wires": []
    },
    {
        "id": "9f4296baab201d67",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "Tiempo Real",
        "info": "",
        "x": 2630,
        "y": 720,
        "wires": []
    },
    {
        "id": "2de9f8e1bae6f078",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "(GRÁFICO)",
        "info": "",
        "x": 2770,
        "y": 720,
        "wires": []
    },
    {
        "id": "bd6df8eb4304a587",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "ALMACENAMIENTO TEMPORAL(N)",
        "func": "// Obtener la variable de flujo 'PR' (si no existe, inicializar como un array vacío)\nvar prArray = flow.get(\"PR\") || [];\n\n// Obtener el paquete JSON recibido (se asume que está en msg.payload)\nvar paquete = msg.payload;\n\n// Si el paquete es un array, extraer sus elementos y añadirlos a prArray\nif (Array.isArray(paquete)) {\n    prArray.push(...paquete);\n} else {\n    prArray.push(paquete);\n}\n\n// Verificar si el array ha alcanzado o excedido 100 elementos\nif (prArray.length > 100) {\n    // Eliminar el primer elemento para mantener el array en un máximo de 100 elementos\n    prArray.shift();\n}\n\n// Actualizar la variable de flujo con el nuevo array\nflow.set(\"PR\", prArray);\n\n// Enviar el array actualizado en msg.payload para el siguiente nodo\nmsg.payload = prArray;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3570,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "45bebc812ec5a5c1",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": ">1 SENSOR",
        "func": "// Obtener los valores de los sensores (que corresponden a las tablas) y fechas desde el flow\nvar Sensor1 = flow.get(\"Sensor1\").trim();  // Tabla 1 y su columna (sin espacios)\nvar Sensor2 = flow.get(\"Sensor2\") ? flow.get(\"Sensor2\").trim() : null;  // Tabla 2 y su columna (sin espacios)\nvar Sensor3 = flow.get(\"Sensor3\") ? flow.get(\"Sensor3\").trim() : null;  // Tabla 3 y su columna (sin espacios)\nvar FechaInicio = flow.get(\"FechaInicio\");  // Fecha de inicio\nvar FechaFin = flow.get(\"FechaFin\");  // Fecha de fin\nvar database = \"INT_\"+flow.get(\"Maquina\").trim();  // Especificar la base de datos a la que pertenecen las tablas (sin espacios)\n\n// Crear las partes del SELECT de manera dinámica\nvar selectClause = [];\nvar joinClause = [];\n\n// Verificar si cada tabla y su respectiva columna están definidos, construir SELECT y JOIN dinámicamente\nif (Sensor1) {\n    selectClause.push(\"`\" + Sensor1 + \"`.`\" + Sensor1 + \"`\");  // Seleccionar la columna de la tabla Sensor1\n    joinClause.push(\"`\" + database + \"`.`\" + Sensor1 + \"`\");   // Añadir la tabla con base de datos\n}\n\nif (Sensor2) {\n    selectClause.push(\"`\" + Sensor2 + \"`.`\" + Sensor2 + \"`\");  // Seleccionar la columna de la tabla Sensor2\n    joinClause.push(\"`\" + database + \"`.`\" + Sensor2 + \"`\");   // Añadir la tabla con base de datos\n}\n\nif (Sensor3) {\n    selectClause.push(\"`\" + Sensor3 + \"`.`\" + Sensor3 + \"`\");  // Seleccionar la columna de la tabla Sensor3\n    joinClause.push(\"`\" + database + \"`.`\" + Sensor3 + \"`\");   // Añadir la tabla con base de datos\n}\n\n// Asegurarse de que haya al menos un sensor definido para hacer la consulta\nif (selectClause.length > 0) {\n    // Agregar la columna FechaHora formateada desde la primera tabla (Sensor1)\n    selectClause.push(\"DATE_FORMAT(`\" + Sensor1 + \"`.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora\");\n\n    // Construir la consulta SELECT y FROM inicial\n    var query = \"SELECT \" + selectClause.join(\", \") +\n        \" FROM `\" + database + \"`.`\" + Sensor1 + \"`\";  // Inicia desde la primera tabla con la base de datos\n\n    // Añadir los JOIN si hay más de una tabla\n    if (joinClause.length > 1) {\n        for (var i = 1; i < joinClause.length; i++) {\n            query += \" JOIN \" + joinClause[i] + \" ON \" + joinClause[i] + \".FechaHora = `\" + Sensor1 + \"`.FechaHora\";\n        }\n    }\n\n    // Agregar la condición de fechas en el WHERE\n    query += \" WHERE `\" + Sensor1 + \"`.FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\";\n\n    // Asignar la consulta construida a msg.topic\n    msg.topic = query;\n} else {\n    // Si no hay sensores definidos, devolver un mensaje de error o manejar la situación\n    msg.topic = \"No sensors defined for the query.\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 680,
        "wires": [
            [
                "bbc49582392886d5"
            ]
        ]
    },
    {
        "id": "ce77e9beaf545999",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "info": "10/1/2024, 1:28:25 PMnode: debug 2010/1/2024, 1:28:25 PMnode: debug 20SELECT `10LC01TT01`.`10LC01TT01`, `10LC01TT02`.`10LC01TT02`, `10LC01CT01`.`10LC01CT01`, DATE_FORMAT(`10LC01TT01`.FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM `LC01`.`10LC01TT01` JOIN `10LC01TT02` ON `10LC01TT02`.FechaHora = `10LC01TT01`.FechaHora JOIN `10LC01CT01` ON `10LC01CT01`.FechaHora = `10LC01TT01`.FechaHora WHERE `10LC01TT01`.FechaHora BETWEEN '2024-10-01 04:40:23' AND '2024-10-01 11:40:33'; : msg.payload : Object\n{ Maquina: \"INT_LC01\", Sensor: \"10LC01TT01,10LC01TT02,10LC01CT…\", FI: \"2024-10-01T02:40:23.228Z\", FF: \"2024-10-01T09:40:33.699Z\" }\n10/1/2024, 1:28:25 PMnode: 5b11a1e0d3404780\nmsg : error\n\"Error: Table 'LC01.10LC01TT01' doesn't exist\" : msg.payload : Object\n{ Maquina: \"INT_LC01\", Sensor: \"10LC01TT01,10LC01TT02,10LC01CT…\", FI: \"2024-10-01T02:40:23.228Z\", FF: \"2024-10-01T09:40:33.699Z\" }\n10/1/2024, 1:28:25 PMnode: 5b11a1e0d3404780\nmsg : error\n\"Error: Table 'LC01.10LC01TT01' doesn't exist\"\n\n10/9/2024, 9:27:29 AMnode: Paquete Enviadomsg : Object\n{ headers: object, _msgid: \"684b31d8a9c980a0\", payload: \"Datos generales almacenados co…\", method: \"POST\", url: \"http://127.0.0.1:80/Treal.php\" … }\n10/9/2024, 9:27:29 AMnode: debug 20\nSELECT `10LC02TT01`.`10LC02TT01`, ` 10LC02TT02`.` 10LC02TT02`, DATE_FORMAT(`10LC02TT01`.FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM INT_`LC02`.`10LC02TT01` JOIN ` 10LC02TT02` ON ` 10LC02TT02`.FechaHora = `10LC02TT01`.FechaHora WHERE `10LC02TT01`.FechaHora BETWEEN '2024-10-09 06:23:02' AND '2024-10-09 09:23:08'; : msg.payload : Object\n\n\n\n, 9:33:09 AMnode: Paquete Enviadomsg : Object\n{ headers: object, _msgid: \"97b0abcf51f4f0dd\", payload: \"Datos generales almacenados co…\", method: \"POST\", url: \"http://127.0.0.1:80/Treal.php\" … }\n10/9/2024, 9:33:09 AMnode: debug 20SELECT `10LC02TT01`.`10LC02TT01`, ` 10LC02TT02`.` 10LC02TT02`, DATE_FORMAT(`10LC02TT01`.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora FROM `LC02`.`10LC02TT01` JOIN `LC02`.` 10LC02TT02` ON `LC02`.` 10LC02TT02`.FechaHora = `10LC02TT01`.FechaHora WHERE `10LC02TT01`.FechaHora BETWEEN '2024-10-09 06:23:02' AND '2024-10-09 09:23:08'; : msg.payload : Object\n{ Maquina: \"LC02\", Sensor: \"10LC02TT01, 10LC02TT02\", FI: \"2024-10-09T00:25:55.311Z\", FF: \"2024-10-09T07:26:03.092Z\" }\n10/9/2024, 9:33:09 AMnode: 5b11a1\n\n\n\nOM alucoat.maquinas : msg.payload : array[4]\n[ object, object, object, object ]\n10/9/2024, 9:48:12 AMnode: Debug ResponseSELECT * FROM alucoat.maquinas : msg.payload : string[48]\n\"Nombre de las maquinas almacenados correctamente\"\n10/9/2024, 9:48:12 AMnode: IBERFOIL2SELECT * FROM alucoat.maquinas : msg.payload : string[48]\n\"Nombre de las maquinas almacenados correctamente\"\n10/9/2024, 9:48:12 AMnode: debug 20\nSELECT `10LC02TT01`.`10LC02TT01`, ` 10LC02TT02`.` 10LC02TT02`, DATE_FORMAT(`10LC02TT01`.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora FROM `INT_LC02`.`10LC02TT01` JOIN `INT_LC02`.` 10LC02TT02` ON `INT_LC02`.` 10LC02TT02`.FechaHora = `10LC02TT01`.FechaHora WHERE `10LC02TT01`.FechaHora BETWEEN '2024-10-09 06:23:02' AND '2024-10-09 09:23:08'; : msg.payload : Object\n{ Maquina: \"INT_LC02\", Sensor: \"10LC02TT01, 10LC02TT02\", FI: \"2024-10-09T00:25:55.311Z\", FF: \"2024-10-09T07:26:03.092Z\" }\n\n10/9/2024, 10:03:03 AMnode: debug 20SELECT `t1`.`10LC02TT02`, `t2`.`10LC02CT01`, DATE_FORMAT(`t1`.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora FROM `LC02`.`10LC02TT02` AS `t1` JOIN `LC02`.`10LC02CT01` AS `t2` ON ``t2``.FechaHora = `t1`.FechaHora WHERE `t1`.FechaHora BETWEEN '2024-10-09 06:23:02' AND '2024-10-09 09:23:08'; : msg.payload : Object\n{ Maquina: \"LC02\", Sensor: \"10LC02TT02,10LC02TT02,10\nECT * FROM alucoat.maquinas : msg.payload : array[4]\n[ object, object, object, object ]\n10/9/2024, 10:10:10 AMnode: Debug ResponseSELECT Sensor FROM INT_LC02.Sensores : msg.payload : string[48]\n\"Sensores almacenados correctamente en el archivo\"\n10/9/2024, 10:10:10 AMnode: Debug ResponseSELECT * FROM alucoat.maquinas : msg.payload : string[48]\n\"Nombre de las maquinas almacenados correctamente\"\n10/9/2024, 10:10:11 AMnode: debug 20\nSELECT `t1`.`10LC02TT02`, `t2`.`10LC02CT01`, DATE_FORMAT(`t1`.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora FROM INT_`LC02`.`10LC02TT02` AS `t1` JOIN INT_`LC02`.`10LC02CT01` AS `t2` ON `t2`.FechaHora = `t1`.FechaHora WHERE `t1`.FechaHora BETWEEN '2024-10-09 06:23:02' AND '2024-10-09 09:23:08'; : msg.payload : Object\n{ Maquina: \"LC02\", Sensor: ",
        "x": 1020,
        "y": 260,
        "wires": []
    },
    {
        "id": "a01a3ebe16ea64d6",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "INSERCION EN FLOW",
        "func": "\n\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\n\n\n\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\n\n\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 760,
        "wires": [
            [
                "45bebc812ec5a5c1"
            ]
        ]
    },
    {
        "id": "42ab281cd0c2a951",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "Recepción de orden General",
        "url": "/Lotes",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 2600,
        "y": 260,
        "wires": [
            [
                "e50cf4a5636e56f3",
                "9eba13977e8db3b3"
            ]
        ]
    },
    {
        "id": "e50cf4a5636e56f3",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2580,
        "y": 300,
        "wires": []
    },
    {
        "id": "3685d7c9e05051f3",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "BLOCKEO DE RANGO",
        "func": "var FechaInicio = flow.get(\"FechaInicio\");  // Obtener la fecha de inicio del flujo\nvar FechaFin = flow.get(\"FechaFin\");        // Obtener la fecha de fin del flujo\n\n// Validar que ambas fechas estén definidas\nif (!FechaInicio || !FechaFin) {\n    // Si falta alguna de las fechas, simplemente devuelve el mensaje original\n    msg.payload = [{ \"ERROR\": \"Ha olvidado seleccionar una o ambas Fechas de selección\" }];\n    return msg;\n}\n\n// Convertir las fechas a objetos Date para realizar operaciones con ellas\nvar inicio = new Date(FechaInicio);\nvar fin = new Date(FechaFin);\n\n// Verificar si las fechas son válidas\nif (isNaN(inicio) || isNaN(fin)) {\n    // Si alguna de las fechas no es válida, devolver el mensaje original\n    msg.payload = [{ \"ERROR\":\"Ha olvidado seleccionar una o ambas Fechas de selección\"}];\n    msg.tipo = 2;\n    return msg;\n}\n\n// Calcular la diferencia en milisegundos entre las dos fechas\nvar diff = fin.getTime() - inicio.getTime();\n\n// Verificar si el rango entre las fechas es superior a 24 horas (86400000 ms)\nif (diff > 2592000000) {\n    // Si el rango es mayor a 24 horas, configurar el msg.payload y msg.tipo\n    msg.payload = [{ \"ERROR\":\"El rango horario que ha seleccionado es demasiado grande para esta consulta\" }];\n    msg.tipo = 1;\n    return msg;\n} else {\n    // Si el rango es menor o igual a 24 horas, devolver el mensaje tal cual\n    msg.tipo = 0;\n    msg.payload = msg.payload\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 260,
        "wires": [
            [
                "b458db2f93034bf0"
            ]
        ]
    },
    {
        "id": "b458db2f93034bf0",
        "type": "switch",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "tipo",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 3210,
        "y": 300,
        "wires": [
            [
                "d0ee68b666af2b19"
            ],
            [
                "8eef0454db66db64"
            ],
            []
        ]
    },
    {
        "id": "8eef0454db66db64",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "WARNINGS",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/sensorData_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3370,
        "y": 340,
        "wires": [
            [
                "0e8570f1b4c075ff"
            ]
        ]
    },
    {
        "id": "d0ee68b666af2b19",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT LOTE",
        "func": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicioLote = flow.get(\"FechaInicio\");\nvar FechaFinLote = flow.get(\"FechaFin\");\n\nvar query = \"SELECT *, DATE_FORMAT(3FechaInicioLote, '%Y-%m-%d %H:%i:%s') AS 3FechadeInicio, DATE_FORMAT(4FechaFinLote, '%Y-%m-%d %H:%i:%s') AS 4FechadeFin FROM INT_\" + Maquina + \".LOTE WHERE 3FechaInicioLote BETWEEN '\" + FechaInicioLote + \"' AND '\" + FechaFinLote + \"';\";\n\n  \nmsg.topic = query;\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 280,
        "wires": [
            [
                "3bef786a7d1b9c7f"
            ]
        ]
    },
    {
        "id": "3bef786a7d1b9c7f",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 3660,
        "y": 300,
        "wires": [
            [
                "5dbaff862524df9f"
            ]
        ]
    },
    {
        "id": "303b268e1d6b87d8",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAQUET",
        "func": "var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/Lotes.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// sensorData_handler.php   Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 400,
        "wires": [
            [
                "0e8570f1b4c075ff"
            ]
        ]
    },
    {
        "id": "5dbaff862524df9f",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3830,
        "y": 360,
        "wires": [
            [
                "303b268e1d6b87d8"
            ]
        ]
    },
    {
        "id": "0e8570f1b4c075ff",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 4050,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d3cb40b4250aa71f",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT SENSORES (n)",
        "func": "// Variable para almacenar el ID del intervalo\nvar intervalo;\n\n// Función que genera y ejecuta la consulta\nfunction generarConsulta() {\n    // Obtener el valor de la variable RUN\n    var run = flow.get(\"RUN\");\n\n    // Si RUN no es 1, no ejecutar la consulta\n    if (run !== 1) {\n        return;\n    }\n\n    // Obtener los valores de los sensores (que corresponden a las tablas)\n    var SensorR1 = flow.get(\"SensorR1\");  // Tabla 1 y su columna\n    var SensorR2 = flow.get(\"SensorR2\");  // Tabla 2 y su columna\n    var SensorR3 = flow.get(\"SensorR3\");  // Tabla 3 y su columna\n    var Database = flow.get(\"Maquina\"); \n\n    // Crear las partes del SELECT de manera dinámica\n    var selectClause = [];\n    var joinClause = [];\n\n    // Verificar si cada tabla y su respectiva columna están definidos, construir SELECT y JOIN dinámicamente\n    if (SensorR1) {\n        selectClause.push(\"(SELECT \" + SensorR1 + \".\" + SensorR1 + \" FROM \" + SensorR1 + \" ORDER BY \" + SensorR1 + \".FechaHora DESC LIMIT 1) AS \" + SensorR1);  // Seleccionar la última fila de Sensor1\n        joinClause.push(SensorR1);  // Añadir la tabla al FROM o JOIN\n    }\n\n    if (SensorR2) {\n        selectClause.push(\"(SELECT \" + SensorR2 + \".\" + SensorR2 + \" FROM \" + SensorR2 + \" ORDER BY \" + SensorR2 + \".FechaHora DESC LIMIT 1) AS \" + SensorR2);  // Seleccionar la última fila de Sensor2\n        joinClause.push(SensorR2);  // Añadir la tabla al FROM o JOIN\n    }\n\n    if (SensorR3) {\n        selectClause.push(\"(SELECT \" + SensorR3 + \".\" + SensorR3 + \" FROM \" + SensorR3 + \" ORDER BY \" + SensorR3 + \".FechaHora DESC LIMIT 1) AS \" + SensorR3);  // Seleccionar la última fila de Sensor3\n        joinClause.push(SensorR3);  // Añadir la tabla al FROM o JOIN\n    }\n\n    // Asegurarse de que haya al menos un sensor definido para hacer la consulta\n    if (selectClause.length > 0) {\n        // Agregar la columna FechaHora de la primera tabla\n        selectClause.push(\"(SELECT DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') FROM \" + Database + \".\" + SensorR1 + \" ORDER BY FechaHora DESC LIMIT 1) AS FechaHora\");\n\n        // Construir la consulta SELECT final\n    \n        var query = \"SELECT \" + selectClause.join(\", \") +\"\";  \n\n        // Asignar la consulta construida a msg.topic\n        msg.topic = query;\n\n        // Enviar la consulta (puedes enviar a otro nodo o procesar aquí)\n        node.send(msg);\n    } else {\n        // Si no hay sensores definidos, devolver un mensaje de error o manejar la situación\n        msg.topic = \"No sensors defined for the query.\";\n        node.send(msg);\n    }\n}\n\n// Función para manejar la ejecución periódica de la consulta\nfunction iniciarConsultaPeriodica() {\n    if (!intervalo) {  // Evitar múltiples intervalos\n        intervalo = setInterval(function() {\n            var run = flow.get(\"RUN\");\n\n            if (run === 1) {\n                generarConsulta();  // Ejecutar la consulta\n            } else {\n                clearInterval(intervalo);  // Detener la ejecución si RUN cambia a 0\n                intervalo = null;  // Reiniciar el valor de intervalo\n            }\n        }, 1000);  // Ejecutar cada 1000 milisegundos (1 segundo)\n    }\n}\n\n// Iniciar la ejecución periódica\niniciarConsultaPeriodica();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3110,
        "y": 700,
        "wires": [
            [
                "7f31b81caf5792a9"
            ]
        ]
    },
    {
        "id": "dd0ba917b205fdc4",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "REGISTRO DE LOTES",
        "info": "",
        "x": 3060,
        "y": 160,
        "wires": []
    },
    {
        "id": "7d0e37206dfb4927",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "DEFINIR PROCESO (General)",
        "func": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicio = flow.get(\"FechaInicio\");\nvar FechaFin = flow.get(\"FechaFin\");\n\nif (Maquina && Sensor && FechaInicio && FechaFin) {\n    var query = \"SELECT *, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM INT_\" + Maquina + \".\" + Sensor + \" WHERE FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\";\n    msg.payload = query;\n    msg.topic = query;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "00bf4efc93a997e9",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "DEFINIR PROCESO (General)",
        "func": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicio = flow.get(\"FechaInicio\");\nvar FechaFin = flow.get(\"FechaFin\");\n\nif (Maquina && Sensor && FechaInicio && FechaFin) {\n    var query = \"SELECT PROCESO AS 2_PROCESO, FASE AS 3_FASE, AVANCE_MANUAL, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS 4_Fechahora, LOTE AS 1_LOTE, LITROS AS 5_LITROS, ABORTAR FROM INT_\" + Maquina + \".\" + Sensor + \" WHERE FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\";\n    msg.payload = query;\n    msg.topic = query;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "430eb7d29fd51b35",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "DEFINIR PROCESO (General)",
        "func": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicio = flow.get(\"FechaInicio\");\nvar FechaFin = flow.get(\"FechaFin\");\n\nif (Maquina && Sensor && FechaInicio && FechaFin) {\n    var query = \"SELECT *, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM INT_\" + Maquina + \".\" + Sensor + \" WHERE FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\";\n    msg.payload = query;\n    msg.topic = query;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 920,
        "wires": [
            [
                "f5d039354e887668"
            ]
        ]
    },
    {
        "id": "eb98ceed3bad0522",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "-------------------------------------------------------------------------------------------------------EXCEL-------------------------------------------------------------------------------------------------",
        "info": "",
        "x": 700,
        "y": 2040,
        "wires": []
    },
    {
        "id": "62549b09c13444d5",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "DISEÑADO PARA ALUCOAT (EN DESUSO)",
        "info": "",
        "x": 3210,
        "y": 1320,
        "wires": []
    },
    {
        "id": "a657a51783a6f9b5",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "DEFAULT",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 800,
        "wires": [
            [
                "ffae66f81667f114"
            ]
        ]
    },
    {
        "id": "ffae66f81667f114",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "INSERCION EN FLOW",
        "func": "// Función para convertir una fecha en formato ISO 8601 a 'YYYY-MM-DD HH:MM:SS'\nfunction convertDateToMariaDBFormat(isoDate) {\n    if (!isoDate) return null; // Manejar casos en los que la fecha no exista\n    var date = new Date(isoDate);\n    var year = date.getFullYear();\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var day = String(date.getDate()).padStart(2, '0');\n    var hours = String(date.getHours()).padStart(2, '0');\n    var minutes = String(date.getMinutes()).padStart(2, '0');\n    var seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\n\nvar FechaFin = msg.payload.FF;\nvar FechaInicio = msg.payload.FI;\n\n// Convertir las fechas al formato 'YYYY-MM-DD HH:MM:SS', solo si existen\nvar FechaFinFormatted = FechaFin ? convertDateToMariaDBFormat(FechaFin) : null;\nvar FechaInicioFormatted = FechaInicio ? convertDateToMariaDBFormat(FechaInicio) : null;\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\nflow.set(\"Sensor\", \"General\");\n\n// Verificar y actualizar las fechas solo si están presentes en el payload\nif (FechaFin) {\n    flow.set(\"FechaFin\", FechaFinFormatted);\n}\nif (FechaInicio) {\n    flow.set(\"FechaInicio\", FechaInicioFormatted);\n}\n\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 800,
        "wires": [
            [
                "430eb7d29fd51b35"
            ]
        ]
    },
    {
        "id": "203ae0279352112f",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "INSERCION EN FLOW",
        "func": "// Función para convertir una fecha en formato ISO 8601 a 'YYYY-MM-DD HH:MM:SS'\nfunction convertDateToMariaDBFormat(isoDate) {\n    var date = new Date(isoDate);\n    var year = date.getFullYear();\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var day = String(date.getDate()).padStart(2, '0');\n    var hours = String(date.getHours()).padStart(2, '0');\n    var minutes = String(date.getMinutes()).padStart(2, '0');\n    var seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\n\nvar FechaFin = msg.payload.FF;\nvar FechaInicio = msg.payload.FI;\n\n// Convertir las fechas al formato 'YYYY-MM-DD HH:MM:SS'\nvar FechaFinFormatted = convertDateToMariaDBFormat(FechaFin);\nvar FechaInicioFormatted = convertDateToMariaDBFormat(FechaInicio);\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\n\nflow.set(\"FechaFin\", FechaFinFormatted);\nflow.set(\"FechaInicio\", FechaInicioFormatted);\n\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "b3c06db2b9882159",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "------------------------------------------------------------------OPENAI--------------------------------------------------------------------",
        "info": "",
        "x": 3450,
        "y": 2680,
        "wires": []
    },
    {
        "id": "a07843cfb6742e1c",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SET CHAT ON FLOW",
        "func": "flow.set(\"CHAT\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 3000,
        "wires": [
            [
                "86f056643ac5918e"
            ]
        ]
    },
    {
        "id": "a4c3ddfd1e6bc71b",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "Recepción de Mennsaje",
        "url": "/openai",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 3040,
        "y": 3000,
        "wires": [
            [
                "6e3004b9b1201216",
                "e3fdf06f67c788a1"
            ]
        ]
    },
    {
        "id": "6e3004b9b1201216",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3020,
        "y": 3040,
        "wires": []
    },
    {
        "id": "e3fdf06f67c788a1",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 3250,
        "y": 3000,
        "wires": [
            [
                "a07843cfb6742e1c"
            ]
        ]
    },
    {
        "id": "4a198dfd0d2700a8",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SOLICITUD",
        "func": "var Pregunta = flow.get (\"Pregunta\") \nvar History = flow.get (\"History\")\nif(History === null){\nmsg.payload = Pregunta\nmsg.topic = \"gpt4o\"\nreturn msg;\n}else{ \nmsg.history = History\nmsg.payload = Pregunta\nmsg.topic = \"gpt4o\"\nreturn msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3570,
        "y": 3080,
        "wires": [
            [
                "9eb8ebda2d91e1a3",
                "9c2e093d9cf8c25c"
            ]
        ]
    },
    {
        "id": "42e24a8523686a82",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Parseo de Respuesta",
        "func": "// Obtiene el contenido de msg.payload\nlet respuesta = msg.payload;\n\n// Crea el objeto JSON en el formato deseado\nlet respuestaJSON = [{\"Respuesta\": respuesta}];\n\n// Almacena el objeto JSON en la variable de flujo \"Respuesta\"\nflow.set(\"Respuesta\", respuestaJSON);\n\n// Puedes enviar el resultado al depurador para verificar\nmsg.payload = respuestaJSON;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3620,
        "y": 2860,
        "wires": [
            [
                "c62154c5ae095cbd",
                "b1a6bf56b17429b0"
            ]
        ]
    },
    {
        "id": "c62154c5ae095cbd",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SEND",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/openai.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = flow.get(\"Respuesta\");\n\nmsg.payload = dataToSend;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3850,
        "y": 2860,
        "wires": [
            [
                "9b6245eaa8ceb3e9"
            ]
        ]
    },
    {
        "id": "9b6245eaa8ceb3e9",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3970,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "75d6460485c6fb6f",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 3250,
        "y": 3180,
        "wires": [
            [
                "5bdd1778286d0de4"
            ]
        ]
    },
    {
        "id": "5bdd1778286d0de4",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FLOW SET SEND",
        "func": "flow.set(\"INFORMEC\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3470,
        "y": 3180,
        "wires": [
            [
                "3cd765e3632857f0",
                "590918c0d5d93eaa"
            ]
        ]
    },
    {
        "id": "950d2be2596e5bcc",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "Recepción de Lanzamiento de Informe",
        "url": "/INFORME",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 3030,
        "y": 3140,
        "wires": [
            [
                "c9bec5f8b37f0ad9",
                "c63f37c259a830a2"
            ]
        ]
    },
    {
        "id": "c9bec5f8b37f0ad9",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3040,
        "y": 3180,
        "wires": []
    },
    {
        "id": "c63f37c259a830a2",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "¡RUN!",
        "func": "msg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3300,
        "y": 3140,
        "wires": [
            [
                "5bdd1778286d0de4"
            ]
        ]
    },
    {
        "id": "3cd765e3632857f0",
        "type": "delay",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3520,
        "y": 3240,
        "wires": [
            [
                "cf6fe2c24f185b69"
            ]
        ]
    },
    {
        "id": "cf6fe2c24f185b69",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FLOW SET OFF",
        "func": "flow.set(\"INFORMEC\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3820,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "6e0564af41af41e9",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Lanzamiento de Informe",
        "func": "var INFORME = msg.payload\nvar INFORMEC = flow.get (\"INFORMEC\")\nif (INFORMEC === 1 ){\n    msg.payload = INFORME\n    return msg;\n}else\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3190,
        "y": 3300,
        "wires": [
            [
                "2406cc83ba10fe1b"
            ]
        ]
    },
    {
        "id": "590918c0d5d93eaa",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PARSEAR INFORME",
        "func": "msg.payload = flow.get (\"INFORME\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3260,
        "y": 3220,
        "wires": [
            [
                "cb6dc5ef3abce797"
            ]
        ]
    },
    {
        "id": "cb6dc5ef3abce797",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 3150,
        "y": 3260,
        "wires": [
            [
                "6e0564af41af41e9"
            ]
        ]
    },
    {
        "id": "cbbc620f91a29444",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SET INFORME",
        "func": "flow.set(\"INFORME\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "2406cc83ba10fe1b",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PARSEO PARA IA",
        "func": "// Obtiene la tabla JSON del mensaje de entrada\nlet tabla = msg.payload;\n\n// Convierte la tabla JSON a un objeto JavaScript (si aún no es un objeto)\nif (typeof tabla === \"string\") {\n    tabla = JSON.parse(tabla);\n}\n\n// Inicializa la variable para almacenar el texto\nlet texto = \"\";\n\n// Recorre cada fila de la tabla\ntabla.forEach(fila => {\n    // Inicializa una cadena para cada fila\n    let filaTexto = \"\";\n    \n    // Recorre todas las claves de la fila (son dinámicas, no dependen de los nombres específicos)\n    Object.keys(fila).forEach((clave) => {\n        // Añade la clave y el valor a la filaTexto (en formato \"Clave: Valor\")\n        filaTexto += `${clave}: ${fila[clave]}, `;\n    });\n\n    // Añade la fila al texto final, eliminando la coma y espacio final\n    texto += filaTexto.trim().slice(0, -1) + \"\\n\";\n});\n\n// Asigna el resultado de texto a msg.payload\nmsg.payload = texto.trim(); // Elimina cualquier espacio en blanco adicional al final\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 3300,
        "wires": [
            [
                "6a66dc891415c1e7"
            ]
        ]
    },
    {
        "id": "6a66dc891415c1e7",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 3590,
        "y": 3300,
        "wires": [
            [
                "a07843cfb6742e1c"
            ]
        ]
    },
    {
        "id": "86f056643ac5918e",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PREPARACIÓN DE Pregunta",
        "func": "// Obtiene el valor de la variable CHAT del flujo\nlet chat = flow.get(\"CHAT\");\n\nlet pregunta;\n\n// Intenta analizar el JSON si es válido, o lo toma como texto si no lo es\ntry {\n    // Si `chat` es un JSON válido, se convierte en objeto y extrae \"Chat\"\n    let chatObj = JSON.parse(chat);\n    pregunta = chatObj.Chat; // Asigna el valor de la propiedad \"Chat\" a la variable pregunta\n} catch (e) {\n    // Si no es JSON, simplemente usa `chat` como texto plano\n    pregunta = chat;\n}\n\n// Almacena el resultado en la variable de flujo \"Pregunta\"\nflow.set(\"Pregunta\", pregunta);\n\n// Retorna el mensaje para ver el valor en el debug\nmsg.payload = pregunta;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 3080,
        "wires": [
            [
                "4a198dfd0d2700a8"
            ]
        ]
    },
    {
        "id": "77ca63132ebde90f",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "LANZAMIENTO DE CORREO",
        "url": "/CORREOINFORME",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 3040,
        "y": 3400,
        "wires": [
            [
                "9125f0f11d688fdc",
                "47296216e231f8bb",
                "90651b7bf3633044"
            ]
        ]
    },
    {
        "id": "9125f0f11d688fdc",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3020,
        "y": 3440,
        "wires": []
    },
    {
        "id": "90651b7bf3633044",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "¡RUN!",
        "func": "msg.payload.Direccion = msg.payload.Direccion;\nmsg.payload = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3290,
        "y": 3400,
        "wires": [
            [
                "7ad3921cbd2086d6"
            ]
        ]
    },
    {
        "id": "7ad3921cbd2086d6",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FLOW SET SEND EMAIL",
        "func": "msg.payload.Direccion = msg.payload.Direccion;\nflow.set(\"INFORMEE\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3490,
        "y": 3400,
        "wires": [
            [
                "c30f534d1452462f"
            ]
        ]
    },
    {
        "id": "c30f534d1452462f",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Lanzamiento de Informe",
        "func": "var INFORME = flow.get (\"Respuesta\")\nvar INFORMEE = flow.get (\"INFORMEE\")\nmsg.payload.Direccion = msg.payload.Direccion;\nif (INFORMEE === 1 ){\n    msg.payload = INFORME\n    return msg;\n}else\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3310,
        "y": 3460,
        "wires": [
            [
                "57822223ade4020e",
                "5a7d4866d02c7b72"
            ]
        ]
    },
    {
        "id": "5a7d4866d02c7b72",
        "type": "delay",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3700,
        "y": 3460,
        "wires": [
            [
                "528aec7b1817e53f"
            ]
        ]
    },
    {
        "id": "528aec7b1817e53f",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "FLOW SET OFF",
        "func": "flow.set(\"INFORMEE\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3900,
        "y": 3460,
        "wires": [
            []
        ]
    },
    {
        "id": "b5534af95d7fcfaf",
        "type": "e-mail",
        "z": "6abff7f95fadc4e4",
        "server": "grupointegra-com-es.correoseguro.dinaserver.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Envio Email",
        "x": 3850,
        "y": 3520,
        "wires": []
    },
    {
        "id": "68b6ded05c80a78f",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Template Correo E ",
        "func": "// Extrae y convierte el contenido JSON desde el payload\nlet jsonData;\ntry {\n    jsonData = JSON.parse(msg.payload); // Parsear el JSON si es un string JSON\n} catch (error) {\n    node.error(\"Error al parsear JSON: \" + error.message);\n    return null;\n}\n\n// Obtén la respuesta y dirección de correo desde el JSON parseado\nlet respuesta = jsonData[0]?.Respuesta || \"No se recibió una respuesta.\";\nlet Direccion = jsonData[0]?.Direccion || \"\"; // Asegúrate de que Direccion existe en el JSON\n\n// Obtén la pregunta desde el flujo de datos\nvar Pregunta = flow.get(\"Pregunta\");\n\n// Da formato HTML a la respuesta para hacerla legible\nmsg.payload = `\n    <html>\n        <body>\n            <h2>Informe de Inteligencia Artificial - INTRAZA</h2>\n            <h3>${Pregunta}</h3>\n            <p>${respuesta.replace(/\\n/g, \"<br>\")}</p>\n        </body>\n    </html>\n`;\n\n// Configura el mensaje de correo\nmsg.to = Direccion;  // Dirección obtenida del JSON\nmsg.topic = \"Informe de Inteligencia Artificial-INTRAZA\";  // Asunto del correo\n\n// Especifica que el contenido es HTML para el nodo email\nmsg.html = msg.payload;\n\n// Opcionalmente, configura adjuntos si es necesario\nmsg.attachments = [\n    {\n        filename: \"Logo.jpg\",  // Nombre del archivo\n        path: \"/home/intboxes/Documents/Logo.jpg\",  // Ruta del archivo adjunto\n        cid: \"miImagen\"  // Identificador único para referenciar en HTML (si es necesario)\n    }\n];\n\n// Envía el mensaje\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 3520,
        "wires": [
            [
                "b5534af95d7fcfaf"
            ]
        ]
    },
    {
        "id": "57822223ade4020e",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 3230,
        "y": 3520,
        "wires": [
            [
                "c62217c0b5be9913"
            ]
        ]
    },
    {
        "id": "9eb8ebda2d91e1a3",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Almacenamiento de HISTORY",
        "func": "// Recupera el historial existente del flujo o crea un nuevo array si no existe\nlet history = flow.get(\"History\") || [];\n\n// Recupera la nueva pregunta desde el payload (se asume que es un string con la pregunta)\nlet nuevaPregunta = msg.payload;\n\n// Agrega la nueva pregunta al historial\nhistory.push({ \"role\": \"user\", \"content\": nuevaPregunta });\n\n// Guarda el historial actualizado en el flujo para futuras llamadas\nflow.set(\"History\", history);\n\n// Asigna el historial a msg.history para enviarlo al nodo ChatGPT\nmsg.history = history;\n\n// Asigna la pregunta al payload (como el prompt)\nmsg.payload = nuevaPregunta;\n\n// Establece msg.topic en \"gpt4\" si es requerido por el nodo ChatGPT\nmsg.topic = \"gpt4\";\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3810,
        "y": 3040,
        "wires": [
            [
                "95d6b5c416c85125"
            ]
        ]
    },
    {
        "id": "c62217c0b5be9913",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Template Correo E ",
        "func": "// Extrae y convierte el contenido JSON desde el payload\nlet jsonData;\ntry {\n    jsonData = JSON.parse(msg.payload); // Parsear el JSON si es un string JSON\n} catch (error) {\n    node.error(\"Error al parsear JSON: \" + error.message);\n    return null;\n}\n\n// Obtén la respuesta desde el JSON parseado\nlet respuesta = jsonData[0]?.Respuesta || \"No se recibió una respuesta.\";\nvar Pregunta = flow.get (\"Pregunta\")\nvar Direccion = flow.get (\"Direccion\");\n// Da formato HTML a la respuesta para hacerla legible\nmsg.payload = `\n    <html>\n        <body>\n            <h2>Informe de Inteligencia Artificial - INTRAZA -</h2>\n             <h3>Hola, soy Interia.</h3>\n             <h4>A continuación tiene el informe solicitado:</h4>\n            <p>${respuesta.replace(/\\n/g, \"<br>\")}</p>\n        </body>\n    </html>\n`;\n\n// Configura el mensaje de correo\nmsg.to = Direccion;  // Esto debería producir el resultado esperado en msg.to\n//msg.to = \"breixoherrera1@gmail.com\"; \nmsg.topic = \"Informe de Inteligencia Artificial-INTRAZA\";  // Asunto del correo\n\n// Especifica que el contenido es HTML para el nodo email\nmsg.html = msg.payload;\n\n// Opcionalmente, configura adjuntos si es necesario\nmsg.attachments = [\n    {\n        filename: \"Logo.jpg\",  // Nombre del archivo\n        path: \"/home/intboxes/Documents/Logo.jpg\",  // Ruta del archivo adjunto\n        cid: \"miImagen\"  // Identificador único para referenciar en HTML (si es necesario)\n    }\n];\n\n// Envía el mensaje\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 3560,
        "wires": [
            [
                "b5534af95d7fcfaf"
            ]
        ]
    },
    {
        "id": "95d6b5c416c85125",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Parseo de Pregunta",
        "func": "var Pregunta = flow.get (\"Pregunta\")\nvar INFORMEC = flow.get (\"INFORMEC\")\nif (INFORMEC === 0){\n    msg.payload = Pregunta\nreturn msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4080,
        "y": 3060,
        "wires": [
            [
                "05613e175dc1109d"
            ]
        ]
    },
    {
        "id": "0ceec17956d63219",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3750,
        "y": 2960,
        "wires": [
            [
                "9eb8ebda2d91e1a3"
            ]
        ]
    },
    {
        "id": "b1a6bf56b17429b0",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Parseo de Respuesta",
        "func": "// Obtiene el array almacenado en el flow\nvar datos = flow.get(\"Respuesta\");\n\n// Asegúrate de que el array existe y tiene al menos un elemento\nif (Array.isArray(datos) && datos.length > 0) {\n    // Obtiene el valor de \"Respuesta\" dentro del primer objeto del array\n    var Respuesta = datos[0].Respuesta;\n    msg.payload = Respuesta; // Asigna el valor a msg.payload\n} else {\n    msg.payload = \"No se encontró la respuesta.\"; // Mensaje alternativo en caso de que no exista\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4080,
        "y": 3020,
        "wires": [
            [
                "05613e175dc1109d"
            ]
        ]
    },
    {
        "id": "05613e175dc1109d",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Chat History Array",
        "func": "// Obtener el array actual del flow o inicializarlo si no existe\nvar chatArray = flow.get(\"chatArray\") || [];\n\n// Crear un nuevo objeto con el formato requerido y el nuevo payload\nvar nuevoElemento = { \"CHAT\": msg.payload };\n\n// Agregar el nuevo elemento al array\nchatArray.push(nuevoElemento);\n\n// Guardar el array actualizado en el contexto flow\nflow.set(\"chatArray\", chatArray);\n\n// Devolver el array completo como salida (opcional)\nmsg.payload = chatArray;\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4310,
        "y": 3040,
        "wires": [
            [
                "814f70fe6151f52e"
            ]
        ]
    },
    {
        "id": "e0e3bfeecc716250",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SEND",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/chat.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = flow.get(\"chatArray\");\n\nmsg.payload = dataToSend;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4270,
        "y": 2920,
        "wires": [
            [
                "900c6c36a1f6eb74"
            ]
        ]
    },
    {
        "id": "900c6c36a1f6eb74",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 4390,
        "y": 2860,
        "wires": [
            []
        ]
    },
    {
        "id": "814f70fe6151f52e",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Formateo de Longitud",
        "func": "// Configura la longitud máxima permitida por fragmento\nvar longitudMaxima = 120;\n\n// Obtiene el array almacenado en el contexto flow\nvar chatArray = flow.get(\"chatArray\") || [];\n\n// Función para dividir texto en fragmentos sin cortar palabras ni listas numeradas\nfunction dividirEnFragmentos(texto, longitud) {\n    var fragmentos = [];\n    var inicio = 0;\n    var regexNumeroPunto = /(?<=^|\\n)(\\d+\\.\\s)/g; // Expresión regular para \"número. \" al inicio de una línea o después de un salto de línea\n\n    while (inicio < texto.length) {\n        // Calcula el final tentativo del fragmento\n        var fin = inicio + longitud;\n\n        // Si el final supera la longitud del texto, ajustarlo al final del texto\n        if (fin >= texto.length) {\n            fragmentos.push(texto.slice(inicio).trim());\n            break;\n        }\n\n        // Busca el primer espacio o el patrón número seguido de punto dentro del rango\n        var espacio = texto.lastIndexOf(\" \", fin);\n        var posicionNumeroPunto = -1;\n        var match;\n\n        // Comprueba si hay un número con punto en el rango\n        while ((match = regexNumeroPunto.exec(texto)) !== null) {\n            if (match.index < fin) {\n                posicionNumeroPunto = match.index;\n                break;\n            }\n        }\n\n        // Decide el punto de corte\n        if (posicionNumeroPunto > inicio && posicionNumeroPunto < fin) {\n            // Si hay un número seguido de un punto dentro del rango, corta ahí\n            espacio = posicionNumeroPunto;\n        } else if (espacio <= inicio) {\n            // Si no encuentra un espacio, corta en la longitud exacta\n            espacio = fin;\n        }\n\n        // Agrega el fragmento al array y ajusta el inicio para el siguiente fragmento\n        fragmentos.push(texto.slice(inicio, espacio).trim());\n        inicio = espacio + 1; // Salta el espacio para el próximo fragmento\n    }\n\n    return fragmentos;\n}\n\n// Nuevo array donde almacenaremos los objetos CHAT divididos\nvar nuevoChatArray = [];\n\n// Recorre cada objeto en el array y ajusta el texto si es necesario\nchatArray.forEach(item => {\n    if (item.CHAT && item.CHAT.length > longitudMaxima) {\n        // Si el texto es demasiado largo, dividirlo en fragmentos sin cortar palabras ni listas numeradas\n        var fragmentos = dividirEnFragmentos(item.CHAT, longitudMaxima);\n        \n        // Añadir cada fragmento como un nuevo objeto CHAT al nuevo array\n        fragmentos.forEach(fragmento => {\n            nuevoChatArray.push({ \"CHAT\": fragmento });\n        });\n    } else {\n        // Si el texto no es demasiado largo, añadirlo tal cual\n        nuevoChatArray.push(item);\n    }\n});\n\n// Agrega un objeto CHAT vacío al final del array\nnuevoChatArray.push({ \"CHAT\": \"1\" });\n\n// Guarda el array modificado en el contexto flow\nflow.set(\"chatArray\", nuevoChatArray);\n\n// Devuelve el array modificado en msg.payload\nmsg.payload = nuevoChatArray;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4360,
        "y": 2980,
        "wires": [
            [
                "e0e3bfeecc716250"
            ]
        ]
    },
    {
        "id": "d50dbf55becbb063",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Formateo de Longitud",
        "func": "// Configura la longitud máxima permitida por fragmento\nvar longitudMaxima = 120;\n\n// Obtiene el array almacenado en el contexto flow\nvar chatArray = flow.get(\"chatArray\") || [];\n\n// Función para dividir texto en fragmentos de longitud máxima\nfunction dividirEnFragmentos(texto, longitud) {\n    var fragmentos = [];\n    for (var i = 0; i < texto.length; i += longitud) {\n        fragmentos.push(texto.slice(i, i + longitud));\n    }\n    return fragmentos;\n}\n\n// Nuevo array donde almacenaremos los objetos CHAT divididos\nvar nuevoChatArray = [];\n\n// Recorre cada objeto en el array y ajusta el texto si es necesario\nchatArray.forEach(item => {\n    if (item.CHAT && item.CHAT.length > longitudMaxima) {\n        // Si el texto es demasiado largo, dividirlo en fragmentos\n        var fragmentos = dividirEnFragmentos(item.CHAT, longitudMaxima);\n        \n        // Añadir cada fragmento como un nuevo objeto CHAT al nuevo array\n        fragmentos.forEach(fragmento => {\n            nuevoChatArray.push({ \"CHAT\": fragmento });\n        });\n    } else {\n        // Si el texto no es demasiado largo, añadirlo tal cual\n        nuevoChatArray.push(item);\n    }\n});\n\n// Guarda el array modificado en el contexto flow\nflow.set(\"chatArray\", nuevoChatArray);\n\n// Devuelve el array modificado en msg.payload\nmsg.payload = nuevoChatArray;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4360,
        "y": 3100,
        "wires": [
            []
        ]
    },
    {
        "id": "4ed5a43498cf4467",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Formateo de Longitud",
        "func": "// Configura la longitud máxima permitida por fragmento\nvar longitudMaxima = 120;\n\n// Obtiene el array almacenado en el contexto flow\nvar chatArray = flow.get(\"chatArray\") || [];\n\n// Función para dividir texto en fragmentos sin cortar palabras\nfunction dividirEnFragmentos(texto, longitud) {\n    var fragmentos = [];\n    var inicio = 0;\n\n    while (inicio < texto.length) {\n        // Calcula el final tentativo del fragmento\n        var fin = inicio + longitud;\n\n        // Si el final supera la longitud del texto, ajustarlo al final del texto\n        if (fin >= texto.length) {\n            fragmentos.push(texto.slice(inicio));\n            break;\n        }\n\n        // Encuentra el primer espacio después del límite de longitud\n        var espacio = texto.lastIndexOf(\" \", fin);\n\n        // Si no encuentra un espacio, corta en la longitud máxima\n        if (espacio <= inicio) {\n            espacio = fin; // Si no hay espacio, corta en el límite exacto\n        }\n\n        // Agrega el fragmento al array y ajusta el inicio para el siguiente fragmento\n        fragmentos.push(texto.slice(inicio, espacio));\n        inicio = espacio + 1; // Salta el espacio para el próximo fragmento\n    }\n\n    return fragmentos;\n}\n\n// Nuevo array donde almacenaremos los objetos CHAT divididos\nvar nuevoChatArray = [];\n\n// Recorre cada objeto en el array y ajusta el texto si es necesario\nchatArray.forEach(item => {\n    if (item.CHAT && item.CHAT.length > longitudMaxima) {\n        // Si el texto es demasiado largo, dividirlo en fragmentos sin cortar palabras\n        var fragmentos = dividirEnFragmentos(item.CHAT, longitudMaxima);\n        \n        // Añadir cada fragmento como un nuevo objeto CHAT al nuevo array\n        fragmentos.forEach(fragmento => {\n            nuevoChatArray.push({ \"CHAT\": fragmento });\n        });\n    } else {\n        // Si el texto no es demasiado largo, añadirlo tal cual\n        nuevoChatArray.push(item);\n    }\n});\n\n// Guarda el array modificado en el contexto flow\nflow.set(\"chatArray\", nuevoChatArray);\n\n// Devuelve el array modificado en msg.payload\nmsg.payload = nuevoChatArray;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4080,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "4b1ed7e20b0228d8",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Formateo de Longitud",
        "func": "// Configura la longitud máxima permitida por fragmento\nvar longitudMaxima = 120;\n\n// Obtiene el array almacenado en el contexto flow\nvar chatArray = flow.get(\"chatArray\") || [];\n\n// Función para dividir texto en fragmentos sin cortar palabras\nfunction dividirEnFragmentos(texto, longitud) {\n    var fragmentos = [];\n    var inicio = 0;\n\n    while (inicio < texto.length) {\n        // Calcula el final tentativo del fragmento\n        var fin = inicio + longitud;\n\n        // Si el final supera la longitud del texto, ajustarlo al final del texto\n        if (fin >= texto.length) {\n            fragmentos.push(texto.slice(inicio));\n            break;\n        }\n\n        // Encuentra el primer espacio después del límite de longitud\n        var espacio = texto.lastIndexOf(\" \", fin);\n\n        // Si no encuentra un espacio, corta en la longitud máxima\n        if (espacio <= inicio) {\n            espacio = fin; // Si no hay espacio, corta en el límite exacto\n        }\n\n        // Agrega el fragmento al array y ajusta el inicio para el siguiente fragmento\n        fragmentos.push(texto.slice(inicio, espacio));\n        inicio = espacio + 1; // Salta el espacio para el próximo fragmento\n    }\n\n    return fragmentos;\n}\n\n// Nuevo array donde almacenaremos los objetos CHAT divididos\nvar nuevoChatArray = [];\n\n// Recorre cada objeto en el array y ajusta el texto si es necesario\nchatArray.forEach(item => {\n    if (item.CHAT && item.CHAT.length > longitudMaxima) {\n        // Si el texto es demasiado largo, dividirlo en fragmentos sin cortar palabras\n        var fragmentos = dividirEnFragmentos(item.CHAT, longitudMaxima);\n        \n        // Añadir cada fragmento como un nuevo objeto CHAT al nuevo array\n        fragmentos.forEach(fragmento => {\n            nuevoChatArray.push({ \"CHAT\": fragmento });\n        });\n    } else {\n        // Si el texto no es demasiado largo, añadirlo tal cual\n        nuevoChatArray.push(item);\n    }\n});\n\n// Agrega un objeto CHAT vacío al final del array\nnuevoChatArray.push({ \"CHAT\": \"\" });\n\n// Guarda el array modificado en el contexto flow\nflow.set(\"chatArray\", nuevoChatArray);\n\n// Devuelve el array modificado en msg.payload\nmsg.payload = nuevoChatArray;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4080,
        "y": 2940,
        "wires": [
            []
        ]
    },
    {
        "id": "49e0ba0a8f292a46",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Formateo de Longitud",
        "func": "// Configura la longitud máxima permitida por fragmento\nvar longitudMaxima = 120;\n\n// Obtiene el array almacenado en el contexto flow\nvar chatArray = flow.get(\"chatArray\") || [];\n\n// Función para dividir texto en fragmentos sin cortar palabras\nfunction dividirEnFragmentos(texto, longitud) {\n    var fragmentos = [];\n    var inicio = 0;\n\n    while (inicio < texto.length) {\n        // Calcula el final tentativo del fragmento\n        var fin = inicio + longitud;\n\n        // Si el final supera la longitud del texto, ajustarlo al final del texto\n        if (fin >= texto.length) {\n            fragmentos.push(texto.slice(inicio));\n            break;\n        }\n\n        // Encuentra el primer espacio después del límite de longitud\n        var espacio = texto.lastIndexOf(\" \", fin);\n\n        // Si no encuentra un espacio, corta en la longitud máxima\n        if (espacio <= inicio) {\n            espacio = fin; // Si no hay espacio, corta en el límite exacto\n        }\n\n        // Agrega el fragmento al array y ajusta el inicio para el siguiente fragmento\n        fragmentos.push(texto.slice(inicio, espacio));\n        inicio = espacio + 1; // Salta el espacio para el próximo fragmento\n    }\n\n    return fragmentos;\n}\n\n// Nuevo array donde almacenaremos los objetos CHAT divididos\nvar nuevoChatArray = [];\n\n// Recorre cada objeto en el array y ajusta el texto si es necesario\nchatArray.forEach(item => {\n    if (item.CHAT && item.CHAT.length > longitudMaxima) {\n        // Si el texto es demasiado largo, dividirlo en fragmentos sin cortar palabras\n        var fragmentos = dividirEnFragmentos(item.CHAT, longitudMaxima);\n        \n        // Añadir cada fragmento como un nuevo objeto CHAT al nuevo array\n        fragmentos.forEach(fragmento => {\n            nuevoChatArray.push({ \"CHAT\": fragmento });\n        });\n    } else {\n        // Si el texto no es demasiado largo, añadirlo tal cual\n        nuevoChatArray.push(item);\n    }\n});\n\n// Agrega un objeto CHAT vacío al final del array\nnuevoChatArray.push({ \"CHAT\": \"\" });\n\n// Guarda el array modificado en el contexto flow\nflow.set(\"chatArray\", nuevoChatArray);\n\n// Devuelve el array modificado en msg.payload\nmsg.payload = nuevoChatArray;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4300,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "c02abc42ab8b1b21",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Formateo de Longitud",
        "func": "// Configura la longitud máxima permitida por fragmento\nvar longitudMaxima = 120;\n\n// Obtiene el array almacenado en el contexto flow\nvar chatArray = flow.get(\"chatArray\") || [];\n\n// Función para dividir texto en fragmentos sin cortar palabras ni números con puntos\nfunction dividirEnFragmentos(texto, longitud) {\n    var fragmentos = [];\n    var inicio = 0;\n    var regexNumeroPunto = /\\d+\\.\\s/g; // Expresión regular para \"número. \"\n\n    while (inicio < texto.length) {\n        // Calcula el final tentativo del fragmento\n        var fin = inicio + longitud;\n\n        // Si el final supera la longitud del texto, ajustarlo al final del texto\n        if (fin >= texto.length) {\n            fragmentos.push(texto.slice(inicio));\n            break;\n        }\n\n        // Busca el próximo número seguido de un punto y un espacio después del inicio\n        var match = texto.slice(inicio, fin).match(regexNumeroPunto);\n        var posicionNumeroPunto = match ? texto.indexOf(match[0], inicio) : -1;\n\n        // Encuentra el primer espacio después del límite de longitud\n        var espacio = texto.lastIndexOf(\" \", fin);\n\n        // Decide el punto de corte\n        if (posicionNumeroPunto > inicio && posicionNumeroPunto < fin) {\n            // Si hay un número con punto y espacio, corta ahí\n            espacio = posicionNumeroPunto;\n        } else if (espacio <= inicio) {\n            // Si no encuentra un espacio, corta en la longitud exacta\n            espacio = fin;\n        }\n\n        // Agrega el fragmento al array y ajusta el inicio para el siguiente fragmento\n        fragmentos.push(texto.slice(inicio, espacio));\n        inicio = espacio + 1; // Salta el espacio para el próximo fragmento\n    }\n\n    return fragmentos;\n}\n\n// Nuevo array donde almacenaremos los objetos CHAT divididos\nvar nuevoChatArray = [];\n\n// Recorre cada objeto en el array y ajusta el texto si es necesario\nchatArray.forEach(item => {\n    if (item.CHAT && item.CHAT.length > longitudMaxima) {\n        // Si el texto es demasiado largo, dividirlo en fragmentos sin cortar palabras ni números con punto y espacio\n        var fragmentos = dividirEnFragmentos(item.CHAT, longitudMaxima);\n        \n        // Añadir cada fragmento como un nuevo objeto CHAT al nuevo array\n        fragmentos.forEach(fragmento => {\n            nuevoChatArray.push({ \"CHAT\": fragmento });\n        });\n    } else {\n        // Si el texto no es demasiado largo, añadirlo tal cual\n        nuevoChatArray.push(item);\n    }\n});\n\n// Agrega un objeto CHAT vacío al final del array\nnuevoChatArray.push({ \"CHAT\": \"\" });\n\n// Guarda el array modificado en el contexto flow\nflow.set(\"chatArray\", nuevoChatArray);\n\n// Devuelve el array modificado en msg.payload\nmsg.payload = nuevoChatArray;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4100,
        "y": 2980,
        "wires": [
            []
        ]
    },
    {
        "id": "ed6115c8982c6e6a",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Inserción de Respuesta",
        "func": "var Respuesta = flow.get(\"RespuestaP\");\n\n\n\nmsg.topic = \"INSERT INTO Interia.Chat (Respuesta, Pregunta) VALUES ('\" + Respuesta + \"', '.');\";\nreturn msg;\n\n    \n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4070,
        "y": 3180,
        "wires": [
            [
                "4f3eeec75c8de02a"
            ]
        ]
    },
    {
        "id": "3e84f758573ed6d9",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Inserción de Pregunta",
        "func": "var Pregunta = flow.get(\"Pregunta\");\nvar INFORMEC = flow.get(\"INFORMEC\");\n\nif (INFORMEC === 0) {\n    msg.topic = \"INSERT INTO Interia.Chat (Pregunta, Respuesta) VALUES ('\" + Pregunta + \"', '.');\";\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 3220,
        "wires": [
            [
                "6db0c48c04724b33"
            ]
        ]
    },
    {
        "id": "4f3eeec75c8de02a",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "3ee372b557faa875",
        "name": "",
        "x": 4270,
        "y": 3200,
        "wires": [
            [
                "43e17c99df875055"
            ]
        ]
    },
    {
        "id": "8ee735abf2f35503",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "BLANKS",
        "func": "\n\nmsg.topic = \"INSERT INTO Interia.Chat (Respuesta) VALUES ('------------------------------------------------------');\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4420,
        "y": 3200,
        "wires": [
            [
                "0755981761cfaf20"
            ]
        ]
    },
    {
        "id": "6db0c48c04724b33",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "3ee372b557faa875",
        "name": "",
        "x": 4270,
        "y": 3260,
        "wires": [
            [
                "43e17c99df875055"
            ]
        ]
    },
    {
        "id": "e8b7abca5797898f",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "BLANKS",
        "func": "\nmsg.topic = \"INSERT INTO Interia.Chat (Pregunta) VALUES ('------------------------------------------------------');\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4420,
        "y": 3260,
        "wires": [
            [
                "f464540c3e5ee2a7"
            ]
        ]
    },
    {
        "id": "0755981761cfaf20",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "3ee372b557faa875",
        "name": "",
        "x": 4570,
        "y": 3200,
        "wires": [
            [
                "43e17c99df875055"
            ]
        ]
    },
    {
        "id": "f464540c3e5ee2a7",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "3ee372b557faa875",
        "name": "",
        "x": 4570,
        "y": 3260,
        "wires": [
            [
                "43e17c99df875055"
            ]
        ]
    },
    {
        "id": "43e17c99df875055",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT",
        "func": "msg.topic = \"SELECT * FROM Interia.Chat\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4720,
        "y": 3240,
        "wires": [
            [
                "ad58cf6e41150946"
            ]
        ]
    },
    {
        "id": "ad58cf6e41150946",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "3ee372b557faa875",
        "name": "",
        "x": 4890,
        "y": 3240,
        "wires": [
            [
                "e61181edb8e23b97"
            ]
        ]
    },
    {
        "id": "6f6256e8859e86d4",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SEND",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/chat.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = flow.get(\"DBArray\");\n\nmsg.payload = dataToSend;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4790,
        "y": 3080,
        "wires": [
            [
                "711178f8cfbe0ebb"
            ]
        ]
    },
    {
        "id": "711178f8cfbe0ebb",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 4830,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "e61181edb8e23b97",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SET",
        "func": "flow.set (\"DBArray\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4790,
        "y": 3160,
        "wires": [
            [
                "6f6256e8859e86d4"
            ]
        ]
    },
    {
        "id": "631bb27678550bfe",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Parseo de Respuesta",
        "func": "// Obtiene el array almacenado en el flow\nvar datos = flow.get(\"Respuesta\");\n\n// Asegúrate de que el array existe y tiene al menos un elemento\nif (Array.isArray(datos) && datos.length > 0) {\n    // Obtiene el valor de \"Respuesta\" dentro del primer objeto del array\n    var Respuesta = datos[0].Respuesta;\n    flow.set (\"RespuestaP\",Respuesta)\n    msg.payload = Respuesta; // Asigna el valor a msg.payload\n} else {\n    msg.payload = \"No se encontró la respuesta.\"; // Mensaje alternativo en caso de que no exista\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 3140,
        "wires": [
            [
                "ed6115c8982c6e6a"
            ]
        ]
    },
    {
        "id": "47296216e231f8bb",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SET Direccion",
        "func": "flow.set (\"Direccion\",msg.payload.Direccion)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3320,
        "y": 3360,
        "wires": [
            []
        ]
    },
    {
        "id": "e9eda83c558daafb",
        "type": "http in",
        "z": "6abff7f95fadc4e4",
        "name": "BORRADO DE CHAT ",
        "url": "/BORRARCHAT",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 3020,
        "y": 3620,
        "wires": [
            [
                "a07bb011569e8cc2",
                "984db57bfafbcdc8"
            ]
        ]
    },
    {
        "id": "a07bb011569e8cc2",
        "type": "http response",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3040,
        "y": 3680,
        "wires": []
    },
    {
        "id": "984db57bfafbcdc8",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Borrado de chat ",
        "func": "flow.set(\"History\", null);  // Esto efectivamente borra la variable \"History\"\nflow.set(\"chatArray\", null);  // Esto efectivamente borra la variable \"chatArray\"\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 3620,
        "wires": [
            [
                "f84b0d52624bcdeb"
            ]
        ]
    },
    {
        "id": "f84b0d52624bcdeb",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PROMPT de Inicio",
        "func": "msg.payload =  \"Hola Interia ¿Cómo estás hoy?\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3300,
        "y": 3700,
        "wires": [
            [
                "ac3a8e8127613a73"
            ]
        ]
    },
    {
        "id": "ac3a8e8127613a73",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 3510,
        "y": 3700,
        "wires": [
            [
                "a07843cfb6742e1c"
            ]
        ]
    },
    {
        "id": "cde3fc3ee1d246ed",
        "type": "delay",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3740,
        "y": 3180,
        "wires": [
            [
                "a07843cfb6742e1c"
            ]
        ]
    },
    {
        "id": "de5ae3e35d7a4c2c",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PARSEO PARA IA",
        "func": "// Obtiene la tabla JSON del mensaje de entrada\nlet tabla = msg.payload;\n\n// Convierte la tabla JSON a un objeto JavaScript (si aún no es un objeto)\nif (typeof tabla === \"string\") {\n    tabla = JSON.parse(tabla);\n}\n\n// Inicializa la variable para almacenar el texto\nlet texto = \"\";\n\n// Recorre cada fila de la tabla\ntabla.forEach(fila => {\n    // Para cada fila, crea una línea de texto con los valores\n    texto += `FechaHora: ${fila.FechaHora}, Lote: ${fila[\"1LOTE\"]}, Receta: ${fila[\"2RECETA\"]}, `;\n    texto += `Proceso: ${fila[\"3PROCESO\"]}, Fase: ${fila[\"4FASE\"]}, Operario: ${fila[\"5OPERARIO\"]}, `;\n    texto += `Matricula: ${fila.MATRICULA}, Conductor: ${fila.CONDUCTOR}, `;\n    texto += `Proveedor: ${fila.PROVEEDOR}, Litros: ${fila.LITROS}, Destino: ${fila.DESTINO}, `;\n    texto += `Error Ciclo: ${fila.zERROR_CICLO}\\n`;\n});\n\n// Asigna el resultado de texto a msg.payload\nmsg.payload = texto.trim(); // Elimina cualquier espacio en blanco adicional al final\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 3360,
        "wires": [
            []
        ]
    },
    {
        "id": "9c2e093d9cf8c25c",
        "type": "chatgpt",
        "z": "6abff7f95fadc4e4",
        "name": "IA SERRY",
        "x": 3310,
        "y": 2860,
        "wires": [
            [
                "42e24a8523686a82",
                "0ceec17956d63219"
            ]
        ]
    },
    {
        "id": "eda48b196ac0b3ef",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3210,
        "y": 4420,
        "wires": [
            []
        ]
    },
    {
        "id": "d6893e02f4b1bce3",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "1SEC SEND",
        "props": [
            {
                "p": "headers",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 3220,
        "y": 4120,
        "wires": [
            [
                "16b9b59eedb15c5b"
            ]
        ]
    },
    {
        "id": "b89cfc345b7dcc27",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "------------------------------------------------------------------ALERTAS--------------------------------------------------------------------",
        "info": "",
        "x": 3490,
        "y": 4020,
        "wires": []
    },
    {
        "id": "9f806ff2d7391c63",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "d6745bd9bd478db4",
        "name": "",
        "x": 3210,
        "y": 4200,
        "wires": [
            [
                "62bb9f899ee0dc95"
            ]
        ]
    },
    {
        "id": "16b9b59eedb15c5b",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT",
        "func": "msg.topic = \"SELECT FechaHora, 02PR01TT01 FROM 02PR01TT01 ORDER BY FechaHora DESC LIMIT 1;\" ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 4160,
        "wires": [
            [
                "9f806ff2d7391c63"
            ]
        ]
    },
    {
        "id": "084870403a96ad1a",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "ALMACENAMIENTO TEMPORAL(N)",
        "func": "// Obtener la variable de flujo 'PR' (si no existe, inicializar como un array vacío)\nvar prArray = flow.get(\"Al\") || [];\n\n// Obtener el paquete JSON recibido (se asume que está en msg.payload)\nvar paquete = msg.payload;\n\n// Si el paquete es un array, extraer sus elementos y añadirlos a prArray\nif (Array.isArray(paquete)) {\n    prArray.push(...paquete);\n} else {\n    prArray.push(paquete);\n}\n\n// Verificar si el array ha alcanzado o excedido 100 elementos\nif (prArray.length > 20) {\n    // Eliminar el primer elemento para mantener el array en un máximo de 100 elementos\n    prArray.shift();\n}\n\n// Actualizar la variable de flujo con el nuevo array\nflow.set(\"Al\", prArray);\n\n// Enviar el array actualizado en msg.payload para el siguiente nodo\nmsg.payload = prArray;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3290,
        "y": 4260,
        "wires": [
            [
                "07a918ddcf89cd67"
            ]
        ]
    },
    {
        "id": "07a918ddcf89cd67",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT",
        "func": "var payload = flow.get (\"Al\")\nmsg.payload = payload\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 4300,
        "wires": [
            [
                "95b4f4b570780c1c"
            ]
        ]
    },
    {
        "id": "65216ec97e915ca2",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAQUET",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/02PR01TT01.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n//post_handler\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 4380,
        "wires": [
            [
                "eda48b196ac0b3ef"
            ]
        ]
    },
    {
        "id": "95b4f4b570780c1c",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3190,
        "y": 4340,
        "wires": [
            [
                "65216ec97e915ca2"
            ]
        ]
    },
    {
        "id": "dddc68e2bd4a1b46",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3770,
        "y": 4420,
        "wires": [
            []
        ]
    },
    {
        "id": "07b77d1867035fd2",
        "type": "inject",
        "z": "6abff7f95fadc4e4",
        "name": "1SEC SEND",
        "props": [
            {
                "p": "headers",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 3780,
        "y": 4120,
        "wires": [
            [
                "3f84e83703c857e9"
            ]
        ]
    },
    {
        "id": "f0775423686cd37f",
        "type": "mysql",
        "z": "6abff7f95fadc4e4",
        "mydb": "d6745bd9bd478db4",
        "name": "",
        "x": 3770,
        "y": 4200,
        "wires": [
            [
                "dfc0b7891dfd1d19"
            ]
        ]
    },
    {
        "id": "3f84e83703c857e9",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT",
        "func": "msg.topic = \"SELECT FechaHora, 02PR01QT01 FROM 02PR01QT01 ORDER BY FechaHora DESC LIMIT 1;\" ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3760,
        "y": 4160,
        "wires": [
            [
                "f0775423686cd37f"
            ]
        ]
    },
    {
        "id": "dfc0b7891dfd1d19",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "ALMACENAMIENTO TEMPORAL(N)",
        "func": "// Obtener la variable de flujo 'PR' (si no existe, inicializar como un array vacío)\nvar prArray = flow.get(\"AlQT\") || [];\n\n// Obtener el paquete JSON recibido (se asume que está en msg.payload)\nvar paquete = msg.payload;\n\n// Si el paquete es un array, extraer sus elementos y añadirlos a prArray\nif (Array.isArray(paquete)) {\n    prArray.push(...paquete);\n} else {\n    prArray.push(paquete);\n}\n\n// Verificar si el array ha alcanzado o excedido 100 elementos\nif (prArray.length > 20) {\n    // Eliminar el primer elemento para mantener el array en un máximo de 100 elementos\n    prArray.shift();\n}\n\n// Actualizar la variable de flujo con el nuevo array\nflow.set(\"AlQT\", prArray);\n\n// Enviar el array actualizado en msg.payload para el siguiente nodo\nmsg.payload = prArray;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3850,
        "y": 4260,
        "wires": [
            [
                "bfbae2beb3e9d24d"
            ]
        ]
    },
    {
        "id": "bfbae2beb3e9d24d",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT",
        "func": "var payload = flow.get (\"AlQT\")\nmsg.payload = payload\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3760,
        "y": 4300,
        "wires": [
            [
                "12fe94152fe8b8c6"
            ]
        ]
    },
    {
        "id": "75c9bd914eff749d",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "PAQUET",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/02PR01QT01.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n//post_handler\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3760,
        "y": 4380,
        "wires": [
            [
                "dddc68e2bd4a1b46"
            ]
        ]
    },
    {
        "id": "12fe94152fe8b8c6",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3750,
        "y": 4340,
        "wires": [
            [
                "75c9bd914eff749d"
            ]
        ]
    },
    {
        "id": "62bb9f899ee0dc95",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SET",
        "func": "flow.set (\"Al\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3390,
        "y": 4180,
        "wires": [
            [
                "07a918ddcf89cd67"
            ]
        ]
    },
    {
        "id": "cc54c5ec36305165",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "HTTP Request to External App",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3810,
        "y": 2240,
        "wires": [
            [
                "36407277837d1b57"
            ]
        ]
    },
    {
        "id": "4adb7211b5de7964",
        "type": "json",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 3530,
        "y": 2240,
        "wires": [
            [
                "cc54c5ec36305165"
            ]
        ]
    },
    {
        "id": "e99c097e2dc7b766",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "EMPAQUETADO HTTP",
        "func": "var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/Fecha.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 2240,
        "wires": [
            [
                "4adb7211b5de7964"
            ]
        ]
    },
    {
        "id": "bda86d6755bb53f4",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Fecha General",
        "func": "var FechaI = flow.get(\"FechaInicio\");\nvar FechaF = flow.get(\"FechaFin\");\n\n// Asegúrate de interpolar correctamente las variables FechaI y FechaF en el objeto\nvar query = [{ \"1Inicio\": FechaI, \"2Fin\": FechaF }];\n\nmsg.payload = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2620,
        "y": 2240,
        "wires": [
            [
                "e99c097e2dc7b766"
            ]
        ]
    },
    {
        "id": "b0b545c1a197827b",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "Extraer las variables del payload",
        "func": "// Función para convertir una fecha en formato ISO 8601 a 'YYYY-MM-DD HH:MM:SS'\nfunction convertDateToMariaDBFormat(isoDate) {\n    if (!isoDate) return null; // Manejar casos en los que la fecha no exista\n    var date = new Date(isoDate);\n    var year = date.getFullYear();\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var day = String(date.getDate()).padStart(2, '0');\n    var hours = String(date.getHours()).padStart(2, '0');\n    var minutes = String(date.getMinutes()).padStart(2, '0');\n    var seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\nvar Sensor = msg.payload.Sensor;\nvar FechaFin = msg.payload.FF;\nvar FechaInicio = msg.payload.FI;\n\n// Convertir las fechas al formato 'YYYY-MM-DD HH:MM:SS', solo si existen\nvar FechaFinFormatted = FechaFin ? convertDateToMariaDBFormat(FechaFin) : null;\nvar FechaInicioFormatted = FechaInicio ? convertDateToMariaDBFormat(FechaInicio) : null;\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\nflow.set(\"Sensor\", Sensor);\n\n// Verificar y actualizar las fechas solo si están presentes en el payload\nif (FechaFin) {\n    flow.set(\"FechaFin\", FechaFinFormatted);\n}\nif (FechaInicio) {\n    flow.set(\"FechaInicio\", FechaInicioFormatted);\n}\n\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1240,
        "wires": [
            [
                "e7df2f16cbdbbc8f"
            ]
        ]
    },
    {
        "id": "c65f8aa95d831d12",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "TESTER",
        "func": "flow.set (\"TEST\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "1a0c52e2922306a0",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "function 105",
        "func": "// Función para convertir una fecha en formato ISO 8601 a 'YYYY-MM-DD HH:MM:SS'\nfunction convertDateToMariaDBFormat(isoDate) {\n    if (!isoDate) return null; // Manejar casos en los que la fecha no exista\n    var date = new Date(isoDate);\n    var year = date.getFullYear();\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var day = String(date.getDate()).padStart(2, '0');\n    var hours = String(date.getHours()).padStart(2, '0');\n    var minutes = String(date.getMinutes()).padStart(2, '0');\n    var seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\n\nvar FechaFin = msg.payload.FF;\nvar FechaInicio = msg.payload.FI;\n\n// Convertir las fechas al formato 'YYYY-MM-DD HH:MM:SS', solo si existen\nvar FechaFinFormatted = FechaFin ? convertDateToMariaDBFormat(FechaFin) : null;\nvar FechaInicioFormatted = FechaInicio ? convertDateToMariaDBFormat(FechaInicio) : null;\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\n\n\n// Verificar y actualizar las fechas solo si están presentes en el payload\nif (FechaFin) {\n    flow.set(\"FechaFin\", FechaFinFormatted);\n}\nif (FechaInicio) {\n    flow.set(\"FechaInicio\", FechaInicioFormatted);\n}\n\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 720,
        "wires": [
            [
                "45bebc812ec5a5c1"
            ]
        ]
    },
    {
        "id": "585323c57daf7cba",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "function 106",
        "func": "// Función para convertir una fecha en formato ISO 8601 a 'YYYY-MM-DD HH:MM:SS'\nfunction convertDateToMariaDBFormat(isoDate) {\n    if (!isoDate) return null; // Manejar casos en los que la fecha no exista\n    var date = new Date(isoDate);\n    var year = date.getFullYear();\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var day = String(date.getDate()).padStart(2, '0');\n    var hours = String(date.getHours()).padStart(2, '0');\n    var minutes = String(date.getMinutes()).padStart(2, '0');\n    var seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\nvar Sensor = msg.payload.Sensor;\n\nvar FechaFin = msg.payload.FF;\nvar FechaInicio = msg.payload.FI;\n\n// Convertir las fechas al formato 'YYYY-MM-DD HH:MM:SS', solo si existen\nvar FechaFinFormatted = FechaFin ? convertDateToMariaDBFormat(FechaFin) : null;\nvar FechaInicioFormatted = FechaInicio ? convertDateToMariaDBFormat(FechaInicio) : null;\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\nflow.set(\"Sensor\", Sensor);\n\n\n// Verificar y actualizar las fechas solo si están presentes en el payload\nif (FechaFin) {\n    flow.set(\"FechaFin\", FechaFinFormatted);\n}\nif (FechaInicio) {\n    flow.set(\"FechaInicio\", FechaInicioFormatted);\n}\n\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 880,
        "wires": [
            [
                "e8eddb7951d7aebf"
            ]
        ]
    },
    {
        "id": "61559c6d862d2846",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "WARNINGS",
        "func": " var TOKEN = flow.get(\"TOKEN\");\nmsg.method = 'POST';\nmsg.url = 'http://127.0.0.1:80/post_handler.php';\nmsg.headers = {\n    'content-type': 'application/json'\n    \n};\n\n// Aquí configura los datos que deseas enviar a la aplicación externa\nvar dataToSend = msg.payload;\n\nmsg.payload = dataToSend;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 620,
        "wires": [
            [
                "63e182155e23f777"
            ]
        ]
    },
    {
        "id": "63e182155e23f777",
        "type": "http request",
        "z": "6abff7f95fadc4e4",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1530,
        "y": 620,
        "wires": [
            [
                "ead51490954a1898"
            ]
        ]
    },
    {
        "id": "a81b83aede8cb926",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "CARGANDO...",
        "func": "\n\n    msg.payload = [{ \"ESPERE POR FAVOR\":\"CARGANDO DATOS DE SENSORES...\" }];\n    \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 620,
        "wires": [
            [
                "61559c6d862d2846"
            ]
        ]
    },
    {
        "id": "9eba13977e8db3b3",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "INSERCION EN FLOW",
        "func": "// Función para convertir una fecha en formato ISO 8601 a 'YYYY-MM-DD HH:MM:SS'\nfunction convertDateToMariaDBFormat(isoDate) {\n    if (!isoDate) return null; // Manejar casos en los que la fecha no exista\n    var date = new Date(isoDate);\n    var year = date.getFullYear();\n    var month = String(date.getMonth() + 1).padStart(2, '0');\n    var day = String(date.getDate()).padStart(2, '0');\n    var hours = String(date.getHours()).padStart(2, '0');\n    var minutes = String(date.getMinutes()).padStart(2, '0');\n    var seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n// Extraer las variables del payload\nvar Maquina = msg.payload.Maquina;\nvar Sensor = msg.payload.Sensor;\nvar FechaFin = msg.payload.FF;\nvar FechaInicio = msg.payload.FI;\n\n// Convertir las fechas al formato 'YYYY-MM-DD HH:MM:SS', solo si existen\nvar FechaFinFormatted = FechaFin ? convertDateToMariaDBFormat(FechaFin) : null;\nvar FechaInicioFormatted = FechaInicio ? convertDateToMariaDBFormat(FechaInicio) : null;\n\n// Guardar las variables en el contexto del flow\nflow.set(\"Maquina\", Maquina);\nflow.set(\"Sensor\", Sensor);\n\n// Verificar y actualizar las fechas solo si están presentes en el payload\nif (FechaFin) {\n    flow.set(\"FechaFin\", FechaFinFormatted);\n}\nif (FechaInicio) {\n    flow.set(\"FechaInicio\", FechaInicioFormatted);\n}\n\n// Devolver el mensaje original para continuar con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 320,
        "wires": [
            [
                "3685d7c9e05051f3"
            ]
        ]
    },
    {
        "id": "04e0c510bde9ae95",
        "type": "comment",
        "z": "6abff7f95fadc4e4",
        "name": "------------------------------------------------------------------INTIA--------------------------------------------------------------------",
        "info": "",
        "x": 4260,
        "y": 2680,
        "wires": []
    },
    {
        "id": "85bb31df6fbc89bb",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "SELECT CON CONVERSION DE FASE",
        "func": "var Maquina = flow.get(\"Maquina\");\nvar Sensor = flow.get(\"Sensor\");\nvar FechaInicio = flow.get(\"FechaInicio\");\nvar FechaFin = flow.get(\"FechaFin\");\n\n//var query = \"SELECT T1.*, DATE_FORMAT(T1.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora, T2.FASE AS FASE_TRADUCIDA FROM INT_\" + Maquina + \".General AS T1 LEFT JOIN CODFASE AS T2 ON T1.`4FASE` = T2.CODIGO WHERE T1.FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\"\nvar query = \"SELECT T1.*, DATE_FORMAT(T1.FechaHora, '%Y-%m-%d %H:%i:%s') AS Fechahora, T2.FASE AS `4_FASE` FROM INT_\" + Maquina + \".General AS T1 LEFT JOIN CODFASE AS T2 ON T1.`4FASE` = T2.CODIGO WHERE T1.FechaHora BETWEEN '\" + FechaInicio + \"' AND '\" + FechaFin + \"';\"\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1200,
        "wires": [
            [
                "c02c99e6cc1b8012",
                "9e0c59668eddf642"
            ]
        ]
    },
    {
        "id": "9e0c59668eddf642",
        "type": "function",
        "z": "6abff7f95fadc4e4",
        "name": "function 109",
        "func": "flow.set(\"TEST2\",msg.topic)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "e160e5862ea9a1d0",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "------------------------------------------------------------------------*ESCRITURA EN GENERAL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2020,
        "y": 700,
        "wires": []
    },
    {
        "id": "d369c1f131b14403",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "d7b8a7f2e2b05c4c",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Definir_Maquina",
        "func": "//Introducir en var Nombre = 'Nombre de la máquina'\n\nvar Nombre = 'RECEPCION'\n\nflow.set('Maquina',Nombre);\n\nflow.set('DBname',\"INT_\"+flow.get('Maquina'));\n\n\nmsg.payload = Nombre +  \" \" + flow.get('Maquina') + \" \" + flow.get('DBname');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 340,
        "wires": [
            [
                "552bfe14a14b6a1d"
            ]
        ]
    },
    {
        "id": "552bfe14a14b6a1d",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 320,
        "wires": []
    },
    {
        "id": "fa360ee6b7244e5d",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1220,
        "wires": [
            [
                "797a970f7f47c043"
            ]
        ]
    },
    {
        "id": "d1903149fec73d68",
        "type": "switch",
        "z": "57387f920ec8def2",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1220,
        "wires": [
            [
                "32820cb40a3aaf83"
            ],
            [
                "fa360ee6b7244e5d"
            ]
        ]
    },
    {
        "id": "797a970f7f47c043",
        "type": "switch",
        "z": "57387f920ec8def2",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1220,
        "wires": [
            [
                "dcc41063b24d490d"
            ],
            [
                "df8a36602f0afe05"
            ]
        ]
    },
    {
        "id": "eb1ba948ec9a6f43",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LOOP DEVOLUCION O ERROR",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1160,
        "wires": [
            [
                "10486a4c33632413"
            ]
        ]
    },
    {
        "id": "10486a4c33632413",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<12){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "d1903149fec73d68"
            ]
        ]
    },
    {
        "id": "df8a36602f0afe05",
        "type": "delay",
        "z": "57387f920ec8def2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2600,
        "y": 1260,
        "wires": [
            [
                "10486a4c33632413"
            ]
        ]
    },
    {
        "id": "32820cb40a3aaf83",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".Errorlog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1160,
        "wires": [
            [
                "9bd8ef0fd7bbdaea"
            ]
        ]
    },
    {
        "id": "315e1ffc271ef52a",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Definir_MaxSensor",
        "func": "/*Este nodo declara la variable de flow MaxSensores para conocer\ncuantos sensores hay definidos en la máquina\n*/\nvar valor = Object.values(msg.payload);\nflow.set('MaxSensor',valor['0']);\nmsg.payload = flow.get('MaxSensor');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 460,
        "wires": [
            [
                "c91b50449b1420d7",
                "8f7cde60061b3931"
            ]
        ]
    },
    {
        "id": "c91b50449b1420d7",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "Numero de sensores1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 460,
        "wires": []
    },
    {
        "id": "e01e404ecc100192",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Buscar Numero de sensores",
        "func": "/*Este nodo consulta la tabla Sensores para saber cuántas\nentradas existen en la tabla, siendo cada una de ellas\nun sensor\n*/\n\nmsg.topic = \"SELECT COUNT(*) FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 440,
        "wires": [
            [
                "a94816a996ec5d09"
            ]
        ]
    },
    {
        "id": "755edda2c69cfb4c",
        "type": "split",
        "z": "57387f920ec8def2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2070,
        "y": 460,
        "wires": [
            [
                "315e1ffc271ef52a"
            ]
        ]
    },
    {
        "id": "65eb2fa6c1b41b03",
        "type": "trigger",
        "z": "57387f920ec8def2",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1420,
        "y": 340,
        "wires": [
            [
                "d7b8a7f2e2b05c4c",
                "e01e404ecc100192"
            ]
        ]
    },
    {
        "id": "50991f28e2a8039d",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "FechaHora",
        "func": "/*Declara la valiable FechaHora que contiene la fecha y hora \nque será utilizada en el flow\n*/\nvar now = new Date(); \nvar año = now.getFullYear();\nvar mes = now.getMonth()+1; \nvar dia = now.getDate();\nvar hora = now.getHours();\nvar minuto = now.getMinutes();\nvar segundo = now.getSeconds(); \n\n\nif(mes.toString().length == 1) {\n    mes = '0'+mes;\n}\n\nif(dia.toString().length == 1) {\n    dia = '0'+dia;\n} \n\nif(hora.toString().length == 1) {\n    hora = '0'+hora;\n}\n\nif(minuto.toString().length == 1) {\n    minuto = '0'+minuto;\n    \n}\n\nif(segundo.toString().length == 1) {\n    segundo = '0'+segundo;\n} \n\n\nvar FechaHoralocal = año+'-'+mes+'-'+dia+' '+hora+':'+minuto+':'+segundo;\nflow.set('FechaHora',FechaHoralocal);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "a8dbb66ca33ebd2a",
        "type": "rbe",
        "z": "57387f920ec8def2",
        "name": "Block unless value changes",
        "func": "deadband",
        "gap": "0",
        "start": "1",
        "inout": "out",
        "septopics": true,
        "property": "payload['ORDEN_LECTURA_general']",
        "topi": "topic",
        "x": 2460,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "b0c5a46a751407c9",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "EscrituraErrorCiclo",
        "func": "/*Este nodo se encarga de notificar que ha habido un error\ndurante el proceso de escritura, resultando en que el PLC\nno recibió la orden de setear la variable OrdenLectura a 0 y\ntuvo que avanzar de manera automática tras esperar la orden\ndurante 60 segundos sin resultado\n*/\nflow.set('ERROR_CICLO', msg.payload['ERROR_CICLO']);\n\nif (flow.get('ERROR_CICLO') == 1) {\n    msg.topic = \"INSERT INTO \" + flow.get('DBname') + \".General (error_ciclo) VALUES ('\";\n    msg.topic += flow.get('ERROR_CICLO') + \"');\";\n\n    msg.topic = msg.topic;\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1280,
        "wires": [
            [
                "787cd641a05fa06f"
            ]
        ]
    },
    {
        "id": "6920bf123b93f443",
        "type": "function",
        "z": "57387f920ec8def2",
        "d": true,
        "name": "Cantidad de producciones?",
        "func": "flow.set('CantidadProducciones',msg.payload['CantidadProducciones']);\nmsg.payload = flow.get('CantidadProducciones');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "4b64f345134e9580",
                "ac599a30acec61b5"
            ]
        ]
    },
    {
        "id": "4b64f345134e9580",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "CONSULTA3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 560,
        "wires": []
    },
    {
        "id": "da5e18e5caccd114",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Buscar info los sensores",
        "func": "/*Este nodo realiza un Query para obtener la informacion\ndel nombre de cada sensor para declararlos como variables de\nflow y que puedan ser utilizados en el apartado de *Escritura en Sensores*\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Sensores\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "5a458967470ad72b"
            ]
        ]
    },
    {
        "id": "0fa101f199e6d605",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Declaracion de sensores",
        "func": "// Este nodo guarda el nombre de cada sensor en una variable de flujo para ser utilizada en este flujo\n\n// Obtener el valor actual de 'i' de la variable de flujo (si 'i' no está definida, se asumirá inicialmente como 0)\nvar i = flow.get('i') || 0;\n\n// Obtener el array de sensores del mensaje de entrada\nvar array = Object.values(msg.payload);\n\n// Iterar a través de cada sensor hasta el número máximo de sensores definido en 'MaxSensor'\nfor (; i < flow.get('MaxSensor') && i < array.length; i++) {\n    // Guardar el objeto sensor actual en una variable de flujo con un nombre único\n    flow.set('Sensor' + (i + 1), array[i].Sensor);\n}\n\n// Guardar el valor actual de 'i' en la variable de flujo\nflow.set('i', i);\n\n// Devolver el mensaje de entrada sin cambios\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 520,
        "wires": [
            [
                "08cee21b8b26d63a",
                "e685d9a6d6d64c31"
            ]
        ]
    },
    {
        "id": "08cee21b8b26d63a",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "CONSULTA2(ARRAY) SENSORES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 520,
        "wires": []
    },
    {
        "id": "fbdfd4b31a497e17",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "------------------------------------------------------------------------*DATOS DE MAQUINA*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de cada máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 830,
        "y": 440,
        "wires": []
    },
    {
        "id": "911651fb4dde25d6",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "Consultas de informacion necesaria para el programa",
        "info": "",
        "x": 1740,
        "y": 380,
        "wires": []
    },
    {
        "id": "57a46fbe0daf3a40",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "INSTRUCCIONES ------ POR FAVOR LEER PARA CORRECTA CONFIGURACIÓN DEL FLOW",
        "info": "INFORMACION PARA CONFIGURAR EL FLOW DE MAQUINA:\n\nCuando se quiera configurar este flow por primera vez el usuario debe editar 3 nodos:\n\n-`Definir_Maquina`: Se debe asignar a la variable Nombre el nombre que tenga nuestra máquina. (var Nombre = 'Nombre de la máquina')\n\n-`Definir_SQL`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo Connection. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro servidor de base de datos los campos Server, Port, Username y Password.\n\n-`Definir_PLC`: Abrimos la ventana de propiedades del nodo. Una vez dentro, haremos clic en el botón de editar junto al campo PLC. Seguidamente debemos cumplimentar correctamente con la información correspondiente a nuestro PLC los campos Adress y Port bajo la pestaña Connection. Además, en la pestaña Variables debemos declarar la dirección y nombre de cada una de nuestras variables.\n\n`IMPORTANTE`: Recordar que el nombre que demos a las variables de sensores deben ser iguales que los otorgados a estos mismos sensores en las variables de sensor del flow `Añadir máquinas y sensores`",
        "x": 850,
        "y": 380,
        "wires": []
    },
    {
        "id": "c59c36ca747eb793",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "DEFINIR",
        "info": "",
        "x": 1960,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "38b40f2d8985cc10",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "DEFINIR",
        "info": "",
        "x": 1620,
        "y": 300,
        "wires": [],
        "icon": "font-awesome/fa-warning"
    },
    {
        "id": "b372cf8a4911a7bf",
        "type": "delay",
        "z": "57387f920ec8def2",
        "name": "",
        "pauseType": "delay",
        "timeout": "700",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "b0c5a46a751407c9"
            ]
        ]
    },
    {
        "id": "97a8848e3275b5dc",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Update Fin",
        "func": "msg.topic = \"UPDATE \" + flow.get('DBname') + \".General \";\nmsg.topic += \"SET Fin = '\" + flow.get('FechaHora') + \"';\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 920,
        "wires": [
            [
                "26036cb184281e17"
            ]
        ]
    },
    {
        "id": "6c29a7c56f48395c",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "REVISAR DELAY",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 900,
        "wires": []
    },
    {
        "id": "750a59b632ed4cf5",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "c3e649135bafebd8",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "3fe546116b2e53ee",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "67b2a06496219049",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "ff3fd9c9f7d3879e",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "COMPROBACION ULTIMA FILA",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".General ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "11bb3c0ee3b16d20",
                "fc5dc2cb9ddcc24d"
            ]
        ]
    },
    {
        "id": "6df437b0f3ecd350",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "COMPARACION DE ARRAYS",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocal = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducido',arrayIntroducidolocal);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1100,
        "wires": [
            [
                "eb1ba948ec9a6f43"
            ]
        ]
    },
    {
        "id": "fc5dc2cb9ddcc24d",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1100,
        "wires": []
    },
    {
        "id": "a5816666cefa7fc6",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "",
        "func": "\nvar signals = flow.get(\"Signals\");\n\nfor(var j =0;j <flow.get(\"NumSignals\");j++){\n    \n    flow.set(String(signals[j]),msg.payload[String(signals[j])]);\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 640,
        "wires": [
            [
                "660b44905d6ae6f6"
            ]
        ]
    },
    {
        "id": "660b44905d6ae6f6",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 640,
        "wires": []
    },
    {
        "id": "20438594906098a2",
        "type": "split",
        "z": "57387f920ec8def2",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1940,
        "y": 760,
        "wires": [
            [
                "d63401761a365766"
            ]
        ]
    },
    {
        "id": "d63401761a365766",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Declaracion Señales PLC",
        "func": "var Signals = msg.signals;\n\nvar SignalsLocal = flow.get(\"PredefinedSignalsArray\");\n\nSignalsLocal[flow.get('j')]=Signals;\n\nflow.set('j',flow.get('j')+1);\n\nif(flow.get(\"j\")==flow.get(\"NumSignals\")){\n    flow.set(\"Signals\",SignalsLocal);\n}\n\nmsg.payload = msg.Signals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 760,
        "wires": [
            [
                "83f8ef4a67f1dc8e"
            ]
        ]
    },
    {
        "id": "916695c010049a16",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "set variables auxiliares",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"Objeto\",msg.payload);\nflow.set(\"NumSignals\",Object.keys(flow.get(\"Objeto\")).length);\nflow.set(`j`,0);\nflow.set(\"PredefinedSignalsArray\",new Array(flow.get(\"NumSignals\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 760,
        "wires": [
            [
                "20438594906098a2"
            ]
        ]
    },
    {
        "id": "83f8ef4a67f1dc8e",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j\") == flow.get(\"NumSignals\")) {\n    msg.payload = flow.get(\"Objeto\");\n\n    var signals = flow.get(\"Signals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignals\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "069920eeb3b6652c",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "CONSULTA4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8f7cde60061b3931",
        "type": "link out",
        "z": "57387f920ec8def2",
        "name": "Numero de Sensores",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 460,
        "wires": []
    },
    {
        "id": "e685d9a6d6d64c31",
        "type": "link out",
        "z": "57387f920ec8def2",
        "name": "Info de los Sensores OBJECT",
        "mode": "link",
        "links": [],
        "x": 2615,
        "y": 520,
        "wires": []
    },
    {
        "id": "ac599a30acec61b5",
        "type": "link out",
        "z": "57387f920ec8def2",
        "name": "Cantidad de Producciones Number",
        "mode": "link",
        "links": [],
        "x": 2595,
        "y": 560,
        "wires": []
    },
    {
        "id": "06f085d5ee516be3",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "REVISAR",
        "info": "UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1; : msg.topic : string[93]\n\"UPDATE INT_Autoclave.General SET Fin = '2024/04/08 10:04:38' ORDER BY FechaHora DESC LIMIT 1;\"",
        "x": 1500,
        "y": 920,
        "wires": []
    },
    {
        "id": "183e171c2a54fe22",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "INSERT EN GENERAL",
        "func": "var signals = flow.get(\"Signals\");\nvar objeto = flow.get(\"Objeto\");\nvar dbName = flow.get(\"DBname\");\nvar fechaHora = flow.get(\"FechaHora\");\n\n// Construir la consulta SQL de inserción\nvar topic = \"INSERT INTO `\" + dbName + \"`.`General` VALUES (\";\n\n// Agregar la fecha y hora\ntopic += \"'\" + fechaHora + \"', \";\n\n// Agregar la primera señal\nvar firstSignal = signals[0];\nvar firstValor = objeto[firstSignal];\nif (typeof firstValor === 'string') {\n    topic += \"'\" + firstValor + \"'\";\n} else {\n    topic += firstValor;\n}\n\n// Agregar coma\ntopic += \", \";\n\n// Iterar a través del resto de las señales y construir los valores de la inserción\nfor (var k = 1; k < signals.length; k++) {\n    var signal = signals[k];\n\n    // Obtener el valor correspondiente del objeto\n    var valor = objeto[signal];\n\n    // Agregar el valor a la consulta SQL\n    if (typeof valor === 'string') {\n        // Si es una cadena, agregar comillas simples alrededor del valor\n        topic += \"'\" + valor + \"'\";\n    } else {\n        // De lo contrario, agregar el valor directamente\n        topic += valor;\n    }\n\n    // Agregar coma si no es el último valor\n    if (k < signals.length - 1) {\n        topic += \", \";\n    }\n}\n\n// Cerrar paréntesis de la consulta SQL de inserción\ntopic += \")\";\n\n// return the SQL query\nreturn {\n    topic: topic\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 980,
        "wires": [
            [
                "6c29a7c56f48395c",
                "10ef82462ce47f32"
            ]
        ]
    },
    {
        "id": "a94816a996ec5d09",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 460,
        "wires": [
            [
                "755edda2c69cfb4c",
                "da5e18e5caccd114"
            ]
        ]
    },
    {
        "id": "5a458967470ad72b",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1920,
        "y": 520,
        "wires": [
            [
                "0fa101f199e6d605"
            ]
        ]
    },
    {
        "id": "26036cb184281e17",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 920,
        "wires": [
            [
                "183e171c2a54fe22"
            ]
        ]
    },
    {
        "id": "11bb3c0ee3b16d20",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1960,
        "y": 1040,
        "wires": [
            [
                "6df437b0f3ecd350"
            ]
        ]
    },
    {
        "id": "9bd8ef0fd7bbdaea",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1160,
        "wires": [
            [
                "677f05a9adf8349b"
            ]
        ]
    },
    {
        "id": "787cd641a05fa06f",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1280,
        "wires": [
            [
                "069920eeb3b6652c"
            ]
        ]
    },
    {
        "id": "cd95bead62661f67",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "OVERRIDE DE O.L POR SENSOR",
        "info": "{\"ON/OFF\":1,\"CORTE_DESBOBINADOR\":0,\"CORTE_BOBINADOR\":0,\"Velocidad\":1}",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "4ef3dd89f1dbf401",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "info": "INSERT INTO INT_B2.ErrorLog (FechaHora, Error) VALUES ('undefined','undefined') : msg.payload : number",
        "x": 2490,
        "y": 1060,
        "wires": []
    },
    {
        "id": "dcc41063b24d490d",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "ORDEN_LECTURA_G(OK)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=2;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1220,
        "wires": [
            [
                "7bcd1e05578cb9e4",
                "35dea22ccf79e739",
                "b8c6905f99725cb7",
                "b45857a330cb8431"
            ]
        ]
    },
    {
        "id": "21f0310af293c8d5",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "REVISAR",
        "info": "",
        "x": 2360,
        "y": 380,
        "wires": []
    },
    {
        "id": "5eecf7349975bc5a",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "------------------------------------------------------------------------*CONFIRMACIONES AL SIEMENS PLC*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de controlar el STOP y el RESET del PLC",
        "x": 3440,
        "y": 1060,
        "wires": []
    },
    {
        "id": "542d44d8fdc2fb9d",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "b4340993737f0dc6",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Check_escritura",
        "func": "/*Este nodo compara la fila introducida y extraída.\nSi son iguales, sale por 1 a dar la orden al PLC de que\nsetee OrdenLectura a 0, y si no lo son sale por \n2 para volver al bucle de comprobación durante 3 ciclos\n*/\n\nvar arr1 = flow.get(\"arrayExtraido\" + flow.get('Maquina'));\nvar arr2 = flow.get(\"arrayIntroducido\" + flow.get('Maquina'));\nif (JSON.stringify(arr1) === JSON.stringify(arr2)) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n    flow.set('i', flow.get('i') + 1)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1720,
        "wires": [
            [
                "62631250a819e287"
            ]
        ]
    },
    {
        "id": "11dc1fe34adbc59a",
        "type": "switch",
        "z": "57387f920ec8def2",
        "name": "Error escritura || Escritura correcta",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 1720,
        "wires": [
            [
                "c624580cf7015438"
            ],
            [
                "b4340993737f0dc6"
            ]
        ]
    },
    {
        "id": "62631250a819e287",
        "type": "switch",
        "z": "57387f920ec8def2",
        "name": "Escribir || Comprobar",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2390,
        "y": 1720,
        "wires": [
            [],
            [
                "408a593021f67e63"
            ]
        ]
    },
    {
        "id": "50d075c6ee7abb24",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "i for loop",
        "func": "//Inicializacion de bucle\n\nflow.set('i',1);\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1660,
        "wires": [
            [
                "24f2b68824698a1c"
            ]
        ]
    },
    {
        "id": "24f2b68824698a1c",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Loop",
        "func": "/*Este nodo se ocupa de que si durante 3 ciclos, diferidos\n1 segundo cada uno, la comprobación de escritura resultó \nser negativa, se escriba la información relativa al error\nde escritura en la tabla ErrorLog de la BD TrazabilidadGeneral\n*/\n\nif(flow.get('i')<4){\n    msg.payload=1;\n} else {\n    msg.payload=0;\n    msg.error=\"Error de escritura/lectura\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1720,
        "wires": [
            [
                "11dc1fe34adbc59a"
            ]
        ]
    },
    {
        "id": "408a593021f67e63",
        "type": "delay",
        "z": "57387f920ec8def2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2590,
        "y": 1720,
        "wires": [
            [
                "24f2b68824698a1c"
            ]
        ]
    },
    {
        "id": "c624580cf7015438",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Escritura_ErrorLog",
        "func": "// Escribe la información del error de escritura en ErrorLog\nmsg.topic = \"INSERT INTO \" + flow.get('DBname') + \".ErrorLog (FechaHora, Error) VALUES ('\";\nmsg.topic += flow.get('FechaHora') + \"','\"; // Eliminamos la parte de Maquina\nmsg.topic += msg.error + \"')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1660,
        "wires": [
            [
                "7be468505a631131"
            ]
        ]
    },
    {
        "id": "a35d623985370776",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "e2eaa13767f69836",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "3d92a07da97a1acf",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "1cf9fc3dd73e1e3c",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\ntopic = \"SELECT TOP 1 * FROM [\"+flow.get('DBname')+\"].[dbo].[General] ORDER BY FechaHora DESC\";\n\nmsg.topic = topic;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "9dbadfde38b53509",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "LastRowGeneral",
        "func": "/*Este nodo extrae la última fila de la tabla general\npara comprobar posteriormente que coincide con la que tratamos\nde introducir en el paso anterior\n*/\n\nmsg.topic = \"SELECT * FROM \" + flow.get('DBname') + \".Control ORDER BY FechaHora DESC LIMIT 1\";\n\nmsg.topic = msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1540,
        "wires": [
            [
                "721b8eed99ada4dc"
            ]
        ]
    },
    {
        "id": "2d2bae0e189d036b",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "ArraysParaComparar",
        "func": "//Este nodo prepara las fila introducida y extraida para \n//realizar la comparación posteriormente\n\n//arrayExtraido de SQL Query en la ultima fila\n\nflow.set('arrayExtraido',msg.payload);\n\n\n\n\n//arrayIntroducido de variables globales escritas por PLC\nvar arrayIntroducidolocalcontrol = [{ CORTE_DESBOBINADOR: flow.get('CORTE_DESBOBINADOR'), CORTE_REBOBINADOR: flow.get('CORTE_REBOBINADOR'), ESTADO: flow.get('ESTADO'), VELOCIDAD: flow.get('VELOCIDAD'), FechaHora: flow.get('FechaHora') }];\nflow.set('arrayIntroducidocontrol',arrayIntroducidolocalcontrol);\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1600,
        "wires": [
            [
                "50d075c6ee7abb24"
            ]
        ]
    },
    {
        "id": "721b8eed99ada4dc",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1900,
        "y": 1540,
        "wires": [
            [
                "2d2bae0e189d036b"
            ]
        ]
    },
    {
        "id": "7be468505a631131",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2370,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "41ab42d060f408aa",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1910,
        "y": 1640,
        "wires": [
            [
                "11dc1fe34adbc59a"
            ]
        ]
    },
    {
        "id": "da1daa5a78ee5ec1",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "------------------------------------------------------------------------*ESCRITURA EN CONTROL*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `tabla General` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla General` de la máquina.\n    3.- Después de escribir, leer la ultima fila de la tabla General y compararla con lo que hemos introducido previamente, para `comprobar que en efecto lo que queriamos introducir quedó grabado en la BD.`\n    4.-Una vez comprobada la escritura ordena al PLC que setee a 0 la orden de escritura para que se deje de escribir hasta el próximo cambio de estado. En caso de que la escritura no fuese exitosa, escribe en la BD de TrazabilidadGeneral, en la tabla ErrorLog, la información del error.",
        "x": 2040,
        "y": 1340,
        "wires": []
    },
    {
        "id": "8097ddfbe4f8c06d",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "ESCRITURA EN LA TABLA DE CONTROL",
        "func": "// Obtener el payload del mensaje\nlet data = msg.payload;\n\n// Verificar si el payload es un string y convertirlo a objeto JSON\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\n// Inicializar un array para almacenar las consultas SQL\nlet sqlQueries = [];\n\n// Iterar sobre cada clave en el objeto de datos\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        // Construir la consulta SQL con una tabla estática y claves como columnas\n        let query = `INSERT INTO INT_maquina1.control (${key}) VALUES (\"${value}\")`;\n        sqlQueries.push(query);\n    }\n}\n\n// Devolver las consultas generadas en el payload del mensaje\nmsg.topic = sqlQueries.join(';');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1480,
        "wires": [
            [
                "edef2aafcfae947e"
            ]
        ]
    },
    {
        "id": "f43da6d763d1725a",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2100,
        "y": 1500,
        "wires": [
            [
                "9dbadfde38b53509"
            ]
        ]
    },
    {
        "id": "cdcf74ce89e23b61",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "-----------------ORDEN-----------------",
        "func": "// Función para reordenar las variables dentro del paquete\nfunction reordenarPaquete(paquete) {\n    // Define el orden deseado de las variables\n    const ordenDeseado = [\"1LOTE\", \"2RECETA\", \"3PROCESO\", \"4FASE\", \"5OPERARIO\", \"zAVANCE_MANUAL\", \"zABORTAR\", flow.get(\"Adicional1\"), flow.get(\"Adicional2\"), flow.get(\"Adicional3\"), flow.get(\"Adicional4\"), flow.get(\"Adicional5\"), flow.get(\"Adicional5\"), flow.get(\"Adicional6\"), flow.get(\"Adicional7\"), flow.get(\"Adicional8\"), flow.get(\"Adicional9\"), flow.get(\"Adicional10\"), flow.get(\"Adicional11\"), flow.get(\"Adicional12\"), flow.get(\"Adicional13\"), flow.get(\"Adicional14\"), flow.get(\"Adicional15\"), \"zerror_ciclo\", flow.get(\"AdicionalT1\"), flow.get(\"AdicionalT2\"), flow.get(\"AdicionalT3\"), flow.get(\"AdicionalT4\"), flow.get(\"AdicionalT5\"), flow.get(\"AdicionalT6\"), flow.get(\"AdicionalT7\"), flow.get(\"AdicionalT8\"), flow.get(\"AdicionalT9\"), flow.get(\"AdicionalT10\"), flow.get(\"AdicionalT11\"), flow.get(\"AdicionalT12\"), flow.get(\"AdicionalT13\"), flow.get(\"AdicionalT14\"), flow.get(\"AdicionalT15\") ];\n\n    // Crea un nuevo objeto para almacenar las variables reordenadas,\n    let paqueteOrdenado = {};\n\n    // Itera sobre el orden deseado\n    ordenDeseado.forEach(variable => {\n        // Verifica si la variable está presente en el paquete recibido\n        if (paquete.hasOwnProperty(variable)) {\n            // Agrega la variable al paquete ordenado\n            paqueteOrdenado[variable] = paquete[variable];\n        }\n    });\n\n    // Devuelve el paquete ordenado\n    return paqueteOrdenado;\n}\n\n// Llama a la función de reordenamiento con el paquete recibido como argumento\nmsg.payload= reordenarPaquete(msg.payload);\n\n// Devuelve el mensaje con el paquete ordenado\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1080,
        "wires": [
            [
                "916695c010049a16",
                "65eb2fa6c1b41b03",
                "da5e18e5caccd114",
                "6920bf123b93f443",
                "50991f28e2a8039d",
                "b372cf8a4911a7bf",
                "a5816666cefa7fc6",
                "26870eb4773aada0",
                "32427ec908d84f0f"
            ]
        ]
    },
    {
        "id": "c92addd027a78d1f",
        "type": "json",
        "z": "57387f920ec8def2",
        "name": "Envio del señales de control a la BDD",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1250,
        "y": 1480,
        "wires": [
            [
                "8097ddfbe4f8c06d"
            ]
        ]
    },
    {
        "id": "edef2aafcfae947e",
        "type": "split",
        "z": "57387f920ec8def2",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2050,
        "y": 1440,
        "wires": [
            [
                "bf06fdda8c6fee7a"
            ]
        ]
    },
    {
        "id": "d66974feac87c3ed",
        "type": "json",
        "z": "57387f920ec8def2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2230,
        "y": 1440,
        "wires": [
            [
                "f43da6d763d1725a",
                "bc669f39bdd8b2d2"
            ]
        ]
    },
    {
        "id": "bc669f39bdd8b2d2",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "REV",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 1440,
        "wires": []
    },
    {
        "id": "677f05a9adf8349b",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "ORDEN_LECTURA_G(KO)",
        "func": "var latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\")\n\nif(flow.get('ORDEN_LECTURA_G')==1){\n        msg.payload=3;\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1160,
        "wires": [
            [
                "7bcd1e05578cb9e4"
            ]
        ]
    },
    {
        "id": "10ef82462ce47f32",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 1940,
        "y": 980,
        "wires": [
            [
                "ff3fd9c9f7d3879e",
                "025aae990f81439e"
            ]
        ]
    },
    {
        "id": "fec712bf6c80015f",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2220,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "35ddcd91fdf61f3c",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "------------------------------------------------------------------ENTRADAS SIEMENS PLC------------------------------------------------------------------",
        "info": "\nEMAIL: \"~+TIEMPO,102.00;LITROS,204.00;HORAS:,1580.00\"",
        "x": 420,
        "y": 900,
        "wires": []
    },
    {
        "id": "56055bd6c5034e78",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "Inserciones de sensores con O.L Independiente",
        "info": "",
        "x": 1840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "5210132120251cca",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "Inserciones de sensores con O.L General de Sensores",
        "info": "",
        "x": 2500,
        "y": 1800,
        "wires": []
    },
    {
        "id": "e70ce9547e7be82a",
        "type": "switch",
        "z": "57387f920ec8def2",
        "name": "",
        "property": "ORDEN_LECTURA_tipo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 2060,
        "wires": [
            [
                "7d6b8408a968a751"
            ]
        ]
    },
    {
        "id": "7d6b8408a968a751",
        "type": "json",
        "z": "57387f920ec8def2",
        "name": "ORDEN_LECTURA_tipo = \"2\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2470,
        "y": 2060,
        "wires": [
            [
                "c5cf93b7547d3459",
                "666de3738727c34b"
            ]
        ]
    },
    {
        "id": "c5cf93b7547d3459",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO int_maquina1.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1980,
        "wires": [
            [
                "4b2223791866b983"
            ]
        ]
    },
    {
        "id": "4b2223791866b983",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1920,
        "wires": [
            [
                "a709d562a8c5762b"
            ]
        ]
    },
    {
        "id": "a709d562a8c5762b",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "CHECK O.L.",
        "func": "\nif (flow.get(\"ORDEN_LECTURA_sensores\") !== 1) {\n    node.warn('La orden de Lectura General de Sensores está apagada');\n} else {\n    \n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1860,
        "wires": [
            [
                "24bb40f6cfafa778"
            ]
        ]
    },
    {
        "id": "24bb40f6cfafa778",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2680,
        "y": 1860,
        "wires": [
            [
                "666de3738727c34b"
            ]
        ]
    },
    {
        "id": "b2105cbeed3b94c5",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "debug sensores ind",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 2000,
        "wires": []
    },
    {
        "id": "666de3738727c34b",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "debug sensores gnral",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 1960,
        "wires": []
    },
    {
        "id": "9b1def46380af8a1",
        "type": "switch",
        "z": "57387f920ec8def2",
        "name": "",
        "property": "TIPO_LECTURA_Sensores",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1350,
        "y": 1960,
        "wires": [
            [
                "74d022b43aed6831"
            ],
            [
                "e70ce9547e7be82a"
            ],
            [
                "3c9a5cf917d06b3b"
            ]
        ]
    },
    {
        "id": "77da5ad2dd0fe3cd",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "set O.L. EMAIL S1C",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "24df1c2d54235ea2",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "77da5ad2dd0fe3cd"
            ]
        ]
    },
    {
        "id": "0d67271d9be981c8",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "set O.L. EMAIL D1C",
        "func": "\nflow.set(\"D1C\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "5e608d43ba48f48a",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "0d67271d9be981c8"
            ]
        ]
    },
    {
        "id": "291e0926b476768e",
        "type": "template",
        "z": "57387f920ec8def2",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "58e3123755248888"
            ]
        ]
    },
    {
        "id": "58e3123755248888",
        "type": "rbe",
        "z": "57387f920ec8def2",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "77da5ad2dd0fe3cd"
            ]
        ]
    },
    {
        "id": "43c41832677a175a",
        "type": "websocket in",
        "z": "57387f920ec8def2",
        "name": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "291e0926b476768e"
            ]
        ]
    },
    {
        "id": "dedadab129d11d4c",
        "type": "template",
        "z": "57387f920ec8def2",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "1e5cc3f7d1f781f5"
            ]
        ]
    },
    {
        "id": "1e5cc3f7d1f781f5",
        "type": "rbe",
        "z": "57387f920ec8def2",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "0d67271d9be981c8"
            ]
        ]
    },
    {
        "id": "3283da366c504e90",
        "type": "websocket in",
        "z": "57387f920ec8def2",
        "name": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "dedadab129d11d4c"
            ]
        ]
    },
    {
        "id": "35dea22ccf79e739",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "¿O.L EMAIL?",
        "func": "if (flow.get(\"CONTROL_EMAIL\") === 1) {\n   \n    // Continuar el flujo si el valor es 1\n    msg.payload =1 \n return msg;\n \n} else {\n    // Bloquear ejecución enviando un mensaje de error\n    node.error(\"EMAIL EN PROCESO\", msg);\n    return null; // Detener el flujo\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3660,
        "y": 520,
        "wires": [
            [
                "171a7ba363ba6acd"
            ]
        ]
    },
    {
        "id": "9c941f352f4c0138",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "0d67271d9be981c8"
            ]
        ]
    },
    {
        "id": "d6633c083b076e17",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "77da5ad2dd0fe3cd"
            ]
        ]
    },
    {
        "id": "3c9a5cf917d06b3b",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "BLOCK \"0\"",
        "func": "msg.payload=node.warn(\"Lectura de Sensores Apagada\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "c5988ee1abba824e",
        "type": "split",
        "z": "57387f920ec8def2",
        "name": "split msg.signals",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "signals",
        "x": 1660,
        "y": 1380,
        "wires": [
            [
                "76b0e2297fe84319"
            ]
        ]
    },
    {
        "id": "76b0e2297fe84319",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Declaracion Señales DE CONTROL",
        "func": "var CSignals = msg.signals;\n\nvar CSignalsLocal = flow.get(\"ControlSignalsArray\");\n\nCSignalsLocal[flow.get('j1')]=CSignals;\n\nflow.set('j1',flow.get('j1')+1);\n\nif(flow.get(\"j1\")==flow.get(\"NumSignalsControl\")){\n    flow.set(\"CSignals\",CSignalsLocal);\n}\n\nmsg.payload = msg.CSignals;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1380,
        "wires": [
            [
                "e16f6b079961f237"
            ]
        ]
    },
    {
        "id": "04ca316884552bb2",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "set variables de control",
        "func": "//Inicializacion de bucle. Set recursos para declaracion de variables\nflow.set(\"ObjetoControl\",msg.payload);\nflow.set(\"NumSignalsControl\",Object.keys(flow.get(\"ObjetoControl\")).length);\nflow.set(`j1`,0);\nflow.set(\"ControlSignalsArray\",new Array(flow.get(\"NumSignalsControl\")));\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1380,
        "wires": [
            [
                "c5988ee1abba824e"
            ]
        ]
    },
    {
        "id": "e16f6b079961f237",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Asignacion a variables locales",
        "func": "//Una vez lleno el array con los nonmbres de las señales \n//creamos una variable de flow homónima para cada señal\n\nif (flow.get(\"j1\") == flow.get(\"NumSignalsControl\")) {\n    msg.payload = flow.get(\"ObjetoControl\");\n\n    var signals = flow.get(\"CSignals\");\n\n    // Declaración e inicialización de la variable `j`\n    for (var j = 0; j < flow.get(\"NumSignalsControl\"); j++) {\n        flow.set(String(signals[j]), msg.payload[String(signals[j])]);\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "cc0d99db6e0dd11e",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "set  TIPO O.L. SENSORES (GENERAL) ",
        "func": "\nflow.set(\"ORDEN_LECTURA_Sensores\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "847294fda34fea18",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 80,
        "wires": [
            [
                "cc0d99db6e0dd11e"
            ]
        ]
    },
    {
        "id": "219e63ff84357352",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "set O.L. GENERAL",
        "func": "\nflow.set(\"ORDEN_LECTURA_general\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "55669605afcc9c11",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "219e63ff84357352"
            ]
        ]
    },
    {
        "id": "32f33cd76174c354",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "set  TIPO O.L. SENSORES (INDIVIDUAL)",
        "func": "\nflow.set(\"ORDEN_LECTURA_Sensores\",msg.payload);\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "46577e8294bd4705",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 590,
        "y": 120,
        "wires": [
            [
                "32f33cd76174c354"
            ]
        ]
    },
    {
        "id": "bf06fdda8c6fee7a",
        "type": "split",
        "z": "57387f920ec8def2",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2190,
        "y": 1400,
        "wires": [
            [
                "d66974feac87c3ed"
            ]
        ]
    },
    {
        "id": "fdb03e243b9837dc",
        "type": "s7 in",
        "z": "57387f920ec8def2",
        "endpoint": "9691bd63b7506eac",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 160,
        "y": 1080,
        "wires": [
            [
                "03354f9142e42d4e"
            ]
        ]
    },
    {
        "id": "ce516bec9e6060eb",
        "type": "s7 in",
        "z": "57387f920ec8def2",
        "endpoint": "f3ca9ac4bcf4b2a8",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 230,
        "y": 1380,
        "wires": [
            [
                "04ca316884552bb2"
            ]
        ]
    },
    {
        "id": "025aae990f81439e",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "SELECT LAST ROW",
        "func": "var controlemail= flow.get(\"CONTROL_EMAIL\");\nif (controlemail===1){\nmsg.topic= \"SELECT * FROM INT_\"+flow.get (\"Maquina\")+\".General ORDER BY 'FechaHora' DESC LIMIT 1;\";\nreturn msg;}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 980,
        "wires": [
            [
                "19f4f5bbb3ae1a36"
            ]
        ]
    },
    {
        "id": "19f4f5bbb3ae1a36",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2500,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "500bf82145671b0e",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "DEFINIR ADICIONALES (GENERALES)",
        "props": [
            {
                "p": "Adicional1",
                "v": "MATRICULA",
                "vt": "str"
            },
            {
                "p": "Adicional2",
                "v": "CONDUCTOR",
                "vt": "str"
            },
            {
                "p": "Adicional3",
                "v": "PROVEEDOR",
                "vt": "str"
            },
            {
                "p": "Adicional4",
                "v": "LITROS",
                "vt": "str"
            },
            {
                "p": "Adicional5",
                "v": "DESTINO",
                "vt": "str"
            },
            {
                "p": "Adicional7",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional8",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional9",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional10",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional11",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional12",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional13",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional14",
                "v": "",
                "vt": "str"
            },
            {
                "p": "Adicional15",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 660,
        "y": 640,
        "wires": [
            [
                "b117c3f23d7e37b7"
            ]
        ]
    },
    {
        "id": "b117c3f23d7e37b7",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"Adicional1\", msg.Adicional1);\nflow.set(\"Adicional2\", msg.Adicional2);\nflow.set(\"Adicional3\", msg.Adicional3);\nflow.set(\"Adicional4\", msg.Adicional4);\nflow.set(\"Adicional5\", msg.Adicional5);\nflow.set(\"Adicional6\", msg.Adicional6);\nflow.set(\"Adicional7\", msg.Adicional7);\nflow.set(\"Adicional8\", msg.Adicional8);\nflow.set(\"Adicional9\", msg.Adicional9);\nflow.set(\"Adicional10\", msg.Adicional10);\nflow.set(\"Adicional11\", msg.Adicional11);\nflow.set(\"Adicional12\", msg.Adicional12);\nflow.set(\"Adicional13\", msg.Adicional13);\nflow.set(\"Adicional14\", msg.Adicional14);\nflow.set(\"Adicional15\", msg.Adicional15);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "7bcd1e05578cb9e4",
        "type": "s7 out",
        "z": "57387f920ec8def2",
        "endpoint": "f3ca9ac4bcf4b2a8",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 3820,
        "y": 1200,
        "wires": []
    },
    {
        "id": "0aca8742bdec6683",
        "type": "s7 in",
        "z": "57387f920ec8def2",
        "endpoint": "db0d781e87ac7b25",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 250,
        "y": 1960,
        "wires": [
            [
                "9b1def46380af8a1",
                "2ece3f9f96291f64",
                "aa628141c0a94f76"
            ]
        ]
    },
    {
        "id": "74d022b43aed6831",
        "type": "json",
        "z": "57387f920ec8def2",
        "name": "ORDEN_LECTURA_tipo = \"1\"",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1710,
        "y": 1860,
        "wires": [
            [
                "e9b3d2d1659de37f"
            ]
        ]
    },
    {
        "id": "e9b3d2d1659de37f",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Generate SQL",
        "func": "let data = msg.payload;\nif (typeof data === \"string\") {\n    data = JSON.parse(data);\n}\n\nlet tables = {};\n\n// Procesar cada clave en el payload\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let value = data[key];\n        let parts = key.split('_');\n        if (parts.length === 2) {\n            let column = parts[0];\n            let table = parts[1];\n\n            // Inicializar la entrada de la tabla si no existe\n            if (!tables[table]) {\n                tables[table] = {\n                    columns: [],\n                    values: []\n                };\n            }\n\n            // Agregar columna y valor\n            tables[table].columns.push(column);\n            tables[table].values.push(value);\n        }\n    }\n}\n\n// Construir las consultas SQL para cada tabla\nlet sqlQueries = [];\nfor (let table in tables) {\n    if (tables.hasOwnProperty(table)) {\n        let columns = tables[table].columns.join(',');\n        let values = tables[table].values.map(value => `'${value}'`).join(',');\n        let query = `INSERT INTO INT_RECEPCION.${table} (${columns}) VALUES (${values})`;\n        sqlQueries.push(query);\n    }\n}\n\n// Unir todas las consultas en una sola cadena si es necesario\nmsg.topic = sqlQueries.join('; ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1728.183349609375,
        "y": 1915.88330078125,
        "wires": [
            [
                "59f69127ef1b7b49"
            ]
        ]
    },
    {
        "id": "7d51e7bc2ba097ad",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 1920,
        "wires": [
            [
                "577c1cc4cf313b84"
            ]
        ]
    },
    {
        "id": "4be708ad5ef3279c",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "CHECK O.L.",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n            break; // Salir del bucle si encontramos una consulta permitida\n        } else if (controlValue === 0) {\n            // Si encontramos un control que es 0, simplemente continuar con el siguiente\n            node.warn(`El control para la tabla ${tableName} es 0. La consulta será descartada.`);\n            // Aquí no se hace nada porque el mensaje será descartado si no se encuentra ninguna consulta permitida\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, simplemente descartar el mensaje\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null; // Esto efectivamente descarta el mensaje sin detener el flujo\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 1880,
        "wires": [
            [
                "7d51e7bc2ba097ad"
            ]
        ]
    },
    {
        "id": "59f69127ef1b7b49",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "SPLIT MSG TOPIC 2",
        "func": "// Configuración del delimitador\nconst delimiter = '; ';  // Puedes ajustar el delimitador según sea necesario\n\n// Obtener el msg.topic\nlet topic = msg.topic;\n\n// Verificar si el msg.topic está definido y no es vacío\nif (topic && topic.length > 0) {\n    // Dividir el msg.topic basado en el delimitador\n    let parts = topic.split(delimiter).map(part => part.trim()).filter(part => part.length > 0);\n\n    // Si se obtienen partes, enviar cada una como un nuevo mensaje\n    if (parts.length > 0) {\n        // Crear un nuevo mensaje para cada parte\n        let newMsgs = parts.map(part => {\n            return { ...msg, topic: part };\n        });\n\n        // Devolver la matriz de mensajes\n        return [newMsgs];\n    } else {\n        // Si no hay partes, no enviar nada\n        return null;\n    }\n} else {\n    // Si msg.topic está vacío o no definido, no enviar nada\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1868.183349609375,
        "y": 2015.88330078125,
        "wires": [
            [
                "4be708ad5ef3279c"
            ]
        ]
    },
    {
        "id": "577c1cc4cf313b84",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "CONTROL",
        "func": "// Obtener el payload (consultas SQL generadas)\nlet sqlQueries = msg.topic;\n\n// Dividir las consultas SQL por el delimitador ';' para procesarlas una por una\nlet queries = sqlQueries.split(';').map(query => query.trim()).filter(query => query.length > 0);\n\nlet allowMessage = false;\n\n// Iterar sobre cada consulta\nfor (let query of queries) {\n    // Utilizar una expresión regular para encontrar el nombre de la tabla en la consulta SQL\n    let tableNameMatch = query.match(/INSERT INTO\\s+INT_RECEPCION\\.(\\w+)\\s+/i);\n\n    if (tableNameMatch) {\n        // Obtener el nombre de la tabla (primer grupo de captura)\n        let tableName = tableNameMatch[1];\n\n        // Construir el nombre de la variable del flujo que contiene el estado (tableName + 'C')\n        let flowVariableName = tableName + 'C';\n\n        // Obtener el valor de la variable del flujo\n        let controlValue = flow.get(flowVariableName);\n\n        // Comprobar si la variable del flujo existe y su valor\n        if (controlValue === 1) {\n            // Si al menos una consulta permite el paso, marcar el mensaje como permitido\n            allowMessage = true;\n        } else if (controlValue === 0) {\n            // Detener el flujo si la variable es 0\n            node.warn(`El control para la tabla ${tableName} es 0. Deteniendo el flujo.`);\n            return null;\n        } else {\n            // La variable del flujo no está definida o tiene un valor inesperado\n            node.warn(`La variable de flujo ${flowVariableName} no está definida o tiene un valor inesperado: ${controlValue}`);\n        }\n    } else {\n        // No se encontró el nombre de la tabla en la consulta SQL\n        node.warn('No se pudo extraer el nombre de la tabla de la consulta SQL: ' + query);\n    }\n}\n\n// Si al menos una consulta permitió el paso, dejar pasar el mensaje\nif (allowMessage) {\n    return msg;\n} else {\n    // Si ninguna consulta permitió el paso, detener el flujo\n    node.warn('No se permitió ninguna de las consultas SQL.');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1991.816650390625,
        "y": 1964.11669921875,
        "wires": [
            [
                "fec712bf6c80015f"
            ]
        ]
    },
    {
        "id": "a8722b069b17cdaa",
        "type": "e-mail",
        "z": "57387f920ec8def2",
        "server": "grupointegra-com-es.correoseguro.dinaserver.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Envio Email",
        "x": 5390,
        "y": 200,
        "wires": []
    },
    {
        "id": "171a7ba363ba6acd",
        "type": "json",
        "z": "57387f920ec8def2",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 4250,
        "y": 200,
        "wires": [
            [
                "e828945372c4929a"
            ]
        ]
    },
    {
        "id": "33099b8987be7d8c",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 4620,
        "y": 200,
        "wires": [
            [
                "1353a58a1063e516"
            ]
        ]
    },
    {
        "id": "d0e0876e3c820803",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "SELECT",
        "func": "var Lote = flow.get(\"1LOTE\");\nvar Maquina = flow.get(\"DBname\");\n\n// Asegurarse de que Lote se concatene como string con comillas simples\nvar query = \"SELECT `4FASE`, `LITROS`, `99AGUAHELADA(Wh)`, `99ELECTRICIDAD(Wh)`, `99AIRECOMPRIMIDO(Wh)`, DATE_FORMAT(FechaHora, '%Y-%d-%m %H:%i:%s') AS Fechahora FROM \" + Maquina + \".General WHERE 1LOTE = '\" + Lote + \"';\";\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4440,
        "y": 200,
        "wires": [
            [
                "33099b8987be7d8c"
            ]
        ]
    },
    {
        "id": "64383bf736f372ec",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Template Correo E ",
        "func": "// Recupera el contenido del payload\nlet content = flow.get(\"CONTENIDO_EMAIL\");\nlet RECETA = flow.get(\"RECETA\") || \"No disponible\";\nvar LOTE = flow.get(\"1LOTE\") || \"No disponible\";\nvar FASE = flow.get(\"4FASE\") || \"No disponible\";\nvar OPERARIO = flow.get(\"5OPERARIO\") || \"No disponible\";\nvar PROCESO = flow.get(\"3PROCESO\") || \"No disponible\";\nvar PROVEEDOR = flow.get(\"PROVEEDOR\") || \"No disponible\";\nvar MATRICULA = flow.get(\"MATRICULA\") || \"No disponible\";\nvar CONDUCTOR = flow.get(\"CONDUCTOR\") || \"No disponible\";\nvar DESTINO = flow.get(\"DESTINO\") || \"No disponible\";\nvar Registro = msg.payload;  // El payload ya debe contener el JSON parseado.\n\n// Verifica que el contenido de Registro sea un array y construye una tabla\nlet registroTable = \"\";\n\nif (Array.isArray(Registro)) {\n    registroTable = `\n        <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse: collapse;\">\n            <thead>\n                <tr>\n                    <th>FASE</th>\n                    <th>LITROS</th>\n                    <th>ELECTRICIDAD(Wh)</th>\n                    <th>AIRECOMPRIMIDO(Wh)</th>\n                    <th>AGUAHELADA(Wh)</th>\n                    <th>Fecha y Hora</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${Registro.map(reg => `\n                    <tr>\n                        <td>${reg['4FASE'] || \"No disponible\"}</td>\n                        <td>${reg.LITROS}</td>\n                        <td>${reg[\"99ELECTRICIDAD(Wh)\"]}</td>\n                        <td>${reg[\"99AIRECOMPRIMIDO(Wh)\"]}</td>\n                        <td>${reg[\"99AGUAHELADA(Wh)\"]}</td>\n                        <td>${reg.Fechahora}</td>\n                    </tr>`).join('')}\n            </tbody>\n        </table>\n    `;\n} else {\n    registroTable = `<p>No se encontraron registros válidos.</p>`;\n}\n\n// Crea la lista HTML a partir de las partes de content\nlet items = content.split(';').map(item => `<li>${item.trim()}</li>`).join('\\n');\n\n// Arma el contenido HTML completo con la tabla\nmsg.payload = `\n    <html>\n        <body>\n            <h1>Alerta de Trazabilidad:</h1>\n            <p>En este documento puede encontrar los datos de la línea: ${flow.get(\"Maquina\")}</p>\n            <ul>\n                <li>Lote: ${LOTE}</li>\n                <li>Proceso: ${PROCESO}</li>\n                <li>Proveedor: ${PROVEEDOR}</li>\n                <li>Matricula: ${MATRICULA}</li>\n                <li>Conductor: ${CONDUCTOR}</li>\n                <li>Operario: ${OPERARIO}</li>\n                <li>Destino: ${DESTINO}</li>\n            </ul>\n            <h2>Registros:</h2>\n            ${registroTable}\n            <img src=\"cid:miImagen\" alt=\"Imagen Incrustada\" />\n        </body>\n    </html>\n`;\n\n// Especifica que se trata de contenido HTML\nmsg.html = msg.payload;\n\n// Configura el mensaje\nmsg.to = \"jgonzalez@serrycamp.com\";\nmsg.topic = \"Datos de la línea Recepción. Lote:\" +flow.get(\"1LOTE\");\nmsg.attachments = [\n    {\n        filename: \"Logo.jpg\", // Cambia esto por el nombre de tu imagen\n        path: \"/home/intboxes/Documents/Logo.jpg\", // Cambia esto por la ruta a tu imagen\n        cid: \"miImagen\"  // cid debe coincidir con el del HTML\n    }\n];\n\n// Envía el mensaje\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5070,
        "y": 200,
        "wires": [
            [
                "a8722b069b17cdaa",
                "c3afde1ec5e29d92"
            ]
        ]
    },
    {
        "id": "1353a58a1063e516",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Conversion a JSON String",
        "func": "// Verifica si el payload es un string y lo convierte a JSON\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (error) {\n        node.error(\"El payload no es un JSON válido: \" + error);\n        return;\n    }\n}\n\n// Retorna el mensaje con el payload convertido\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4840,
        "y": 200,
        "wires": [
            [
                "64383bf736f372ec"
            ]
        ]
    },
    {
        "id": "c4fdcbab70a6a852",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "81134549a749ab45"
            ]
        ]
    },
    {
        "id": "81134549a749ab45",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "ENVIO DE EMAIL",
        "func": "\nflow.set(\"CONTROL_EMAIL\",msg.payload);\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c982ac9424025851",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "----------------------------------------NOTIFICACIONES----------------------------------------",
        "info": "",
        "x": 4720,
        "y": 40,
        "wires": []
    },
    {
        "id": "d41799d2e18b99ce",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "NOTIFICACIONES DE TRAZABILIDAD POR EMAIL.",
        "info": "",
        "x": 4680,
        "y": 120,
        "wires": []
    },
    {
        "id": "dda39b5c4f5cc804",
        "type": "s7 out",
        "z": "57387f920ec8def2",
        "endpoint": "f3ca9ac4bcf4b2a8",
        "variable": "CONTROL_EMAIL",
        "name": "",
        "x": 5410,
        "y": 240,
        "wires": []
    },
    {
        "id": "c3afde1ec5e29d92",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "CONFIRMACION AL PLC",
        "func": "msg.payload = 2;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5090,
        "y": 240,
        "wires": [
            [
                "dda39b5c4f5cc804"
            ]
        ]
    },
    {
        "id": "d70ac51c3ca3ca89",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "ORDEN DE LECTURA GENERAL BLOCK",
        "func": "// Obtener los valores de las variables de flujo\nconst ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nconst latenciaOrdenLectura = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 1\nif (ordenLectura === 1) {\n    // Si ORDEN_LECTURA_general es 1, verificar la latencia\n    if (latenciaOrdenLectura === 1) {\n        // Si la latencia es 1, bloquear la ejecución\n       \n        return null; // Detener el flujo\n    } else {\n        // Si la latencia no es 1 (Es = 0), continuar el flujo\n        flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 1);\n        return msg;\n    }\n} else {\n    // Si ORDEN_LECTURA_general no es 1, bloquear la ejecución\n    \n    return null; // Detener el flujo\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 860,
        "wires": [
            [
                "183e171c2a54fe22"
            ]
        ]
    },
    {
        "id": "26870eb4773aada0",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Check Latencia",
        "func": "// Obtener el valor de ORDEN_LECTURA_general\nvar ordenLectura = flow.get(\"ORDEN_LECTURA_general\");\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_general\");\n\n// Verificar si ORDEN_LECTURA_general es 0 o 2\nif (ordenLectura === 0 || ordenLectura === 2) {\n    // Si es 0 o 2, establecer la latencia en el valor actual de ORDEN_LECTURA_general\n    flow.set(\"LATENCIA_ORDEN_LECTURA_general\", 0);\n    return msg;\n}else{\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 860,
        "wires": [
            [
                "d70ac51c3ca3ca89"
            ]
        ]
    },
    {
        "id": "0a7ad1d4f1cf9e4e",
        "type": "s7 out",
        "z": "57387f920ec8def2",
        "endpoint": "f3ca9ac4bcf4b2a8",
        "variable": "LOTEC",
        "name": "",
        "x": 2320,
        "y": 2940,
        "wires": []
    },
    {
        "id": "482cc9bee3abc63e",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "------------------------------------------------------------------------*GESTION DE TABLA DE LOTES*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2080,
        "y": 2800,
        "wires": []
    },
    {
        "id": "e0e92dc45e64f47f",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "--------------------------------------------------------------------OVERRIDES------------------------------------------------------------------",
        "info": "",
        "x": 820,
        "y": 40,
        "wires": []
    },
    {
        "id": "871f4afb7477ab2a",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "ENVÍO Y CONFIRMACIÓN",
        "info": "",
        "x": 5390,
        "y": 120,
        "wires": []
    },
    {
        "id": "26eaadfec8be6c2c",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "ACTIVACIÓN DE ENVÍO DE NOTIFICACIONES",
        "info": "",
        "x": 3680,
        "y": 420,
        "wires": []
    },
    {
        "id": "11b6f91350c39f32",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "-------------------------DECLARACIÓN DE ADICIONALES GENERALES---------------------------------",
        "info": "",
        "x": 840,
        "y": 580,
        "wires": []
    },
    {
        "id": "a51381c6000736aa",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 260,
        "y": 1020,
        "wires": []
    },
    {
        "id": "58c9cd56b47472fe",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "-------------SEÑALES GENERALES-------------------------------------------",
        "info": "",
        "x": 260,
        "y": 1140,
        "wires": []
    },
    {
        "id": "689462313c5d4d08",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1bc36225eb8432e1",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "-------------SEÑALES CONTROL-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1460,
        "wires": []
    },
    {
        "id": "53afb84b47327206",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 1900,
        "wires": []
    },
    {
        "id": "f1c736f408a28489",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "-------------SEÑALES SENSORES-------------------------------------------",
        "info": "",
        "x": 250,
        "y": 2020,
        "wires": []
    },
    {
        "id": "f7fa79430529f61c",
        "type": "switch",
        "z": "57387f920ec8def2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 2280,
        "wires": [
            [
                "c42da6bc8122f90e"
            ],
            [
                "4bcbd6f14623073e"
            ]
        ]
    },
    {
        "id": "c42da6bc8122f90e",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2970,
        "y": 2380,
        "wires": [
            [
                "4bcbd6f14623073e"
            ]
        ]
    },
    {
        "id": "d471b148fc653c34",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Escritura en Tabla de Sensor",
        "func": "/*Este nodo prepara el Query para almacenar la información\ndel sensor proveniente del PLC en su lugar correspondiente.\nEsto solo se procesa si la orden de lectura de este sensor\nse encuentra activa\n*/\nmsg.payload = flow.get('Objeto');\n\nif (flow.get('NumSensor') <= flow.get('MaxSensor') && msg.payload[ + flow.get('Sensor' + flow.get('NumSensor'))] == true) {\n    var tableName = flow.get('Sensor' + flow.get('NumSensor'));\n    var datetime = flow.get('FechaHora');\n    var value = msg.payload[flow.get('NumSensor')];\n    var dbName = flow.get('DBname');\n      \n   var topic = \"INSERT INTO \" + dbName + \".\" + tableName + \" (FechaHora, Unidad) VALUES ('\" + datetime + \"', '\" + value + \"');\";\n   \n\n    msg.queryCompresion = \"SELECT Valor FROM \" + flow.get('DBname') + \".\" + tableName + \" ORDER BY FechaHora DESC LIMIT 1;\";\n\n    msg.topic = topic;\n    flow.set(\"queryValor\", msg.topic);\n    msg.payload = 0;\n    return msg;\n} else {\n    msg.payload = 1;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 2240,
        "wires": [
            [
                "49fef2153d7ad244",
                "839b1584a686e115",
                "f11386f949f0e3d9"
            ]
        ]
    },
    {
        "id": "839b1584a686e115",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "TEXT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2220,
        "wires": []
    },
    {
        "id": "d62e965331c33003",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Inicializacion del loop",
        "func": "/*Este nodo inicializa las variables necesarias para ciclar\nla información de cada uno de los sensores y escribirla en \nla tabla correspondiente en la BD de la máquina\n*/\n\nflow.set('NumSensor',1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 2200,
        "wires": [
            [
                "d471b148fc653c34",
                "0fd7f19165618e88"
            ]
        ]
    },
    {
        "id": "49fef2153d7ad244",
        "type": "switch",
        "z": "57387f920ec8def2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 2380,
        "wires": [
            [
                "959306bd03878c19"
            ],
            [
                "4bcbd6f14623073e"
            ]
        ]
    },
    {
        "id": "4bcbd6f14623073e",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "loop",
        "func": "if(flow.get('NumSensor')<flow.get('MaxSensor')){\n    flow.set('NumSensor',flow.get('NumSensor')+1);\n    msg.payload = flow.get('NumSensor');\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 2380,
        "wires": [
            [
                "d471b148fc653c34"
            ]
        ]
    },
    {
        "id": "af56c491420d0717",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "------------------------------------------------------------------------*ESCRITURA EN LAS TABLAS DE SENSOR Y ASIGNACIÓN DE ID*--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2170,
        "y": 2140,
        "wires": []
    },
    {
        "id": "32427ec908d84f0f",
        "type": "delay",
        "z": "57387f920ec8def2",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 2200,
        "wires": [
            [
                "d62e965331c33003"
            ]
        ]
    },
    {
        "id": "f11386f949f0e3d9",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "CHECK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "0b8221725ba8c2ef",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Check Valores iguales",
        "func": "//recuperamos el valor de la ultima medida del sensor y lo comparamos con el que estamos a punto de introducir\n//si estos valores coinciden, en lugar de seguir con la escritura saltamos una iteracion en el loop\nmsg.payload = msg.payload[0];\nmsg.payload = msg.payload[\"Valor\"];\nflow.set(\"ValorPrevio\", msg.payload);\n\nmsg.payload = flow.get(\"Objeto\");\nvar sensorKey = 'Sensor' + flow.get('NumSensor');\nmsg.payload = msg.payload[sensorKey];\nflow.set(\"ValorActual\", msg.payload);\n\nif (flow.get(\"ValorPrevio\") !== flow.get(\"ValorActual\")) {\n    msg.topic = \"INSERT INTO \" + flow.get(\"DBname\") + \".Tabla (Valor) VALUES ('\" + flow.get(\"ValorActual\") + \"');\";\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 2220,
        "wires": [
            [
                "f7fa79430529f61c",
                "3655dcd7d91995e3"
            ]
        ]
    },
    {
        "id": "959306bd03878c19",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Bypass compresion",
        "func": "if (flow.get(\"ModoCompresion\") == 1) {\n    msg.payload = 0;\n} else {\n    msg.payload = 1;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 2380,
        "wires": [
            [
                "112dd2095c9c66d4"
            ]
        ]
    },
    {
        "id": "112dd2095c9c66d4",
        "type": "switch",
        "z": "57387f920ec8def2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2430,
        "y": 2380,
        "wires": [
            [
                "0c2334a914d76df1"
            ],
            [
                "c42da6bc8122f90e"
            ]
        ]
    },
    {
        "id": "3655dcd7d91995e3",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "COMPRESSION",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 2220,
        "wires": []
    },
    {
        "id": "0fd7f19165618e88",
        "type": "link out",
        "z": "57387f920ec8def2",
        "name": "INFO SENSOR TEXT",
        "mode": "link",
        "links": [],
        "x": 2215,
        "y": 2200,
        "wires": []
    },
    {
        "id": "0c2334a914d76df1",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "8c296d361a2e461f",
        "name": "",
        "x": 2570,
        "y": 2260,
        "wires": [
            [
                "0b8221725ba8c2ef"
            ]
        ]
    },
    {
        "id": "81d98c73a6b65e6f",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 730,
        "y": 1240,
        "wires": [
            [
                "9bed27fc48c77809"
            ]
        ]
    },
    {
        "id": "9bed27fc48c77809",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"LOTEC\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "f7c412f57f6bee57",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1030,
        "y": 1320,
        "wires": [
            [
                "addc2f4ff7f44f5a"
            ]
        ]
    },
    {
        "id": "addc2f4ff7f44f5a",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "SET ORDEN_LECTURA_general",
        "func": "flow.set(\"CONTROL_EMAIL\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "db0d23d7b44d1139",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "POR FASE",
        "func": "// Obtener el estado de la variable '4FASE' del flow\nvar estado = flow.get(\"4FASE\");\n\n// Obtener el estado previo del bloqueo (si ya fue detectado)\nvar Latencia = flow.get(\"bloqueado\") || false;\n\nif (estado === \"Preparacion a reposo\" && !Latencia) {\n    // Si se encuentra \"Preparacion a reposo\" y no está bloqueado, enviar msg.payload\n    msg.payload = \"Estado detectado: Preparacion a reposo\";\n    \n    // Bloquear el envío de más mensajes\n    flow.set(\"bloqueado\", true);\n    \n    return msg;\n} else if (estado !== \"Preparacion a reposo\" && Latencia) {\n    // Si el estado ya no es \"Preparacion a reposo\", desbloquear el envío\n    flow.set(\"bloqueado\", false);\n}\n\nreturn null; // No se envía ningún mensaje si no cumple las condiciones\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3650,
        "y": 620,
        "wires": [
            [
                "171a7ba363ba6acd"
            ]
        ]
    },
    {
        "id": "da2d5b4c4e449f8d",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3400,
        "y": 480,
        "wires": [
            [
                "171a7ba363ba6acd"
            ]
        ]
    },
    {
        "id": "fb6b3acfbd39019f",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "------------------------------------------------------------------------RESPUESTA ERROR DE CICLO--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2070,
        "y": 2580,
        "wires": []
    },
    {
        "id": "aa628141c0a94f76",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "COMPROBACIÓN DE ERROR DE CICLO",
        "func": "var errorciclo = flow.get(\"zerror_ciclo\");\nvar OL = flow.get(\"ORDEN_LECTURA_general\");\n\n// Verifica que las variables existen\nif (typeof errorciclo === 'undefined' || typeof OL === 'undefined') {\n    node.warn(\"Variables zerror_ciclo u ORDEN_LECTURA_general no definidas\");\n    return null;\n}\n\n// Si zerror_ciclo es true, envía un payload de 2\nif (errorciclo === true) {\n    msg.payload = 2;\n    return msg;\n} else {\n    // Si es false, envía un payload de 0 (o el valor que necesites cuando no hay error)\n    \n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2660,
        "wires": [
            [
                "b92f21bf5852f9db"
            ]
        ]
    },
    {
        "id": "b1bd31d56760512f",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Modo Compresion",
        "func": "flow.set(\"ModoCompresion\",msg.payload);\nmsg.payload = \"Modo Compresion Status=\"+flow.get(\"ModoCompresion\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2480,
        "wires": [
            [
                "6db14f04eace75dd"
            ]
        ]
    },
    {
        "id": "d7630d43052a5bf7",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1670,
        "y": 2460,
        "wires": [
            [
                "b1bd31d56760512f"
            ]
        ]
    },
    {
        "id": "8a472ca63a6892e8",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1670,
        "y": 2500,
        "wires": [
            [
                "b1bd31d56760512f"
            ]
        ]
    },
    {
        "id": "6db14f04eace75dd",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 2480,
        "wires": []
    },
    {
        "id": "2ece3f9f96291f64",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "ORDEN_LECTURA_LOTE(ok)",
        "func": "// Obtener las variables necesarias de flujo\nvar latencia = flow.get(\"LATENCIA_ORDEN_LECTURA_LOTE\");\nvar OPERARIO = flow.get(\"5OPERARIO\"); // Asegurarse de que \"5OPERARIO\" es una variable válida de flujo\nvar LOTEC = flow.get(\"LOTEC\");\nvar Lote = flow.get(\"1LOTE\");\n\n// Reset de latencia si LOTEC es 0, 2 o 4\nif (LOTEC === 0 || LOTEC === 2 || LOTEC === 4) {\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 0);\n  \n}\n\n// Orden para iniciar el lote (LOTEC = 1)\nif (LOTEC === 1 && latencia === 0) {\n    msg.payload = 2;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    \n  // Consulta SQL para insertar un nuevo lote e iniciar el lote con hora de inicio\n    msg.topic = `INSERT INTO INT_RECEPCION.LOTE (1LOTE, 3FechaInicioLote, 4FechaFinLote, 5OPERARIO)\n                 VALUES ('${Lote}', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '${OPERARIO}');`;\n\nreturn msg;\n}\n\n// Orden para finalizar el lote (LOTEC = 3)\nif (LOTEC === 3 && latencia === 0) {\n    msg.payload = 4;\n    flow.set(\"LATENCIA_ORDEN_LECTURA_LOTE\", 1);\n    latencia = 1;  // Actualizamos la latencia para este flujo\n\n    // Consulta SQL para actualizar la hora de finalización del lote más reciente\n    msg.topic = `UPDATE INT_RECEPCION.LOTE \n                 SET 4FechaFinLote = CURRENT_TIMESTAMP \n                 WHERE 1LOTE = '${Lote}' \n                 ORDER BY 3FechaInicioLote DESC \n                 LIMIT 1;`;\nreturn msg;\n}else{\nreturn null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 2880,
        "wires": [
            [
                "0a7ad1d4f1cf9e4e",
                "f5d06d2270e147f2"
            ]
        ]
    },
    {
        "id": "1a544f59f5f4e76e",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1460,
        "y": 2480,
        "wires": [
            [
                "aa628141c0a94f76"
            ]
        ]
    },
    {
        "id": "b92f21bf5852f9db",
        "type": "s7 out",
        "z": "57387f920ec8def2",
        "endpoint": "f3ca9ac4bcf4b2a8",
        "variable": "ORDEN_LECTURA_general",
        "name": "",
        "x": 2220,
        "y": 2660,
        "wires": []
    },
    {
        "id": "f5d06d2270e147f2",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "884e4ae10df762d0",
        "name": "",
        "x": 2310,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "61ff26a2b379e1da",
        "type": "inject",
        "z": "57387f920ec8def2",
        "name": "NUEVO ADICIONAL (TOTALIZACIÓN)",
        "props": [
            {
                "p": "AdicionalT1",
                "v": "99AGUAHELADA(Wh)",
                "vt": "str"
            },
            {
                "p": "AdicionalT2",
                "v": "99ELECTRICIDAD(Wh)",
                "vt": "str"
            },
            {
                "p": "AdicionalT3",
                "v": "99AIRECOMPRIMIDO(Wh)",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 660,
        "y": 700,
        "wires": [
            [
                "fbf27ce0279fb8a5"
            ]
        ]
    },
    {
        "id": "fbf27ce0279fb8a5",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "SET ADICIONALES",
        "func": "flow.set(\"AdicionalT1\", msg.AdicionalT1);\nflow.set(\"AdicionalT2\", msg.AdicionalT2);\nflow.set(\"AdicionalT3\", msg.AdicionalT3);\nflow.set(\"AdicionalT4\", msg.AdicionaTl4);\nflow.set(\"AdicionalT5\", msg.AdicionaTl5);\nflow.set(\"AdicionalT6\", msg.AdicionaTl6);\nflow.set(\"AdicionalT7\", msg.AdicionaTl7);\nflow.set(\"AdicionalT8\", msg.AdicionaTl8);\nflow.set(\"AdicionalT9\", msg.AdicionaTl9);\nflow.set(\"AdicionalT10\", msg.AdicionalT10);\nflow.set(\"AdicionalT11\", msg.AdicionalT11);\nflow.set(\"AdicionalT12\", msg.AdicionalT12);\nflow.set(\"AdicionalT13\", msg.AdicionalT13);\nflow.set(\"AdicionalT14\", msg.AdicionalT14);\nflow.set(\"AdicionalT15\", msg.AdicionalT15);\n\nmsg.payload = msg.payload\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "9dd090f6c817768d",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "------------------------------------------------------------------------ADICIONALES DE TOTALIZACIÓN--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2080,
        "y": 3020,
        "wires": []
    },
    {
        "id": "9b68bdeeadfb82c9",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Actualizacion de tablas",
        "func": "\n\n    var AdicionalT = msg.AdicionalT2; // Guarda el nuevo valor en la columna disponible\n    msg.topic = `ALTER TABLE INT_RECEPCION.General ADD COLUMN ${msg.AdicionalT} VARCHAR(50) NULL;`;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 3140,
        "wires": [
            [
                "38efb652444791ab"
            ]
        ]
    },
    {
        "id": "7430f2843f190401",
        "type": "s7 in",
        "z": "57387f920ec8def2",
        "endpoint": "bd5f4318a967a433",
        "mode": "all",
        "variable": "",
        "diff": false,
        "name": "",
        "x": 170,
        "y": 3220,
        "wires": [
            [
                "d2a1f494c97b97d0",
                "6369c81fb26c3e40"
            ]
        ]
    },
    {
        "id": "70cc18c88e11391b",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "-------------COSNUMOS-------------------------------------------",
        "info": "",
        "x": 200,
        "y": 3140,
        "wires": []
    },
    {
        "id": "09b253c81ad8deb5",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "-------------CONSUMOS-------------------------------------------",
        "info": "",
        "x": 200,
        "y": 3300,
        "wires": []
    },
    {
        "id": "9557b28c44da6fa6",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "INSTRUCCIONES PARA AÑADIR ADICIONALES \"G\" Y \"T\"",
        "info": " flow.get(\"AdicionalT1\"), flow.get(\"AdicionalT2\"), flow.get(\"AdicionalT3\"), flow.get(\"AdicionalT4\"), flow.get(\"AdicionalT5\"), flow.get(\"AdicionalT6\"), flow.get(\"AdicionaT7\"), flow.get(\"AdicionalT8\"), flow.get(\"AdicionaT9\"), flow.get(\"AdicionalT10\"), flow.get(\"AdicionalT11\"), flow.get(\"AdicionalT12\"), flow.get(\"AdicionalT13\"), flow.get(\"AdicionalT14\"), flow.get(\"AdicionalT15\"",
        "x": 840,
        "y": 780,
        "wires": []
    },
    {
        "id": "d2a1f494c97b97d0",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "DECLARACION Y TOTALIZACIÓN DE CONSUMOS",
        "func": "// Obtenemos el orden de lectura desde el flujo\nlet lotec = flow.get(\"LOTEC\");\nvar resetconsumos = flow.get (\"RESETCONSUMOS\")\n\n// Obtenemos el objeto de energía desde el payload\nlet energia = msg.payload; // Suponemos que el payload contiene el objeto con las variables\n\n// Si el orden de lectura es 0, significa que es una nueva lectura y debemos resetear las variables\nif (lotec === 0 || resetconsumos === 1) {\n    // Reseteamos las variables finales directamente al comenzar una nueva lectura\n    Object.keys(energia).forEach(clave => {\n        flow.set(clave, 0); // Inicializamos a 0 en el flujo\n        flow.set (\"RESETCONSUMOS\",0)\n    });\n    node.warn(\"Variables reseteadas a cero.\"); // Mensaje de depuración opcional\n\n} else if (lotec !== 0) { // Si el orden de lectura no es 0, acumulamos los valores\n    // Fase de acumulación: iteramos sobre las claves de 'energia' y acumulamos los valores directamente\n    for (let clave in energia) {\n        // Aseguramos que la clave sea una propiedad propia\n        if (energia.hasOwnProperty(clave)) {\n            // Intentamos convertir el valor a número; manejamos NaN y valores inválidos\n            let valorNumerico = parseFloat(energia[clave]);\n            if (isNaN(valorNumerico)) {\n                node.warn(`Valor inválido para clave ${clave}: ${energia[clave]}`);\n                continue; // Saltamos a la siguiente clave en caso de error\n            }\n\n            // Convertimos kW/h a kW/s (dividimos entre 3600)\n            let valorPorSegundo = valorNumerico / 3600;\n\n            // Obtenemos el valor acumulado actual desde el flujo\n            let valorAcumulado = flow.get(clave) || 0;\n\n            // Sumamos el valor convertido al acumulado\n            let nuevoValor = valorAcumulado + valorPorSegundo;\n\n            //redondeo a 2 decimales\n            let valoredondeado = parseFloat(nuevoValor.toFixed(2));\n\n            // Guardamos el valor sin redondear en el flujo\n            flow.set(clave, valoredondeado);\n        }\n    }\n    node.warn(\"Acumulación completada.\"); // Mensaje de depuración opcional\n\n} else {\n    // Si el orden de lectura es un valor no esperado\n    node.warn(`Orden de lectura no reconocido: ${lotec}`);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "1f9db25e13f107f2",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "DECLARACIÓN Y TOTALIZACION DE CONSUMOS",
        "func": "// Inicialización de variables de acumulación en el flujo, si no existen\nlet variablesTotales = flow.get(\"variablesTotales\") || {};\n\n// Obtenemos el orden de lectura desde el flujo\nlet ordenLectura = flow.get(\"LOTEC\");\n\n// Obtenemos el objeto de energía desde el payload\nlet energia = msg.payload; // Suponemos que el payload contiene el objeto con las variables\n\nif (ordenLectura === 1) {\n    // Reseteamos las variables de acumulación al comenzar una nueva lectura\n    flow.set(\"variablesTotales\", {});\n    node.warn(\"Iniciando acumulación de variables.\"); // Mensaje de depuración opcional\n} else if (ordenLectura === 2 || ordenLectura === 0) {\n    // Fase de acumulación: iteramos sobre las claves de 'energia' y acumulamos los valores\n    for (let clave in energia) {\n        if (energia.hasOwnProperty(clave)) {\n            // Inicializamos la clave en 'variablesTotales' si no existe\n            if (!variablesTotales[clave]) {\n                variablesTotales[clave] = 0;\n            }\n\n            // Intentamos convertir el valor a número; manejamos NaN y valores inválidos\n            let valorNumerico = parseFloat(energia[clave]);\n            if (!isNaN(valorNumerico)) {\n                // Convertimos kW/h a kW/s (dividimos entre 3600) y acumulamos\n                let valorPorSegundo = valorNumerico / 3600;\n                variablesTotales[clave] += valorPorSegundo;\n            } else {\n                node.warn(`Valor inválido para clave ${clave}: ${energia[clave]}`);\n            }\n        }\n    }\n\n    // Guardamos las variables acumuladas en el flujo\n    flow.set(\"variablesTotales\", variablesTotales);\n} else if (ordenLectura === 1) {\n    // Fase de cálculo final: redondeamos y guardamos las variables acumuladas\n    let resultadosFinales = {};\n\n    for (let clave in variablesTotales) {\n        if (variablesTotales.hasOwnProperty(clave)) {\n            // Redondeamos a dos decimales antes de guardar\n            let valorFinal = variablesTotales[clave].toFixed(2);\n            resultadosFinales[clave] = parseFloat(valorFinal);\n\n            // También guardamos cada clave en el flujo si es necesario\n            flow.set(clave, parseFloat(valorFinal));\n        }\n    }\n\n    // Reseteamos las variables acumuladas para el siguiente ciclo\n    flow.set(\"variablesTotales\", {});\n\n    // Puedes enviar los resultados finales si es necesario\n    msg.payload.resultadosFinales = resultadosFinales;\n    node.warn(\"Cálculo final realizado. Variables reseteadas.\");\n} else {\n    node.warn(\"Orden de lectura no reconocido.\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "03354f9142e42d4e",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "ANÁLISIS DE CONSUMOS",
        "func": "// Obtenemos el objeto recibido (msg.payload)\nlet objeto = msg.payload;\n\n// Iteramos sobre las variables \"AdicionalT1\" a \"AdicionalT15\"\nfor (let z = 1; z <= 15; z++) {\n    // Obtenemos el nombre de la variable AdicionalTi desde el flujo\n    let adicional = flow.get(\"AdicionalT\" + z);\n\n    // Si la variable AdicionalTi no es null o undefined, la agregamos al objeto\n    if (adicional !== null && adicional !== undefined) {\n        // Obtenemos el valor de la variable adicional desde el flujo\n        let valorAdicional = flow.get(adicional);\n\n        // Si la variable adicional tiene un valor, la agregamos al objeto\n        if (valorAdicional !== null && valorAdicional !== undefined) {\n            // Agregamos la clave y el valor al objeto\n            objeto[adicional] = valorAdicional;\n        }\n    }\n}\n\n// Devolvemos el objeto modificado\nmsg.payload = objeto;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1080,
        "wires": [
            [
                "cdcf74ce89e23b61"
            ]
        ]
    },
    {
        "id": "38efb652444791ab",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "884e4ae10df762d0",
        "name": "",
        "x": 1930,
        "y": 3140,
        "wires": [
            []
        ]
    },
    {
        "id": "b8c6905f99725cb7",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "SET LOTEC",
        "func": "flow.set (\"LOTEC\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3790,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "b45857a330cb8431",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "RESETCONSUMOS",
        "func": "flow.set (\"RESETCONSUMOS\",1)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3820,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "e828945372c4929a",
        "type": "switch",
        "z": "57387f920ec8def2",
        "name": "",
        "property": "4FASE",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "Reposo",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Reposo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Arranque Inicial",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 4330,
        "y": 140,
        "wires": [
            [
                "06731e59fbd12c8f"
            ],
            [
                "d0e0876e3c820803"
            ],
            [
                "06731e59fbd12c8f"
            ]
        ]
    },
    {
        "id": "d2dc115cef04bcb4",
        "type": "debug",
        "z": "57387f920ec8def2",
        "name": "BLOCK",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4340,
        "y": 100,
        "wires": []
    },
    {
        "id": "7df8a1cabf0b3a08",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "REVISAR!!!!",
        "info": "",
        "x": 1950,
        "y": 2940,
        "wires": []
    },
    {
        "id": "e7b50c0c407ae63a",
        "type": "comment",
        "z": "57387f920ec8def2",
        "name": "------------------------------------------------------------------------Cálculo de KPIS--------------------------------------------------------------------------",
        "info": "Esta sección del código se encarga de :\n    1.-`Destripar la informacion que llega del PLC` relativa a la `cada sensor` de la máquina para asignar a cada variable su valor correspondiente.\n    2.-`Procesar el Query que escribe los datos en la tabla de cada sensor` de la máquina.\n",
        "x": 2040,
        "y": 3340,
        "wires": []
    },
    {
        "id": "6369c81fb26c3e40",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Cálculo del KPI ",
        "func": "// Inicializar variables en el contexto si no existen\nif (!context.get(\"ultimoLote\")) {\n    context.set(\"ultimoLote\", null);\n}\n\n// Extraer datos del mensaje\nlet fase = flow.get (\"4FASE\");\nlet lote = flow.get (\"1LOTE\");\n\n// Si la fase NO es \"Reposo\", guardar el lote actual en contexto\nif (fase !== \"Reposo\") {\n    context.set(\"ultimoLote\", lote);\n    return null; // No hacer nada todavía\n}\n\n// Si la fase es \"Reposo\", hacer una consulta a la base de datos\nlet ultimoLote = context.get(\"ultimoLote\");\n\nif (ultimoLote) {\n    msg.topic = `\n        SELECT \n            SUM(CAST(\\`99AGUAHELADA(Wh)\\` AS DECIMAL)) AS agua_helada,\n            SUM(CAST(\\`99ELECTRICIDAD(Wh)\\` AS DECIMAL)) AS electricidad,\n            SUM(CAST(\\`99AIRECOMPRIMIDO(Wh)\\` AS DECIMAL)) AS aire_comprimido,\n            SUM(CAST(LITROS AS DECIMAL)) AS litros\n        FROM INT_RECEPCION.General \n        WHERE \\`1LOTE\\` = '${ultimoLote}';\n    `;\n    \n    msg.payload = { lote: ultimoLote };\n    \n    return msg; // Enviar la consulta a MariaDB\n}\n\nreturn null;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 3480,
        "wires": [
            [
                "613f5eb85acea86d"
            ]
        ]
    },
    {
        "id": "613f5eb85acea86d",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "884e4ae10df762d0",
        "name": "KPI1",
        "x": 1970,
        "y": 3480,
        "wires": [
            [
                "58dfcc6b8b3c0af9"
            ]
        ]
    },
    {
        "id": "58dfcc6b8b3c0af9",
        "type": "function",
        "z": "57387f920ec8def2",
        "name": "Inserción del KPI",
        "func": "// Definir precios de la energía (ajustar según tarifas reales)\nconst precio_electricidad = 0.15;  // €/kWh\nconst precio_agua_helada = 0.05;   // €/kWh\nconst precio_aire_comprimido = 0.10; // €/kWh\n\n// Extraer los valores obtenidos de la base de datos\nlet resultado = msg.payload[0];\n\nif (resultado) {\n    let agua_helada = parseFloat(resultado.agua_helada) || 0;\n    let electricidad = parseFloat(resultado.electricidad) || 0;\n    let aire_comprimido = parseFloat(resultado.aire_comprimido) || 0;\n    let litros = parseFloat(resultado.litros) || 0;\n\n    // Calcular costo total de la energía\n    let costo_total = \n        (agua_helada * precio_agua_helada) + \n        (electricidad * precio_electricidad) + \n        (aire_comprimido * precio_aire_comprimido);\n\n    // Calcular KPI como precio por litro\n    let kpi = litros > 0 ? costo_total / litros : 0;\n\n    // Generar query para insertar en KPI1\n    msg.topic = `\n        INSERT INTO INT_RECEPCION.KPI1 (fechahora, LOTE, KPI) \n        VALUES (CURRENT_TIMESTAMP, '${msg.payload.lote}', ${kpi});\n    `;\n\n    return msg; // Enviar a MariaDB\n}\n\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 3480,
        "wires": [
            [
                "061241293dc6590e"
            ]
        ]
    },
    {
        "id": "061241293dc6590e",
        "type": "mysql",
        "z": "57387f920ec8def2",
        "mydb": "884e4ae10df762d0",
        "name": "KPI1",
        "x": 2430,
        "y": 3480,
        "wires": [
            []
        ]
    }
]